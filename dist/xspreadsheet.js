/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/index.less":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/index.less ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../assets/sprite.svg */ "./assets/sprite.svg"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "body {\n  margin: 0;\n}\n.x-spreadsheet {\n  font-size: 13px;\n  line-height: normal;\n  user-select: none;\n  -moz-user-select: none;\n  font-family: 'Lato', 'Source Sans Pro', Roboto, Helvetica, Arial, sans-serif;\n  box-sizing: content-box;\n  background: #fff;\n  -webkit-font-smoothing: antialiased;\n}\n.x-spreadsheet textarea {\n  font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n}\n.x-spreadsheet-sheet {\n  position: relative;\n  overflow: hidden;\n}\n.x-spreadsheet-table {\n  vertical-align: bottom;\n}\n.x-spreadsheet-tooltip {\n  font-family: inherit;\n  position: absolute;\n  padding: 5px 10px;\n  color: #fff;\n  border-radius: 1px;\n  background: #000000;\n  font-size: 12px;\n  z-index: 201;\n}\n.x-spreadsheet-tooltip:before {\n  pointer-events: none;\n  position: absolute;\n  left: calc(50% - 4px);\n  top: -4px;\n  content: \"\";\n  width: 8px;\n  height: 8px;\n  background: inherit;\n  -webkit-transform: rotate(45deg);\n  transform: rotate(45deg);\n  z-index: 1;\n  box-shadow: 1px 1px 3px -1px rgba(0, 0, 0, 0.3);\n}\n.x-spreadsheet-color-palette {\n  padding: 5px;\n}\n.x-spreadsheet-color-palette table {\n  margin: 0;\n  padding: 0;\n  border-collapse: separate;\n  border-spacing: 2;\n  background: #fff;\n}\n.x-spreadsheet-color-palette table td {\n  margin: 0;\n  cursor: pointer;\n  border: 1px solid transparent;\n}\n.x-spreadsheet-color-palette table td:hover {\n  border-color: #ddd;\n}\n.x-spreadsheet-color-palette table td .x-spreadsheet-color-palette-cell {\n  width: 16px;\n  height: 16px;\n}\n.x-spreadsheet-border-palette {\n  padding: 6px;\n}\n.x-spreadsheet-border-palette table {\n  margin: 0;\n  padding: 0;\n  border-collapse: separate;\n  border-spacing: 0;\n  background: #fff;\n  table-layout: fixed;\n}\n.x-spreadsheet-border-palette table td {\n  margin: 0;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-left {\n  border-right: 1px solid #eee;\n  padding-right: 6px;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-left .x-spreadsheet-border-palette-cell {\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n  text-align: center;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-left .x-spreadsheet-border-palette-cell .x-spreadsheet-icon-img {\n  opacity: 0.8;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-left .x-spreadsheet-border-palette-cell:hover {\n  background-color: #eee;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-right {\n  padding-left: 6px;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-right .x-spreadsheet-toolbar-btn {\n  margin-top: 0;\n  margin-bottom: 3px;\n}\n.x-spreadsheet-border-palette .x-spreadsheet-border-palette-right .x-spreadsheet-line-type {\n  position: relative;\n  left: 0;\n  top: -3px;\n}\n.x-spreadsheet-dropdown {\n  position: relative;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-content {\n  position: absolute;\n  z-index: 200;\n  background: #fff;\n  box-shadow: 1px 2px 5px 2px rgba(51, 51, 51, 0.15);\n}\n.x-spreadsheet-dropdown.bottom-left .x-spreadsheet-dropdown-content {\n  top: calc(100% + 5px);\n  left: 0;\n}\n.x-spreadsheet-dropdown.bottom-right .x-spreadsheet-dropdown-content {\n  top: calc(100% + 5px);\n  right: 0;\n}\n.x-spreadsheet-dropdown.top-left .x-spreadsheet-dropdown-content {\n  bottom: calc(100% + 5px);\n  left: 0;\n}\n.x-spreadsheet-dropdown.top-right .x-spreadsheet-dropdown-content {\n  bottom: calc(100% + 5px);\n  right: 0;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-title {\n  padding: 0 5px;\n  display: inline-block;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-header .x-spreadsheet-icon.arrow-left {\n  margin-left: 4px;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-header .x-spreadsheet-icon.arrow-right {\n  width: 10px;\n  margin-right: 4px;\n}\n.x-spreadsheet-dropdown .x-spreadsheet-dropdown-header .x-spreadsheet-icon.arrow-right .arrow-down {\n  left: -130px;\n}\n/* resizer **/\n.x-spreadsheet-resizer {\n  position: absolute;\n  z-index: 11;\n}\n.x-spreadsheet-resizer .x-spreadsheet-resizer-hover {\n  background-color: rgba(75, 137, 255, 0.25);\n}\n.x-spreadsheet-resizer .x-spreadsheet-resizer-line {\n  position: absolute;\n}\n.x-spreadsheet-resizer.horizontal {\n  cursor: row-resize;\n}\n.x-spreadsheet-resizer.horizontal .x-spreadsheet-resizer-line {\n  border-bottom: 2px dashed #4b89ff;\n  left: 0;\n  bottom: 0;\n}\n.x-spreadsheet-resizer.vertical {\n  cursor: col-resize;\n}\n.x-spreadsheet-resizer.vertical .x-spreadsheet-resizer-line {\n  border-right: 2px dashed #4b89ff;\n  top: 0;\n  right: 0;\n}\n/* scrollbar */\n.x-spreadsheet-scrollbar {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  background-color: #f4f5f8;\n  opacity: 0.9;\n  z-index: 12;\n}\n.x-spreadsheet-scrollbar.horizontal {\n  right: 15px;\n  overflow-x: scroll;\n  overflow-y: hidden;\n}\n.x-spreadsheet-scrollbar.horizontal > div {\n  height: 1px;\n  background: #ddd;\n}\n.x-spreadsheet-scrollbar.vertical {\n  bottom: 15px;\n  overflow-x: hidden;\n  overflow-y: scroll;\n}\n.x-spreadsheet-scrollbar.vertical > div {\n  width: 1px;\n  background: #ddd;\n}\n/* @{css-prefix}-overlayer */\n.x-spreadsheet-overlayer {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 10;\n}\n.x-spreadsheet-overlayer .x-spreadsheet-overlayer-content {\n  position: absolute;\n  overflow: hidden;\n  pointer-events: none;\n  width: 100%;\n  height: 100%;\n}\n.x-spreadsheet-editor,\n.x-spreadsheet-selector {\n  box-sizing: content-box;\n  position: absolute;\n  overflow: hidden;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n/* @{css-prefix}-selector */\n.x-spreadsheet-selector .hide-input {\n  position: absolute;\n  z-index: 0;\n}\n.x-spreadsheet-selector .hide-input input {\n  padding: 0;\n  width: 0;\n  border: none!important;\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-area {\n  position: absolute;\n  border: 2px solid #4b89ff;\n  background: rgba(75, 137, 255, 0.1);\n  z-index: 5;\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-clipboard,\n.x-spreadsheet-selector .x-spreadsheet-selector-autofill {\n  position: absolute;\n  background: transparent;\n  z-index: 100;\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-clipboard {\n  border: 2px dashed #4b89ff;\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-autofill {\n  border: 1px dashed rgba(0, 0, 0, 0.45);\n}\n.x-spreadsheet-selector .x-spreadsheet-selector-corner {\n  pointer-events: auto;\n  position: absolute;\n  cursor: crosshair;\n  font-size: 0;\n  height: 5px;\n  width: 5px;\n  right: -5px;\n  bottom: -5px;\n  border: 2px solid #ffffff;\n  background: #4b89ff;\n}\n.x-spreadsheet-editor {\n  z-index: 20;\n}\n.x-spreadsheet-editor .x-spreadsheet-editor-area {\n  position: absolute;\n  text-align: left;\n  border: 2px solid #4b89ff;\n  line-height: 0;\n  z-index: 100;\n  pointer-events: auto;\n}\n.x-spreadsheet-editor .x-spreadsheet-editor-area textarea {\n  box-sizing: content-box;\n  border: none;\n  padding: 0 3px;\n  outline: none;\n  resize: none;\n  text-align: start;\n  overflow-y: hidden;\n  font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n  color: inherit;\n  white-space: normal;\n  word-wrap: break-word;\n  line-height: 22px;\n  margin: 0;\n}\n.x-spreadsheet-editor .x-spreadsheet-editor-area .textline {\n  overflow: hidden;\n  visibility: hidden;\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n.x-spreadsheet-item {\n  user-select: none;\n  background: 0;\n  border: 1px solid transparent;\n  outline: none;\n  height: 26px;\n  color: rgba(0, 0, 0, 0.9);\n  line-height: 26px;\n  list-style: none;\n  padding: 2px 10px;\n  cursor: default;\n  text-align: left;\n  overflow: hidden;\n}\n.x-spreadsheet-item.disabled {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.x-spreadsheet-item:hover,\n.x-spreadsheet-item.active {\n  background: rgba(0, 0, 0, 0.05);\n}\n.x-spreadsheet-item.divider {\n  height: 0;\n  padding: 0;\n  margin: 5px 0;\n  border: none;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n}\n.x-spreadsheet-item .label {\n  float: right;\n  opacity: 0.65;\n  font-size: 1em;\n}\n.x-spreadsheet-item.state,\n.x-spreadsheet-header.state {\n  padding-left: 35px!important;\n  position: relative;\n}\n.x-spreadsheet-item.state:before,\n.x-spreadsheet-header.state:before {\n  content: '';\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  left: 12px;\n  top: calc(50% - 5px);\n  background: rgba(0, 0, 0, 0.08);\n  border-radius: 2px;\n}\n.x-spreadsheet-item.state.checked:before,\n.x-spreadsheet-header.state.checked:before {\n  background: #4b89ff;\n}\n.x-spreadsheet-checkbox {\n  position: relative;\n  display: inline-block;\n  backface-visibility: hidden;\n  outline: 0;\n  vertical-align: baseline;\n  font-style: normal;\n  font-size: 1rem;\n  line-height: 1em;\n}\n.x-spreadsheet-checkbox > input {\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 0!important;\n  outline: 0;\n  z-index: -1;\n}\n.x-spreadsheet-suggest,\n.x-spreadsheet-contextmenu,\n.x-spreadsheet-sort-filter {\n  position: absolute;\n  box-shadow: 1px 2px 5px 2px rgba(51, 51, 51, 0.15);\n  background: #fff;\n  z-index: 100;\n  width: 260px;\n  pointer-events: auto;\n  overflow: auto;\n}\n.x-spreadsheet-suggest {\n  width: 200px;\n}\n.x-spreadsheet-filter {\n  border: 1px solid #e9e9e9;\n  font-size: 12px;\n  margin: 10px;\n}\n.x-spreadsheet-filter .x-spreadsheet-header {\n  padding: 0.5em 0.75em;\n  background: #f8f8f9;\n  border-bottom: 1px solid #e9e9e9;\n  border-left: 1px solid transparent;\n}\n.x-spreadsheet-filter .x-spreadsheet-body {\n  height: 200px;\n  overflow-y: auto;\n}\n.x-spreadsheet-filter .x-spreadsheet-body .x-spreadsheet-item {\n  height: 20px;\n  line-height: 20px;\n}\n.x-spreadsheet-sort-filter .x-spreadsheet-buttons {\n  margin: 10px;\n}\n.x-spreadsheet-toolbar,\n.x-spreadsheet-bottombar {\n  height: 40px;\n  padding: 0 30px;\n  text-align: left;\n  background: #f5f6f7;\n  display: flex;\n}\n.x-spreadsheet-bottombar {\n  position: relative;\n  border-top: 1px solid #e0e2e4;\n}\n.x-spreadsheet-bottombar .x-spreadsheet-menu > li {\n  line-height: 40px;\n  height: 40px;\n  padding-top: 0;\n  padding-bottom: 0;\n  vertical-align: middle;\n  border-right: 1px solid #e8eaed;\n}\n.x-spreadsheet-menu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  user-select: none;\n}\n.x-spreadsheet-menu > li {\n  float: left;\n  line-height: 1.25em;\n  padding: 0.785em 1em;\n  margin: 0;\n  vertical-align: middle;\n  text-align: left;\n  font-weight: 400;\n  color: #80868b;\n  white-space: nowrap;\n  cursor: pointer;\n  transition: all 0.3s;\n  font-weight: bold;\n}\n.x-spreadsheet-menu > li.active {\n  background-color: #fff;\n  color: rgba(0, 0, 0, 0.65);\n}\n.x-spreadsheet-menu > li .x-spreadsheet-icon {\n  margin: 0 6px;\n}\n.x-spreadsheet-menu > li .x-spreadsheet-icon .x-spreadsheet-icon-img:hover {\n  opacity: 0.85;\n}\n.x-spreadsheet-menu > li .x-spreadsheet-dropdown {\n  display: inline-block;\n}\n.x-spreadsheet-toolbar {\n  border-bottom: 1px solid #e0e2e4;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btns {\n  display: inline-flex;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-more {\n  padding: 0 6px 6px;\n  text-align: left;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-more .x-spreadsheet-toolbar-divider {\n  margin-top: 0;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btn {\n  flex: 0 0 auto;\n  display: inline-block;\n  border: 1px solid transparent;\n  height: 26px;\n  line-height: 26px;\n  min-width: 26px;\n  margin: 6px 1px 0;\n  padding: 0;\n  text-align: center;\n  border-radius: 2px;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btn.disabled {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btn:hover,\n.x-spreadsheet-toolbar .x-spreadsheet-toolbar-btn.active {\n  background: rgba(0, 0, 0, 0.08);\n}\n.x-spreadsheet-toolbar-divider {\n  display: inline-block;\n  border-right: 1px solid #e0e2e4;\n  width: 0;\n  vertical-align: middle;\n  height: 18px;\n  margin: 12px 3px 0;\n}\n.x-spreadsheet-print {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 100;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.x-spreadsheet-print-bar {\n  background: #424242;\n  height: 60px;\n  line-height: 60px;\n  padding: 0 30px;\n}\n.x-spreadsheet-print-bar .-title {\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.2em;\n  float: left;\n}\n.x-spreadsheet-print-bar .-right {\n  float: right;\n  margin-top: 12px;\n}\n.x-spreadsheet-print-content {\n  display: flex;\n  flex: auto;\n  flex-direction: row;\n  background: #d0d0d0;\n  height: calc(100% - 60px);\n}\n.x-spreadsheet-print-content .-sider {\n  flex: 0 0 300px;\n  width: 300px;\n  border-left: 2px solid #ccc;\n  background: #fff;\n}\n.x-spreadsheet-print-content .-content {\n  flex: auto;\n  overflow-x: auto;\n  overflow-y: scroll;\n  height: 100%;\n}\n.x-spreadsheet-canvas-card-wraper {\n  margin: 40px 20px;\n}\n.x-spreadsheet-canvas-card {\n  background: #fff;\n  margin: auto;\n  page-break-before: auto;\n  page-break-after: always;\n  box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 3px rgba(0, 0, 0, 0.12), 0 4px 5px 0 rgba(0, 0, 0, 0.2);\n}\n.x-spreadsheet-calendar {\n  color: rgba(0, 0, 0, 0.65);\n  background: #ffffff;\n  user-select: none;\n}\n.x-spreadsheet-calendar .calendar-header {\n  font-weight: 700;\n  line-height: 30px;\n  text-align: center;\n  width: 100%;\n  float: left;\n  background: #f9fafb;\n}\n.x-spreadsheet-calendar .calendar-header .calendar-header-left {\n  padding-left: 5px;\n  float: left;\n}\n.x-spreadsheet-calendar .calendar-header .calendar-header-right {\n  float: right;\n}\n.x-spreadsheet-calendar .calendar-header .calendar-header-right a {\n  padding: 3px 0;\n  margin-right: 2px;\n  border-radius: 2px;\n}\n.x-spreadsheet-calendar .calendar-header .calendar-header-right a:hover {\n  background: rgba(0, 0, 0, 0.08);\n}\n.x-spreadsheet-calendar .calendar-body {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n.x-spreadsheet-calendar .calendar-body th,\n.x-spreadsheet-calendar .calendar-body td {\n  width: 14.28571429%;\n  min-width: 32px;\n  text-align: center;\n  font-weight: 700;\n  line-height: 30px;\n  padding: 0;\n}\n.x-spreadsheet-calendar .calendar-body td > .cell:hover {\n  background: #ecf6fd;\n}\n.x-spreadsheet-calendar .calendar-body td > .cell.active,\n.x-spreadsheet-calendar .calendar-body td > .cell.active:hover {\n  background: #ecf6fd;\n  color: #2185D0;\n}\n.x-spreadsheet-calendar .calendar-body td > .cell.disabled {\n  pointer-events: none;\n  opacity: 0.5;\n}\n.x-spreadsheet-datepicker {\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);\n  position: absolute;\n  left: 0;\n  top: calc(100% + 5px);\n  z-index: 10;\n  width: auto;\n}\n.x-spreadsheet-buttons {\n  display: flex;\n  justify-content: flex-end;\n}\n.x-spreadsheet-buttons .x-spreadsheet-button {\n  margin-left: 8px;\n}\n.x-spreadsheet-button {\n  display: inline-block;\n  border-radius: 3px;\n  line-height: 1em;\n  min-height: 1em;\n  white-space: nowrap;\n  text-align: center;\n  cursor: pointer;\n  font-size: 1em;\n  font-weight: 700;\n  padding: 0.75em 1em;\n  color: rgba(0, 0, 0, 0.6);\n  background: #E0E1E2;\n  text-decoration: none;\n  font-family: \"Lato\", \"proxima-nova\", \"Helvetica Neue\", Arial, sans-serif;\n  outline: none;\n  vertical-align: baseline;\n  zoom: 1;\n  user-select: none;\n  transition: all 0.1s linear;\n}\n.x-spreadsheet-button.active,\n.x-spreadsheet-button:hover {\n  background-color: #C0C1C2;\n  color: rgba(0, 0, 0, 0.8);\n}\n.x-spreadsheet-button.primary {\n  color: #fff;\n  background-color: #2185D0;\n}\n.x-spreadsheet-button.primary:hover,\n.x-spreadsheet-button.primary.active {\n  color: #fff;\n  background-color: #1678c2;\n}\n.x-spreadsheet-form-input {\n  font-size: 1em;\n  position: relative;\n  font-weight: 400;\n  display: inline-flex;\n  color: rgba(0, 0, 0, 0.87);\n}\n.x-spreadsheet-form-input input {\n  z-index: 1;\n  margin: 0;\n  max-width: 100%;\n  flex: 1 0 auto;\n  outline: 0;\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);\n  text-align: left;\n  line-height: 30px;\n  height: 30px;\n  padding: 0 8px;\n  background: #fff;\n  border: 1px solid #e9e9e9;\n  border-radius: 3px;\n  transition: box-shadow 0.1s ease, border-color 0.1s ease;\n  box-shadow: inset 0 1px 2px hsla(0, 0%, 4%, 0.06);\n}\n.x-spreadsheet-form-input input:focus {\n  border-color: #4b89ff;\n  box-shadow: inset 0 1px 2px rgba(75, 137, 255, 0.2);\n}\n.x-spreadsheet-form-select {\n  position: relative;\n  display: inline-block;\n  background: #fff;\n  border: 1px solid #e9e9e9;\n  border-radius: 2px;\n  cursor: pointer;\n  color: rgba(0, 0, 0, 0.87);\n  user-select: none;\n  box-shadow: inset 0 1px 2px hsla(0, 0%, 4%, 0.06);\n}\n.x-spreadsheet-form-select .input-text {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  min-width: 60px;\n  width: auto;\n  height: 30px;\n  line-height: 30px;\n  padding: 0 8px;\n}\n.x-spreadsheet-form-fields {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n.x-spreadsheet-form-fields .x-spreadsheet-form-field {\n  flex: 0 1 auto;\n}\n.x-spreadsheet-form-fields .x-spreadsheet-form-field .label {\n  display: inline-block;\n  margin: 0 10px 0 0;\n}\n.x-spreadsheet-form-field {\n  display: block;\n  vertical-align: middle;\n  margin-left: 10px;\n  margin-bottom: 10px;\n}\n.x-spreadsheet-form-field:first-child {\n  margin-left: 0;\n}\n.x-spreadsheet-form-field.error .x-spreadsheet-form-select,\n.x-spreadsheet-form-field.error input {\n  border-color: #f04134;\n}\n.x-spreadsheet-form-field .tip {\n  color: #f04134;\n  font-size: 0.9em;\n}\n.x-spreadsheet-dimmer {\n  display: none;\n  position: absolute;\n  top: 0 !important;\n  left: 0 !important;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  vertical-align: middle;\n  background-color: rgba(0, 0, 0, 0.6);\n  opacity: 0;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-duration: 0.5s;\n  animation-duration: 0.5s;\n  transition: background-color 0.5s linear;\n  user-select: none;\n  z-index: 1000;\n}\n.x-spreadsheet-dimmer.active {\n  display: block;\n  opacity: 1;\n}\nform fieldset {\n  border: none;\n}\nform fieldset label {\n  display: block;\n  margin-bottom: 0.5em;\n  font-size: 1em;\n  color: #666;\n}\nform fieldset select {\n  font-size: 1.1em;\n  width: 100%;\n  background-color: #fff;\n  border: none;\n  border-bottom: 2px solid #ddd;\n  padding: 0.5em 0.85em;\n  border-radius: 2px;\n}\n.x-spreadsheet-modal,\n.x-spreadsheet-toast {\n  font-size: 13px;\n  position: fixed;\n  z-index: 1001;\n  text-align: left;\n  line-height: 1.25em;\n  min-width: 360px;\n  color: rgba(0, 0, 0, 0.87);\n  font-family: 'Lato', 'Source Sans Pro', Roboto, Helvetica, Arial, sans-serif;\n  border-radius: 4px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  background-clip: padding-box;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 8px;\n}\n.x-spreadsheet-toast {\n  background-color: rgba(255, 255, 255, 0.85);\n}\n.x-spreadsheet-modal-header,\n.x-spreadsheet-toast-header {\n  font-weight: 600;\n  background-clip: padding-box;\n  background-color: rgba(255, 255, 255, 0.85);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  border-radius: 4px 4px 0 0;\n}\n.x-spreadsheet-modal-header .x-spreadsheet-icon,\n.x-spreadsheet-toast-header .x-spreadsheet-icon {\n  position: absolute;\n  right: 0.8em;\n  top: 0.65em;\n  border-radius: 18px;\n}\n.x-spreadsheet-modal-header .x-spreadsheet-icon:hover,\n.x-spreadsheet-toast-header .x-spreadsheet-icon:hover {\n  opacity: 1;\n  background: rgba(0, 0, 0, 0.08);\n}\n.x-spreadsheet-toast-header {\n  color: #F2711C;\n}\n.x-spreadsheet-modal-header {\n  border-bottom: 1px solid #e0e2e4;\n  background: rgba(0, 0, 0, 0.08);\n  font-size: 1.0785em;\n}\n.x-spreadsheet-modal-header,\n.x-spreadsheet-modal-content,\n.x-spreadsheet-toast-header,\n.x-spreadsheet-toast-content {\n  padding: 0.75em 1em;\n}\n@media screen and (min-width: 320px) and (max-width: 480px) {\n  .x-spreadsheet-toolbar {\n    display: none;\n  }\n}\n.x-spreadsheet-icon {\n  width: 18px;\n  height: 18px;\n  margin: 1px 1px 2px 1px;\n  text-align: center;\n  vertical-align: middle;\n  user-select: none;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n  line-height: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img {\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");\n  position: absolute;\n  width: 262px;\n  height: 444px;\n  opacity: 0.56;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.undo {\n  left: 0;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.redo {\n  left: -18px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.print {\n  left: -36px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.paintformat {\n  left: -54px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.clearformat {\n  left: -72px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.font-bold {\n  left: -90px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.font-italic {\n  left: -108px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.underline {\n  left: -126px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.strike {\n  left: -144px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.color {\n  left: -162px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.bgcolor {\n  left: -180px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.merge {\n  left: -198px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-left {\n  left: -216px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-center {\n  left: -234px;\n  top: 0;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-right {\n  left: 0;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-top {\n  left: -18px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-middle {\n  left: -36px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.align-bottom {\n  left: -54px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.textwrap {\n  left: -72px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.autofilter {\n  left: -90px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.formula {\n  left: -108px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.arrow-down {\n  left: -126px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.arrow-right {\n  left: -144px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.link {\n  left: -162px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chart {\n  left: -180px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.freeze {\n  left: -198px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.ellipsis {\n  left: -216px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.add {\n  left: -234px;\n  top: -18px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-all {\n  left: 0;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-inside {\n  left: -18px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-horizontal {\n  left: -36px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-vertical {\n  left: -54px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-outside {\n  left: -72px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-left {\n  left: -90px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-top {\n  left: -108px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-right {\n  left: -126px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-bottom {\n  left: -144px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.border-none {\n  left: -162px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.line-color {\n  left: -180px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.line-type {\n  left: -198px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.close {\n  left: -234px;\n  top: -36px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chevron-down {\n  left: 0;\n  top: -54px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chevron-up {\n  left: -18px;\n  top: -54px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chevron-left {\n  left: -36px;\n  top: -54px;\n}\n.x-spreadsheet-icon .x-spreadsheet-icon-img.chevron-right {\n  left: -54px;\n  top: -54px;\n}\n", "",{"version":3,"sources":["webpack://./src/index.less"],"names":[],"mappings":"AAuDA;EACE,SAAA;AAtDF;AAFC;EA4DC,eAAA;EACA,mBAAA;EACA,iBAAA;EACA,sBAAA;EACA,4EAAA;EACA,uBAAA;EACA,gBAAA;EACA,mCAAA;AAvDF;AAZC;EAsEG,8EAAA;AAvDJ;AAfC;EA2EC,kBAAA;EACA,gBAAA;AAzDF;AAnBC;EAiFC,sBAAA;AA3DF;AAtBC;EAqFC,oBAAA;EACA,kBAAA;EACA,iBAAA;EACA,WAAA;EACA,kBAAA;EACA,mBAAA;EACA,eAAA;EACA,YAAA;AA5DF;AA8DE;EACE,oBAAA;EACA,kBAAA;EACA,qBAAA;EACA,SAAA;EACA,WAAA;EACA,UAAA;EACA,WAAA;EACA,mBAAA;EACA,gCAAA;EACA,wBAAA;EACA,UAAA;EACA,+CAAA;AA5DJ;AA9CC;EA+GC,YAAA;AA9DF;AAjDC;EAkHG,SAAA;EACA,UAAA;EACA,yBAAA;EACA,iBAAA;EACA,gBAAA;AA9DJ;AAxDC;EAyHK,SAAA;EACA,eAAA;EACA,6BAAA;AA9DN;AAgEM;EACE,kBAAA;AA9DR;AAhEC;EAkIO,WAAA;EACA,YAAA;AA/DR;AApEC;EA0IC,YAAA;AAnEF;AAvEC;EA6IG,SAAA;EACA,UAAA;EACA,yBAAA;EACA,iBAAA;EACA,gBAAA;EACA,mBAAA;AAnEJ;AA/EC;EAqJK,SAAA;AAnEN;AAlFC;EA0JG,4BAAA;EACA,kBAAA;AArEJ;AAtFC;EA8JK,WAAA;EACA,YAAA;EACA,eAAA;EACA,kBAAA;AArEN;AA5FC;EAoKO,YAAA;AArER;AAwEM;EACE,sBAAA;AAtER;AAlGC;EA8KG,iBAAA;AAzEJ;AArGC;EAiLK,aAAA;EACA,kBAAA;AAzEN;AAzGC;EAsLK,kBAAA;EACA,OAAA;EACA,SAAA;AA1EN;AA9GC;EAgMC,kBAAA;AA/EF;AAjHC;EAmMG,kBAAA;EACA,YAAA;EACA,gBAAA;EACA,kDAAA;AA/EJ;AAkFE;EAEI,qBAAA;EACA,OAAA;AAjFN;AAqFE;EAEI,qBAAA;EACA,QAAA;AApFN;AAwFE;EAEI,wBAAA;EACA,OAAA;AAvFN;AA2FE;EAEI,wBAAA;EACA,QAAA;AA1FN;AAvIC;EAuOG,cAAA;EACA,qBAAA;AA7FJ;AA3IC;EA6OK,gBAAA;AA/FN;AA9IC;EAgPK,WAAA;EACA,iBAAA;AA/FN;AAlJC;EAmPO,YAAA;AA9FR;AACA,aAAa;AAtJZ;EA0PC,kBAAA;EACA,WAAA;AAjGF;AA1JC;EA8PG,0CAAA;AAjGJ;AA7JC;EAiQG,kBAAA;AAjGJ;AAoGE;EACE,kBAAA;AAlGJ;AAiGE;EAGI,iCAAA;EACA,OAAA;EACA,SAAA;AAjGN;AAoGE;EACE,kBAAA;AAlGJ;AAiGE;EAGI,gCAAA;EACA,MAAA;EACA,QAAA;AAjGN;AACA,cAAc;AAjLb;EAuRC,kBAAA;EACA,SAAA;EACA,QAAA;EACA,yBAAA;EACA,YAAA;EACA,WAAA;AAnGF;AAoGE;EACE,WAAA;EACA,kBAAA;EACA,kBAAA;AAlGJ;AA+FE;EAKI,WAAA;EACA,gBAAA;AAjGN;AAoGE;EACE,YAAA;EACA,kBAAA;EACA,kBAAA;AAlGJ;AA+FE;EAKI,UAAA;EACA,gBAAA;AAjGN;AACA,4BAA4B;AA5M3B;EAsTC,kBAAA;EACA,OAAA;EACA,MAAA;EACA,WAAA;AAvGF;AAlNC;EA2TG,kBAAA;EACA,gBAAA;EACA,oBAAA;EACA,WAAA;EACA,YAAA;AAtGJ;AAzNC;;EAoUC,uBAAA;EACA,kBAAA;EACA,gBAAA;EACA,oBAAA;EACA,MAAA;EACA,OAAA;EACA,WAAA;EACA,YAAA;AAvGF;AACA,2BAA2B;AArO1B;EAiVG,kBAAA;EACA,UAAA;AAzGJ;AAzOC;EAoVK,UAAA;EACA,QAAA;EACA,sBAAA;AAxGN;AA9OC;EA0VG,kBAAA;EACA,yBAAA;EACA,mCAAA;EACA,UAAA;AAzGJ;AApPC;;EAgWG,kBAAA;EACA,uBAAA;EACA,YAAA;AAxGJ;AA1PC;EAqWG,0BAAA;AAxGJ;AA7PC;EAwWG,sCAAA;AAxGJ;AAhQC;EA2WG,oBAAA;EACA,kBAAA;EACA,iBAAA;EACA,YAAA;EACA,WAAA;EACA,UAAA;EACA,WAAA;EACA,YAAA;EACA,yBAAA;EACA,mBAAA;AAxGJ;AA5QC;EAwXC,WAAA;AAzGF;AA/QC;EA0XG,kBAAA;EACA,gBAAA;EACA,yBAAA;EACA,cAAA;EACA,YAAA;EACA,oBAAA;AAxGJ;AAvRC;EAkYK,uBAAA;EACA,YAAA;EACA,cAAA;EACA,aAAA;EACA,YAAA;EACA,iBAAA;EACA,kBAAA;EACA,8EAAA;EACA,cAAA;EACA,mBAAA;EACA,qBAAA;EACA,iBAAA;EACA,SAAA;AAxGN;AAtSC;EAkZK,gBAAA;EACA,kBAAA;EACA,eAAA;EACA,MAAA;EACA,OAAA;AAzGN;AA7SC;EA4ZC,iBAAA;EACA,aAAA;EACA,6BAAA;EACA,aAAA;EACA,YAAA;EACA,yBAAA;EACA,iBAAA;EACA,gBAAA;EACA,iBAAA;EACA,eAAA;EACA,gBAAA;EACA,gBAAA;AA5GF;AA8GE;EACE,oBAAA;EACA,YAAA;AA5GJ;AA+GE;;EACE,+BAAA;AA5GJ;AAmHE;EACE,SAAA;EACA,UAAA;EACA,aAAA;EACA,YAAA;EACA,2CAAA;AAjHJ;AA1UC;EA+bG,YAAA;EACA,aAAA;EACA,cAAA;AAlHJ;AA0HE;;EACE,4BAAA;EACA,kBAAA;AAvHJ;AAyHI;;EACE,WAAA;EACA,kBAAA;EACA,WAAA;EACA,YAAA;EACA,UAAA;EACA,oBAAA;EACA,+BAAA;EAEA,kBAAA;AAvHN;AA0HE;;EACE,mBAAA;AAvHJ;AAnWC;EAgfC,kBAAA;EACA,qBAAA;EACA,2BAAA;EACA,UAAA;EACA,wBAAA;EACA,kBAAA;EACA,eAAA;EACA,gBAAA;AA1IF;AA7WC;EAyfG,kBAAA;EACA,MAAA;EACA,OAAA;EACA,oBAAA;EACA,UAAA;EACA,WAAA;AAzIJ;AArXC;;;EAqgBC,kBAAA;EACA,kDAAA;EACA,gBAAA;EACA,YAAA;EACA,YAAA;EACA,oBAAA;EACA,cAAA;AA3IF;AAhYC;EA+gBC,YAAA;AA5IF;AAnYC;EAmhBC,yBAAA;EACA,eAAA;EACA,YAAA;AA7IF;AAxYC;EAwhBG,qBAAA;EACA,mBAAA;EACA,gCAAA;EACA,kCAAA;AA7IJ;AA9YC;EA8hBG,aAAA;EACA,gBAAA;AA7IJ;AAlZC;EAkiBK,YAAA;EACA,iBAAA;AA7IN;AAtZC;EA0iBG,YAAA;AAjJJ;AAzZC;;EA+iBC,YAAA;EACA,eAAA;EACA,gBAAA;EACA,mBAAA;EACA,aAAA;AAlJF;AAjaC;EAujBC,kBAAA;EACA,6BAAA;AAnJF;AAraC;EA2jBG,iBAAA;EACA,YAAA;EACA,cAAA;EACA,iBAAA;EACA,sBAAA;EACA,+BAAA;AAnJJ;AA7aC;EAqkBC,gBAAA;EACA,SAAA;EACA,UAAA;EACA,iBAAA;AArJF;AAnbC;EA2kBC,WAAA;EACA,mBAAA;EACA,oBAAA;EACA,SAAA;EACA,sBAAA;EACA,gBAAA;EACA,gBAAA;EACA,cAAA;EACA,mBAAA;EACA,eAAA;EACA,oBAAA;EACA,iBAAA;AArJF;AAuJE;EACE,sBAAA;EACA,0BAAA;AArJJ;AArcC;EA8lBG,aAAA;AAtJJ;AAyJM;EACE,aAAA;AAvJR;AA3cC;EAwmBG,qBAAA;AA1JJ;AA9cC;EA6mBC,gCAAA;AA5JF;AAjdC;EAgnBG,oBAAA;AA5JJ;AApdC;EAonBG,kBAAA;EACA,gBAAA;AA7JJ;AAxdC;EAunBK,aAAA;AA5JN;AA3dC;EA4nBG,cAAA;EACA,qBAAA;EACA,6BAAA;EACA,YAAA;EACA,iBAAA;EACA,eAAA;EACA,iBAAA;EACA,UAAA;EACA,kBAAA;EACA,kBAAA;AA9JJ;AAgKI;EACE,oBAAA;EACA,YAAA;AA9JN;AAiKI;;EACE,+BAAA;AA9JN;AA/eC;EAmpBC,qBAAA;EACA,+BAAA;EACA,QAAA;EACA,sBAAA;EACA,YAAA;EACA,kBAAA;AAjKF;AAvfC;EA4pBC,kBAAA;EACA,OAAA;EACA,MAAA;EACA,YAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,sBAAA;AAlKF;AAjgBC;EAsqBC,mBAAA;EACA,YAAA;EACA,iBAAA;EACA,eAAA;AAlKF;AAvgBC;EA4qBG,WAAA;EACA,iBAAA;EACA,gBAAA;EACA,WAAA;AAlKJ;AA7gBC;EAmrBG,YAAA;EACA,gBAAA;AAnKJ;AAjhBC;EAwrBC,aAAA;EACA,UAAA;EACA,mBAAA;EACA,mBAAA;EACA,yBAAA;AApKF;AAxhBC;EA+rBG,eAAA;EACA,YAAA;EACA,2BAAA;EACA,gBAAA;AApKJ;AA9hBC;EAssBG,UAAA;EACA,gBAAA;EACA,kBAAA;EACA,YAAA;AArKJ;AApiBC;EA+sBC,iBAAA;AAxKF;AAviBC;EAktBC,gBAAA;EACA,YAAA;EACA,uBAAA;EACA,wBAAA;EACA,kHAAA;AAxKF;AA9iBC;EA0tBC,0BAAA;EACA,mBAAA;EACA,iBAAA;AAzKF;AAnjBC;EA+tBG,gBAAA;EACA,iBAAA;EACA,kBAAA;EACA,WAAA;EACA,WAAA;EACA,mBAAA;AAzKJ;AA3jBC;EAuuBK,iBAAA;EACA,WAAA;AAzKN;AA/jBC;EA4uBK,YAAA;AA1KN;AAlkBC;EA+uBO,cAAA;EACA,iBAAA;EACA,kBAAA;AA1KR;AAvkBC;EAovBO,+BAAA;AA1KR;AA1kBC;EA0vBG,yBAAA;EACA,iBAAA;AA7KJ;AA9kBC;;EA8vBK,mBAAA;EACA,eAAA;EACA,kBAAA;EACA,gBAAA;EACA,iBAAA;EACA,UAAA;AA5KN;AAkLM;EACE,mBAAA;AAhLR;AAmLM;;EACE,mBAAA;EACA,cAAA;AAhLR;AAmLM;EACE,oBAAA;EACA,YAAA;AAjLR;AAnmBC;EA2xBC,0CAAA;EACA,kBAAA;EACA,OAAA;EACA,qBAAA;EACA,WAAA;EACA,WAAA;AArLF;AA3mBC;EAoyBC,aAAA;EACA,yBAAA;AAtLF;AA/mBC;EAwyBG,gBAAA;AAtLJ;AAlnBC;EA4yBC,qBAAA;EACA,kBAAA;EACA,gBAAA;EACA,eAAA;EACA,mBAAA;EACA,kBAAA;EACA,eAAA;EACA,cAAA;EACA,gBAAA;EACA,mBAAA;EACA,yBAAA;EACA,mBAAA;EACA,qBAAA;EACA,wEAAA;EAGA,aAAA;EACA,wBAAA;EACA,OAAA;EACA,iBAAA;EACA,2BAAA;AAzLF;AA2LE;;EACE,yBAAA;EACA,yBAAA;AAxLJ;AA2LE;EAxxBA,WAAA;EACA,yBAAA;AAgmBF;AA/lBE;;EACE,WAAA;EACA,yBAAA;AAkmBJ;AArpBC;EA80BC,cAAA;EACA,kBAAA;EACA,gBAAA;EACA,oBAAA;EACA,0BAAA;AAtLF;AA5pBC;EAq1BG,UAAA;EACA,SAAA;EACA,eAAA;EACA,cAAA;EACA,UAAA;EACA,mDAAA;EACA,gBAAA;EACA,iBAAA;EACA,YAAA;EACA,cAAA;EACA,gBAAA;EACA,yBAAA;EACA,kBAAA;EACA,wDAAA;EACA,iDAAA;AAtLJ;AAwLI;EACE,qBAAA;EACA,mDAAA;AAtLN;AAjrBC;EA62BC,kBAAA;EACA,qBAAA;EACA,gBAAA;EACA,yBAAA;EACA,kBAAA;EACA,eAAA;EACA,0BAAA;EACA,iBAAA;EACA,iDAAA;AAzLF;AA5rBC;EAw3BG,uBAAA;EACA,mBAAA;EACA,eAAA;EACA,WAAA;EACA,YAAA;EACA,iBAAA;EACA,cAAA;AAzLJ;AArsBC;EAk4BC,aAAA;EACA,mBAAA;EACA,eAAA;AA1LF;AA1sBC;EAu4BG,cAAA;AA1LJ;AA7sBC;EAy4BK,qBAAA;EACA,kBAAA;AAzLN;AAjtBC;EA+4BC,cAAA;EACA,sBAAA;EACA,iBAAA;EACA,mBAAA;AA3LF;AA6LE;EACE,cAAA;AA3LJ;AA8LE;;EAEI,qBAAA;AA5LN;AA9tBC;EA+5BG,cAAA;EACA,gBAAA;AA9LJ;AAluBC;EAq6BC,aAAA;EACA,kBAAA;EACA,iBAAA;EACA,kBAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,sBAAA;EACA,oCAAA;EACA,UAAA;EACA,iCAAA;EACA,yBAAA;EACA,gCAAA;EACA,wBAAA;EACA,wCAAA;EACA,iBAAA;EACA,aAAA;AAhMF;AAkME;EACE,cAAA;EACA,UAAA;AAhMJ;AAoMA;EACE,YAAA;AAlMF;AAiMA;EAII,cAAA;EACA,oBAAA;EACA,cAAA;EACA,WAAA;AAlMJ;AA2LA;EAWI,gBAAA;EACA,WAAA;EACA,sBAAA;EACA,YAAA;EACA,6BAAA;EACA,qBAAA;EACA,kBAAA;AAnMJ;AA3wBC;;EAm9BC,eAAA;EACA,eAAA;EACA,aAAA;EACA,gBAAA;EACA,mBAAA;EACA,gBAAA;EACA,0BAAA;EACA,4EAAA;EACA,kBAAA;EACA,oCAAA;EACA,sBAAA;EACA,4BAAA;EACA,0CAAA;AApMF;AA3xBC;EAm+BC,2CAAA;AArMF;AA9xBC;;EAu+BC,gBAAA;EACA,4BAAA;EACA,2CAAA;EACA,4CAAA;EACA,0BAAA;AArMF;AAtyBC;;EA8+BG,kBAAA;EACA,YAAA;EACA,WAAA;EACA,mBAAA;AApMJ;AAsMI;;EACE,UAAA;EACA,+BAAA;AAnMN;AAlzBC;EA2/BC,cAAA;AAtMF;AArzBC;EA+/BC,gCAAA;EACA,+BAAA;EACA,mBAAA;AAvMF;AA1zBC;;;;EAwgCC,mBAAA;AAxMF;AA2MA;EA3gCC;IA6gCG,aAAA;EAzMF;AACF;AAr0BC;EAkhCC,WAAA;EACA,YAAA;EACA,uBAAA;EACA,kBAAA;EACA,sBAAA;EACA,iBAAA;EACA,gBAAA;EACA,kBAAA;EACA,qBAAA;EACA,cAAA;AA1MF;AAj1BC;EA8hCG,yDAAA;EACA,kBAAA;EACA,YAAA;EACA,aAAA;EACA,aAAA;AA1MJ;AA4MI;EACE,OAAA;EACA,MAAA;AA1MN;AA4MI;EACE,WAAA;EACA,MAAA;AA1MN;AA4MI;EACE,WAAA;EACA,MAAA;AA1MN;AA4MI;EACE,WAAA;EACA,MAAA;AA1MN;AA4MI;EACE,WAAA;EACA,MAAA;AA1MN;AA4MI;EACE,WAAA;EACA,MAAA;AA1MN;AA4MI;EACE,YAAA;EACA,MAAA;AA1MN;AA4MI;EACE,YAAA;EACA,MAAA;AA1MN;AA4MI;EACE,YAAA;EACA,MAAA;AA1MN;AA4MI;EACE,YAAA;EACA,MAAA;AA1MN;AA4MI;EACE,YAAA;EACA,MAAA;AA1MN;AA4MI;EACE,YAAA;EACA,MAAA;AA1MN;AA4MI;EACE,YAAA;EACA,MAAA;AA1MN;AA4MI;EACE,YAAA;EACA,MAAA;AA1MN;AA4MI;EACE,OAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,OAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,YAAA;EACA,UAAA;AA1MN;AA4MI;EACE,OAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN;AA4MI;EACE,WAAA;EACA,UAAA;AA1MN","sourcesContent":["@css-prefix: x-spreadsheet;\n// color\n@red-color: #DB2828;\n@red-hover-color: #d01919;\n@orange-color: #F2711C;\n@orange-hover-color: #f26202;\n@yellow-color: #FBBD08;\n@yellow-hover-color: #eaae00;\n@olive-color: #B5CC18;\n@olive-hover-color: #a7bd0d;\n@green-color: #21BA45;\n@green-hover-color: #16ab39;\n@teal-color: #00B5AD;\n@teal-hover-color: #009c95;\n@blue-color: #2185D0;\n@blue-hover-color: #1678c2;\n@violet-color: #6435C9;\n@violet-hover-color: #5829bb;\n@purple-color: #A333C8;\n@purple-hover-color: #9627ba;\n@pink-color: #E03997;\n@pink-hover-color: #e61a8d;\n@brown-color: #A5673F;\n@brown-hover-color: #975b33;\n@grey-color: #767676;\n@grey-hover-color: #838383;\n@dark-color: #343a40;\n@dark-hover-color: darken(@dark-color, 10%);\n@black-color: #1B1C1D;\n@black-hover-color: #27292a;\n\n// base\n@border-style: 1px solid #e0e2e4;\n@icon-size: 18px;\n@line-height: 1.25em;\n@border-color: #e9e9e9;\n@border: 1px solid @border-color;\n@input-border: @border;\n@input-padding: 0.5em 0.75em;\n@input-box-shadow: inset 0 1px 2px hsla(0,0%,4%,.06);\n@border-radius: 2px;\n@form-field-height: 30px;\n@primary-color: @blue-color;\n@primary-hover-color: @blue-hover-color;\n\n// method\n.type-primary() {\n  color: #fff;\n  background-color: @primary-color;\n  &:hover, &.active {\n    color: #fff;\n    background-color: @primary-hover-color;\n  }\n}\n\nbody {\n  margin: 0;\n}\n\n.@{css-prefix} {\n  font-size: 13px;\n  line-height: normal;\n  user-select: none;\n  -moz-user-select: none;\n  font-family: 'Lato', 'Source Sans Pro', Roboto, Helvetica, Arial, sans-serif;\n  box-sizing: content-box;\n  background: #fff;\n  -webkit-font-smoothing: antialiased;\n\n  textarea {\n    font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n  }\n}\n\n.@{css-prefix}-sheet {\n  position: relative;\n  overflow: hidden;\n}\n\n.@{css-prefix}-table {\n  // html5 bottom margin bug\n  vertical-align: bottom;\n}\n\n.@{css-prefix}-tooltip {\n  font-family: inherit;\n  position: absolute;\n  padding: 5px 10px;\n  color: #fff;\n  border-radius: 1px;\n  background: rgba(0, 0, 0, 1);\n  font-size: 12px;\n  z-index: 201;\n\n  &:before {\n    pointer-events: none;\n    position: absolute;\n    left: calc(50% - 4px);\n    top: -4px;\n    content: \"\";\n    width: 8px;\n    height: 8px;\n    background: inherit;\n    -webkit-transform: rotate(45deg);\n    transform: rotate(45deg);\n    z-index: 1;\n    box-shadow: 1px 1px 3px -1px rgba(0, 0, 0, .3);\n  }\n}\n\n.@{css-prefix}-color-palette {\n  padding: 5px;\n\n  table {\n    margin: 0;\n    padding: 0;\n    border-collapse: separate;\n    border-spacing: 2;\n    background: #fff;\n\n    td {\n      margin: 0;\n      cursor: pointer;\n      border: 1px solid transparent;\n\n      &:hover {\n        border-color: #ddd;\n      }\n\n      .@{css-prefix}-color-palette-cell {\n        width: 16px;\n        height: 16px;\n      }\n    }\n  }\n}\n\n.@{css-prefix}-border-palette {\n  padding: 6px;\n\n  table {\n    margin: 0;\n    padding: 0;\n    border-collapse: separate;\n    border-spacing: 0;\n    background: #fff;\n    table-layout: fixed;\n\n    td {\n      margin: 0;\n    }\n  }\n\n  .@{css-prefix}-border-palette-left {\n    border-right: 1px solid #eee;\n    padding-right: 6px;\n\n    .@{css-prefix}-border-palette-cell {\n      width: 30px;\n      height: 30px;\n      cursor: pointer;\n      text-align: center;\n\n      .@{css-prefix}-icon-img {\n        opacity: .8;\n      }\n\n      &:hover {\n        background-color: #eee;\n      }\n    }\n  }\n\n  .@{css-prefix}-border-palette-right {\n    padding-left: 6px;\n\n    .@{css-prefix}-toolbar-btn {\n      margin-top: 0;\n      margin-bottom: 3px;\n    }\n\n    .@{css-prefix}-line-type {\n      position: relative;\n      left: 0;\n      top: -3px;\n    }\n\n  }\n\n}\n\n.@{css-prefix}-dropdown {\n  position: relative;\n\n  .@{css-prefix}-dropdown-content {\n    position: absolute;\n    z-index: 200;\n    background: #fff;\n    box-shadow: 1px 2px 5px 2px rgba(51,51,51,.15);\n  }\n\n  &.bottom-left {\n    .@{css-prefix}-dropdown-content {\n      top: calc(~'100% + 5px');\n      left: 0;\n    }\n  }\n\n  &.bottom-right {\n    .@{css-prefix}-dropdown-content {\n      top: calc(~'100% + 5px');\n      right: 0;\n    }\n  }\n\n  &.top-left {\n    .@{css-prefix}-dropdown-content {\n      bottom: calc(~'100% + 5px');\n      left: 0;\n    }\n  }\n\n  &.top-right {\n    .@{css-prefix}-dropdown-content {\n      bottom: calc(~'100% + 5px');\n      right: 0;\n    }\n  }\n\n\n  .@{css-prefix}-dropdown-title {\n    padding: 0 5px;\n    display: inline-block;\n  }\n\n  .@{css-prefix}-dropdown-header {\n    .@{css-prefix}-icon.arrow-left {\n      margin-left: 4px;\n    }\n    .@{css-prefix}-icon.arrow-right {\n      width: 10px;\n      margin-right: 4px;\n      .arrow-down {\n        left: -130px;\n      }\n    }\n  }\n}\n/* resizer **/\n.@{css-prefix}-resizer {\n  position: absolute;\n  z-index: 11;\n\n  .@{css-prefix}-resizer-hover {\n    background-color: rgba(75, 137, 255, .25);\n  }\n  .@{css-prefix}-resizer-line {\n    position: absolute;\n  }\n\n  &.horizontal {\n    cursor: row-resize;\n    .@{css-prefix}-resizer-line {\n      border-bottom: 2px dashed rgb(75, 137, 255);\n      left: 0;\n      bottom: 0;\n    }\n  }\n  &.vertical {\n    cursor: col-resize;\n    .@{css-prefix}-resizer-line {\n      border-right: 2px dashed rgb(75, 137, 255);\n      top: 0;\n      right: 0;\n    }\n  }\n}\n/* scrollbar */\n.@{css-prefix}-scrollbar {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  background-color: #f4f5f8;\n  opacity: 0.9;\n  z-index: 12;\n  &.horizontal {\n    right: 15px;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    > div {\n      height: 1px;\n      background: #ddd;\n    }\n  }\n  &.vertical {\n    bottom: 15px;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    > div {\n      width: 1px;\n      background: #ddd;\n    }\n  }\n  &:hover {\n    // opacity: .85;\n  }\n}\n\n/* @{css-prefix}-overlayer */\n.@{css-prefix}-overlayer {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 10;\n  .@{css-prefix}-overlayer-content {\n    position: absolute;\n    overflow: hidden;\n    pointer-events: none;\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.@{css-prefix}-editor, .@{css-prefix}-selector {\n  box-sizing: content-box;\n  position: absolute;\n  overflow: hidden;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n/* @{css-prefix}-selector */\n.@{css-prefix}-selector {\n  .hide-input {\n    position: absolute;\n    z-index: 0;\n    input {\n      padding: 0;\n      width: 0;\n      border: none!important;\n    }\n  }\n  .@{css-prefix}-selector-area {\n    position: absolute;\n    border: 2px solid rgb(75, 137, 255);\n    background: rgba(75, 137, 255, .1);\n    z-index: 5;\n  }\n  .@{css-prefix}-selector-clipboard, .@{css-prefix}-selector-autofill {\n    position: absolute;\n    background: transparent;\n    z-index: 100;\n  }\n  .@{css-prefix}-selector-clipboard {\n    border: 2px dashed rgb(75, 137, 255);\n  }\n  .@{css-prefix}-selector-autofill {\n    border: 1px dashed rgba(0, 0, 0, .45); // #606060; // rgba(0, 0, 0, .2);\n  }\n  .@{css-prefix}-selector-corner {\n    pointer-events: auto;\n    position: absolute;\n    cursor: crosshair;\n    font-size: 0;\n    height: 5px;\n    width: 5px;\n    right: -5px;\n    bottom: -5px;\n    border: 2px solid rgb(255, 255, 255);\n    background: rgb(75, 137, 255);\n  }\n}\n.@{css-prefix}-editor {\n  z-index: 20;\n  .@{css-prefix}-editor-area {\n    position: absolute;\n    text-align: left;\n    border: 2px solid rgb(75, 137, 255);\n    line-height: 0;\n    z-index: 100;\n    pointer-events: auto;\n\n    textarea {\n      box-sizing: content-box;\n      border: none;\n      padding: 0 3px;\n      outline: none;\n      resize: none;\n      text-align: start;\n      overflow-y: hidden;\n      font: 400 13px Arial, 'Lato', 'Source Sans Pro', Roboto, Helvetica, sans-serif;\n      color: inherit;\n      white-space: normal;\n      word-wrap: break-word;\n      line-height: 22px;\n      margin: 0;\n    }\n\n    .textline {\n      overflow: hidden;\n      visibility: hidden;\n      position: fixed;\n      top: 0;\n      left: 0;\n    }\n  }\n}\n\n.@{css-prefix}-item {\n  user-select: none;\n  background: 0;\n  border: 1px solid transparent;\n  outline: none;\n  height: 26px;\n  color: rgba(0, 0, 0, .9);\n  line-height: 26px;\n  list-style: none;\n  padding: 2px 10px;\n  cursor: default;\n  text-align: left;\n  overflow: hidden;\n\n  &.disabled {\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n  &:hover, &.active {\n    background: rgba(0, 0, 0, .05);\n  }\n\n  // &.active {\n    ////   background: #89aef53d;\n  // }\n\n  &.divider {\n    height: 0;\n    padding: 0;\n    margin: 5px 0;\n    border: none;\n    border-bottom: 1px solid rgba(0, 0, 0, .1);\n  }\n\n  .label {\n    float: right;\n    opacity: .65;\n    font-size: 1em;\n  }\n}\n\n.x-spreadsheet-item,\n.x-spreadsheet-header,\n{\n\n  &.state {\n    padding-left: 35px!important;\n    position: relative;\n\n    &:before {\n      content: '';\n      position: absolute;\n      width: 10px;\n      height: 10px;\n      left: 12px;\n      top: calc(50% - 5px);\n      background: rgba(0, 0, 0, 0.08);\n      // border: 1px solid rgba(0, 0, 0, 0.1);\n      border-radius: 2px;\n    }\n  }\n  &.state.checked:before {\n    background: #4b89ff;\n    // content: '';\n    // position: absolute;\n    // width: 5px;\n    // height: 12px;\n    // color: #4b89ff; // #353A41;\n    // border-left: none;\n    // border-top: none;\n    // border-bottom: 2px solid;\n    // border-right: 2px solid;\n    // left: 15px;\n    // top: 6px;\n    // background: none;\n    // border-radius: 0;\n    // transform-origin: center;\n    // transform: rotate(45deg);\n    // -webkit-transform: rotate(45deg);\n  }\n\n}\n\n.@{css-prefix}-checkbox {\n  position: relative;\n  display: inline-block;\n  backface-visibility: hidden;\n  outline: 0;\n  vertical-align: baseline;\n  font-style: normal;\n  font-size: 1rem;\n  line-height: 1em;\n  > input {\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0!important;\n    outline: 0;\n    z-index: -1;\n  }\n}\n\n.@{css-prefix}-suggest,\n.@{css-prefix}-contextmenu,\n.@{css-prefix}-sort-filter {\n  position: absolute;\n  box-shadow: 1px 2px 5px 2px rgba(51, 51, 51, 0.15);\n  background: #fff;\n  z-index: 100;\n  width: 260px;\n  pointer-events: auto;\n  overflow: auto;\n}\n\n.@{css-prefix}-suggest {\n  width: 200px;\n}\n\n.@{css-prefix}-filter {\n  border: 1px solid #e9e9e9;\n  font-size: 12px;\n  margin: 10px;\n\n  .@{css-prefix}-header {\n    padding: .5em .75em;\n    background: #f8f8f9;\n    border-bottom: 1px solid #e9e9e9;\n    border-left: 1px solid transparent;\n  }\n  .@{css-prefix}-body {\n    height: 200px;\n    overflow-y: auto;\n\n    .@{css-prefix}-item {\n      height: 20px;\n      line-height: 20px;\n    }\n  }\n}\n\n.@{css-prefix}-sort-filter {\n  .@{css-prefix}-buttons {\n    margin: 10px;\n  }\n}\n\n.@{css-prefix}-toolbar, .@{css-prefix}-bottombar {\n  height: 40px;\n  padding: 0 30px;\n  text-align: left;\n  background: #f5f6f7;\n  display: flex;\n}\n\n.@{css-prefix}-bottombar {\n  position: relative;\n  border-top: 1px solid #e0e2e4;\n\n  .@{css-prefix}-menu > li {\n    line-height: 40px;\n    height: 40px;\n    padding-top: 0;\n    padding-bottom: 0;\n    vertical-align: middle;\n    border-right: 1px solid #e8eaed;\n  }\n}\n\n.@{css-prefix}-menu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  user-select: none;\n}\n.@{css-prefix}-menu > li {\n  float: left;\n  line-height: 1.25em;\n  padding: .785em 1em;\n  margin: 0;\n  vertical-align: middle;\n  text-align: left;\n  font-weight: 400;\n  color: #80868b;\n  white-space: nowrap;\n  cursor: pointer;\n  transition: all .3s;\n  font-weight: bold;\n\n  &.active {\n    background-color: #fff;\n    color: rgba(0, 0, 0, .65);\n  }\n\n  .@{css-prefix}-icon {\n    margin: 0 6px;\n\n    .@{css-prefix}-icon-img {\n      &:hover {\n        opacity: .85;\n      }\n    }\n  }\n\n  .@{css-prefix}-dropdown {\n    display: inline-block;\n  }\n}\n\n.@{css-prefix}-toolbar {\n  border-bottom: 1px solid #e0e2e4;\n\n  .@{css-prefix}-toolbar-btns {\n    display: inline-flex;\n  }\n\n  .@{css-prefix}-toolbar-more {\n    padding: 0 6px 6px;\n    text-align: left;\n    .@{css-prefix}-toolbar-divider {\n      margin-top: 0;\n    }\n  }\n\n  .@{css-prefix}-toolbar-btn {\n    flex: 0 0 auto;\n    display: inline-block;\n    border: 1px solid transparent;\n    height: 26px;\n    line-height: 26px;\n    min-width: 26px;\n    margin: 6px 1px 0;\n    padding: 0;\n    text-align: center;\n    border-radius: 2px;\n\n    &.disabled {\n      pointer-events: none;\n      opacity: 0.5;\n    }\n\n    &:hover, &.active {\n      background: rgba(0, 0, 0, .08);\n    }\n  }\n}\n\n.@{css-prefix}-toolbar-divider {\n  display: inline-block;\n  border-right: 1px solid #e0e2e4;\n  width: 0;\n  vertical-align: middle;\n  height: 18px;\n  margin: 12px 3px 0;\n}\n\n.@{css-prefix}-print {\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 100;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.@{css-prefix}-print-bar {\n  background: #424242;\n  height: 60px;\n  line-height: 60px;\n  padding: 0 30px;\n\n  .-title {\n    color: #fff;\n    font-weight: bold;\n    font-size: 1.2em;\n    float: left;\n  }\n\n  .-right {\n    float: right;\n    margin-top: 12px;\n  }\n}\n.@{css-prefix}-print-content {\n  display: flex;\n  flex: auto;\n  flex-direction: row;\n  background: #d0d0d0;\n  height: calc(100% - 60px);\n\n  .-sider {\n    flex: 0 0 300px;\n    width: 300px;\n    border-left: 2px solid #ccc;\n    background: #fff;\n  }\n\n  .-content {\n    flex: auto;\n    overflow-x: auto;\n    overflow-y: scroll;\n    height: 100%;\n  }\n}\n\n\n.@{css-prefix}-canvas-card-wraper {\n  margin: 40px 20px;\n}\n.@{css-prefix}-canvas-card {\n  background: #fff;\n  margin: auto;\n  page-break-before: auto;\n  page-break-after: always;\n  box-shadow: 0 8px 10px 1px rgba(0,0,0,0.14), 0 3px 14px 3px rgba(0,0,0,0.12), 0 4px 5px 0 rgba(0,0,0,0.20);\n}\n\n.@{css-prefix}-calendar {\n  color: rgba(0,0,0,.65);\n  background: #ffffff;\n  user-select: none;\n\n  .calendar-header {\n    font-weight: 700;\n    line-height: 30px;\n    text-align: center;\n    width: 100%;\n    float: left;\n    background: #f9fafb;\n\n    .calendar-header-left {\n      padding-left: 5px;\n      float: left;\n    }\n\n    .calendar-header-right {\n      float: right;\n\n      a {\n        padding: 3px 0;\n        margin-right: 2px;\n        border-radius: 2px;\n      }\n      a:hover {\n        background: rgba(0,0,0,.08);\n      }\n    }\n  }\n\n  .calendar-body {\n    border-collapse: collapse;\n    border-spacing: 0;\n\n    th, td {\n      width: 100%/7;\n      min-width: 32px;\n      text-align: center;\n      font-weight: 700;\n      line-height: 30px;\n      padding: 0;\n    }\n\n    td > .cell {\n      // border: 1px solid rgba(0,0,0,.05);\n\n      &:hover {\n        background: #ecf6fd;\n      }\n\n      &.active, &.active:hover {\n        background: #ecf6fd;\n        color: #2185D0;\n      }\n\n      &.disabled {\n        pointer-events: none;\n        opacity: 0.5;\n      }\n    }\n  }\n}\n\n.@{css-prefix}-datepicker {\n  box-shadow: 2px 2px 5px rgba(0,0,0,.2);\n  position: absolute;\n  left: 0;\n  top: calc(100% + 5px);\n  z-index: 10;\n  width: auto;\n}\n\n.@{css-prefix}-buttons {\n  display: flex;\n  justify-content: flex-end;\n\n  .@{css-prefix}-button {\n    margin-left: 8px;\n  }\n}\n.@{css-prefix}-button {\n  display: inline-block;\n  border-radius: 3px;\n  line-height: 1em;\n  min-height: 1em;\n  white-space: nowrap;\n  text-align: center;\n  cursor: pointer;\n  font-size: 1em;\n  font-weight: 700;\n  padding: .75em 1em;\n  color: rgba(0,0,0,.6);\n  background: #E0E1E2;\n  text-decoration: none;\n  font-family: \"Lato\",\"proxima-nova\",\"Helvetica Neue\",Arial,sans-serif;\n  //box-shadow: 0px 1px 2px -1px rgba(255,255,255,0.5) inset, 0px -2px 0px 0px rgba(0,0,0,0.1) inset;\n  //box-shadow: 0 0 0 0 rgba(0,0,0,.5) inset;\n  outline: none;\n  vertical-align: baseline;\n  zoom: 1;\n  user-select: none;\n  transition: all 0.1s linear;\n\n  &.active, &:hover {\n    background-color: #C0C1C2;\n    color: rgba(0,0,0,.8);\n  }\n\n  &.primary {\n    .type-primary;\n  }\n}\n\n// form begin\n.@{css-prefix}-form-input {\n  font-size: 1em;\n  position: relative;\n  font-weight: 400;\n  display: inline-flex;\n  color: rgba(0,0,0,.87);\n\n  input {\n    z-index: 1;\n    margin: 0;\n    max-width: 100%;\n    flex: 1 0 auto;\n    outline: 0;\n    -webkit-tap-highlight-color: rgba(255,255,255,0);\n    text-align: left;\n    line-height: @form-field-height;\n    height: @form-field-height;\n    padding: 0 8px;\n    background: #fff;\n    border: 1px solid #e9e9e9;\n    border-radius: 3px;\n    transition: box-shadow .1s ease,border-color .1s ease;\n    box-shadow: inset 0 1px 2px hsla(0,0%,4%,.06);\n\n    &:focus {\n      border-color: rgb(75, 137, 255);\n      box-shadow: inset 0 1px 2px rgba(75, 137, 255, .2);\n    }\n  }\n}\n\n.@{css-prefix}-form-select {\n  position: relative;\n  display: inline-block;\n  background: #fff;\n  border: @input-border;\n  border-radius: 2px;\n  cursor: pointer;\n  color: rgba(0,0,0,.87);\n  user-select: none;\n  box-shadow: inset 0 1px 2px hsla(0,0%,4%,.06);\n\n  .input-text {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    min-width: 60px;\n    width: auto;\n    height: @form-field-height;\n    line-height: @form-field-height;\n    padding: 0 8px;\n  }\n}\n.@{css-prefix}-form-fields {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n\n  .@{css-prefix}-form-field {\n    flex: 0 1 auto;\n    .label {\n      display: inline-block;\n      margin: 0 10px 0 0;\n    }\n  }\n}\n.@{css-prefix}-form-field {\n  display: block;\n  vertical-align: middle;\n  margin-left: 10px;\n  margin-bottom: 10px;\n\n  &:first-child {\n    margin-left: 0;\n  }\n\n  &.error {\n    .@{css-prefix}-form-select, input {\n      border-color: #f04134;\n    }\n  }\n\n  .tip {\n    color: #f04134;\n    font-size: .9em;\n  }\n}\n// form end\n.@{css-prefix}-dimmer {\n  display: none;\n  position: absolute;\n  top: 0 !important;\n  left: 0 !important;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  vertical-align: middle;\n  background-color: rgba(0, 0, 0, 0.6);\n  opacity: 0;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-duration: 0.5s;\n  animation-duration: 0.5s;\n  transition: background-color 0.5s linear;\n  user-select: none;\n  z-index: 1000;\n\n  &.active {\n    display: block;\n    opacity: 1;\n  }\n}\n\nform fieldset {\n  border: none;\n\n  label {\n    display: block;\n    margin-bottom: .5em;\n    font-size: 1em;\n    color: #666;\n  }\n\n  select {\n    font-size: 1.1em;\n    width: 100%;\n    background-color: #fff;\n    border: none;\n    border-bottom: 2px solid #ddd;\n    padding: .5em .85em;\n    border-radius: 2px;\n  }\n}\n\n.@{css-prefix}-modal, .@{css-prefix}-toast {\n  font-size: 13px;\n  position: fixed;\n  z-index: 1001;\n  text-align: left;\n  line-height: @line-height;\n  min-width: 360px;\n  color: rgba(0,0,0,.87);\n  font-family: 'Lato', 'Source Sans Pro', Roboto, Helvetica, Arial, sans-serif;\n  border-radius: 4px;\n  border: 1px solid rgba(0,0,0,.1);\n  background-color: #fff;\n  background-clip: padding-box;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 8px;\n}\n\n.@{css-prefix}-toast {\n  background-color: rgba(255,255,255,.85);\n}\n\n.@{css-prefix}-modal-header, .@{css-prefix}-toast-header {\n  font-weight: 600;\n  background-clip: padding-box;\n  background-color: rgba(255,255,255,.85);\n  border-bottom: 1px solid rgba(0,0,0,.05);\n  border-radius: 4px 4px 0 0;\n\n  .@{css-prefix}-icon {\n    position: absolute;\n    right: .8em;\n    top: .65em;\n    border-radius: 18px;\n\n    &:hover {\n      opacity: 1;\n      background: rgba(0, 0, 0, 0.08);\n    }\n  }\n}\n\n.@{css-prefix}-toast-header {\n  color: @orange-color;\n}\n\n.@{css-prefix}-modal-header {\n  border-bottom: @border-style;\n  background: rgba(0, 0, 0, .08);\n  font-size: 1.0785em;\n}\n\n.@{css-prefix}-modal-header,\n.@{css-prefix}-modal-content,\n.@{css-prefix}-toast-header,\n.@{css-prefix}-toast-content {\n  padding: .75em 1em;\n}\n\n@media screen and (min-width: 320px) and (max-width: 480px) {\n  .@{css-prefix}-toolbar {\n    display: none;\n  }\n}\n\n.@{css-prefix}-icon {\n  width: 18px;\n  height: 18px;\n  margin: 1px 1px 2px 1px;\n  text-align: center;\n  vertical-align: middle;\n  user-select: none;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n  line-height: 0;\n\n  .@{css-prefix}-icon-img {\n    background-image: url('../assets/sprite.svg');\n    position: absolute;\n    width: 262px;\n    height: 444px;\n    opacity: 0.56;\n\n    &.undo {\n      left: 0;\n      top: 0;\n    }\n    &.redo {\n      left: -1 * @icon-size;\n      top: 0;\n    }\n    &.print {\n      left: -2 * @icon-size;\n      top: 0;\n    }\n    &.paintformat {\n      left: -3 * @icon-size;\n      top: 0;\n    }\n    &.clearformat {\n      left: -4 * @icon-size;\n      top: 0;\n    }\n    &.font-bold {\n      left: -5 * @icon-size;\n      top: 0;\n    }\n    &.font-italic {\n      left: -6 * @icon-size;\n      top: 0;\n    }\n    &.underline {\n      left: -7 * @icon-size;\n      top: 0;\n    }\n    &.strike {\n      left: -8 * @icon-size;\n      top: 0;\n    }\n    &.color {\n      left: -9 * @icon-size;\n      top: 0;\n    }\n    &.bgcolor {\n      left: -10 * @icon-size;\n      top: 0;\n    }\n    &.merge {\n      left: -11 * @icon-size;\n      top: 0;\n    }\n    &.align-left {\n      left: -12 * @icon-size;\n      top: 0;\n    }\n    &.align-center {\n      left: -13 * @icon-size;\n      top: 0;\n    }\n    &.align-right {\n      left: 0;\n      top: -1 * @icon-size;\n    }\n    &.align-top {\n      left: -1 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.align-middle {\n      left: -2 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.align-bottom {\n      left: -3 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.textwrap {\n      left: -4 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.autofilter {\n      left: -5 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.formula {\n      left: -6 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.arrow-down {\n      left: -7 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.arrow-right {\n      left: -8 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.link {\n      left: -9 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.chart {\n      left: -10 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.freeze {\n      left: -11 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.ellipsis {\n      left: -12 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.add {\n      left: -13 * @icon-size;\n      top: -1 * @icon-size;\n    }\n    &.border-all {\n      left: 0;\n      top: -2 * @icon-size;\n    }\n    &.border-inside {\n      left: -1 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-horizontal {\n      left: -2 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-vertical {\n      left: -3 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-outside {\n      left: -4 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-left {\n      left: -5 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-top {\n      left: -6 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-right {\n      left: -7 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-bottom {\n      left: -8 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.border-none {\n      left: -9 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.line-color {\n      left: -10 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.line-type {\n      left: -11 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.close {\n      left: -13 * @icon-size;\n      top: -2 * @icon-size;\n    }\n    &.chevron-down {\n      left: 0;\n      top: -3 * @icon-size;\n    }\n    &.chevron-up {\n      left: -1 * @icon-size;\n      top: -3 * @icon-size;\n    }\n    &.chevron-left {\n      left: -2 * @icon-size;\n      top: -3 * @icon-size;\n    }\n    &.chevron-right {\n      left: -3 * @icon-size;\n      top: -3 * @icon-size;\n    }\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {



/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {



module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./src/index.less":
/*!************************!*\
  !*** ./src/index.less ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_index_less__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./index.less */ "./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/index.less");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_index_less__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_index_less__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_index_less__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_less_loader_dist_cjs_js_index_less__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {



var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {



var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {



/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./src/canvas/draw.ts":
/*!****************************!*\
  !*** ./src/canvas/draw.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Draw": () => (/* binding */ Draw),
/* harmony export */   "DrawBox": () => (/* binding */ DrawBox),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "npx": () => (/* binding */ npx),
/* harmony export */   "thinLineWidth": () => (/* binding */ thinLineWidth)
/* harmony export */ });
/* global window */
function dpr() {
    return window.devicePixelRatio || 1;
}
function thinLineWidth() {
    return dpr() - 0.5;
}
function npx(px) {
    return Math.floor(px * dpr());
}
function npxLine(px) {
    const n = npx(px);
    return n > 0 ? n - 0.5 : 0.5;
}
class DrawBox {
    x;
    y;
    width;
    height;
    padding;
    bgcolor;
    borderTop;
    borderRight;
    borderBottom;
    borderLeft;
    constructor(x, y, w, h, padding = 0) {
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
        this.padding = padding;
        this.bgcolor = '#ffffff';
        // border: [width, style, color]
        this.borderTop = null;
        this.borderRight = null;
        this.borderBottom = null;
        this.borderLeft = null;
    }
    setBorders({ top, bottom, left, right }) {
        if (top)
            this.borderTop = top;
        if (right)
            this.borderRight = right;
        if (bottom)
            this.borderBottom = bottom;
        if (left)
            this.borderLeft = left;
    }
    innerWidth() {
        return this.width - this.padding * 2 - 2;
    }
    innerHeight() {
        return this.height - this.padding * 2 - 2;
    }
    textx(align) {
        const { width, padding } = this;
        let { x } = this;
        if (align === 'left') {
            x += padding;
        }
        else if (align === 'center') {
            x += width / 2;
        }
        else if (align === 'right') {
            x += width - padding;
        }
        return x;
    }
    texty(align, h) {
        const { height, padding } = this;
        let { y } = this;
        if (align === 'top') {
            y += padding;
        }
        else if (align === 'middle') {
            y += height / 2 - h / 2;
        }
        else if (align === 'bottom') {
            y += height - padding - h;
        }
        return y;
    }
    topxys() {
        const { x, y, width } = this;
        return [
            [x, y],
            [x + width, y],
        ];
    }
    rightxys() {
        const { x, y, width, height } = this;
        return [
            [x + width, y],
            [x + width, y + height],
        ];
    }
    bottomxys() {
        const { x, y, width, height } = this;
        return [
            [x, y + height],
            [x + width, y + height],
        ];
    }
    leftxys() {
        const { x, y, height } = this;
        return [
            [x, y],
            [x, y + height],
        ];
    }
}
function drawFontLine(type, tx, ty, align, valign, blheight, blwidth) {
    const floffset = { x: 0, y: 0 };
    if (type === 'underline') {
        if (valign === 'bottom') {
            floffset.y = 0;
        }
        else if (valign === 'top') {
            floffset.y = -(blheight + 2);
        }
        else {
            floffset.y = -blheight / 2;
        }
    }
    else if (type === 'strike') {
        if (valign === 'bottom') {
            floffset.y = blheight / 2;
        }
        else if (valign === 'top') {
            floffset.y = -(blheight / 2 + 2);
        }
    }
    if (align === 'center') {
        floffset.x = blwidth / 2;
    }
    else if (align === 'right') {
        floffset.x = blwidth;
    }
    this.line([tx - floffset.x, ty - floffset.y], [tx - floffset.x + blwidth, ty - floffset.y]);
}
class Draw {
    el;
    ctx;
    constructor(el, width, height) {
        this.el = el;
        this.ctx = el.getContext('2d');
        this.resize(width, height);
        this.ctx.scale(dpr(), dpr());
    }
    resize(width, height) {
        // console.log('dpr:', dpr);
        this.el.style.width = `${width}px`;
        this.el.style.height = `${height}px`;
        this.el.width = npx(width);
        this.el.height = npx(height);
    }
    clear() {
        const { width, height } = this.el;
        this.ctx.clearRect(0, 0, width, height);
        return this;
    }
    attr(options) {
        Object.assign(this.ctx, options);
        return this;
    }
    save() {
        this.ctx.save();
        this.ctx.beginPath();
        return this;
    }
    restore() {
        this.ctx.restore();
        return this;
    }
    beginPath() {
        this.ctx.beginPath();
        return this;
    }
    translate(x, y) {
        this.ctx.translate(npx(x), npx(y));
        return this;
    }
    scale(x, y) {
        this.ctx.scale(x, y);
        return this;
    }
    clearRect(x, y, w, h) {
        this.ctx.clearRect(x, y, w, h);
        return this;
    }
    fillRect(x, y, w, h) {
        this.ctx.fillRect(npx(x) - 0.5, npx(y) - 0.5, npx(w), npx(h));
        return this;
    }
    fillText(text, x, y) {
        this.ctx.fillText(text, npx(x), npx(y));
        return this;
    }
    /*
      txt: render text
      box: DrawBox
      attr: {
        align: left | center | right
        valign: top | middle | bottom
        color: '#333333',
        strike: false,
        font: {
          name: 'Arial',
          size: 14,
          bold: false,
          italic: false,
        }
      }
      textWrap: text wrapping
    */
    text(mtxt, box, attr = {}, textWrap = true) {
        const { ctx } = this;
        const { align, valign, font, color, strike, underline } = attr;
        const tx = box.textx(align);
        ctx.save();
        ctx.beginPath();
        this.attr({
            textAlign: align,
            textBaseline: valign,
            font: `${font.italic ? 'italic' : ''} ${font.bold ? 'bold' : ''} ${npx(font.size)}px ${font.name}`,
            fillStyle: color,
            strokeStyle: color,
        });
        const txts = `${mtxt}`.split('\n');
        const biw = box.innerWidth();
        const ntxts = [];
        txts.forEach((it) => {
            const txtWidth = ctx.measureText(it).width;
            if (textWrap && txtWidth > npx(biw)) {
                let textLine = { w: 0, len: 0, start: 0 };
                for (let i = 0; i < it.length; i += 1) {
                    if (textLine.w >= npx(biw)) {
                        ntxts.push(it.substr(textLine.start, textLine.len));
                        textLine = { w: 0, len: 0, start: i };
                    }
                    textLine.len += 1;
                    textLine.w += ctx.measureText(it[i]).width + 1;
                }
                if (textLine.len > 0) {
                    ntxts.push(it.substr(textLine.start, textLine.len));
                }
            }
            else {
                ntxts.push(it);
            }
        });
        const txtHeight = (ntxts.length - 1) * (font.size + 2);
        let ty = box.texty(valign, txtHeight);
        ntxts.forEach((txt) => {
            const txtWidth = ctx.measureText(txt).width;
            this.fillText(txt, tx, ty);
            if (strike) {
                drawFontLine.call(this, 'strike', tx, ty, align, valign, font.size, txtWidth);
            }
            if (underline) {
                drawFontLine.call(this, 'underline', tx, ty, align, valign, font.size, txtWidth);
            }
            ty += font.size + 2;
        });
        ctx.restore();
        return this;
    }
    border(style, color) {
        const { ctx } = this;
        ctx.lineWidth = thinLineWidth;
        ctx.strokeStyle = color;
        // console.log('style:', style);
        if (style === 'medium') {
            ctx.lineWidth = npx(2) - 0.5;
        }
        else if (style === 'thick') {
            ctx.lineWidth = npx(3);
        }
        else if (style === 'dashed') {
            ctx.setLineDash([npx(3), npx(2)]);
        }
        else if (style === 'dotted') {
            ctx.setLineDash([npx(1), npx(1)]);
        }
        else if (style === 'double') {
            ctx.setLineDash([npx(2), 0]);
        }
        return this;
    }
    line(...xys) {
        const { ctx } = this;
        if (xys.length > 1) {
            ctx.beginPath();
            const [x, y] = xys[0];
            ctx.moveTo(npxLine(x), npxLine(y));
            for (let i = 1; i < xys.length; i += 1) {
                const [x1, y1] = xys[i];
                ctx.lineTo(npxLine(x1), npxLine(y1));
            }
            ctx.stroke();
        }
        return this;
    }
    // strokeBorders(box) {
    //   const { ctx } = this;
    //   ctx.save();
    //   // border
    //   const {
    //     borderTop, borderRight, borderBottom, borderLeft,
    //   } = box;
    //   if (borderTop) {
    //     this.border(...borderTop);
    //     // console.log('box.topxys:', box.topxys());
    //     this.line(...box.topxys());
    //   }
    //   if (borderRight) {
    //     this.border(...borderRight);
    //     this.line(...box.rightxys());
    //   }
    //   if (borderBottom) {
    //     this.border(...borderBottom);
    //     this.line(...box.bottomxys());
    //   }
    //   if (borderLeft) {
    //     this.border(...borderLeft);
    //     this.line(...box.leftxys());
    //   }
    //   ctx.restore();
    // }
    dropdown(box) {
        const { ctx } = this;
        const { x, y, width, height } = box;
        const sx = x + width - 15;
        const sy = y + height - 15;
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(npx(sx), npx(sy));
        ctx.lineTo(npx(sx + 8), npx(sy));
        ctx.lineTo(npx(sx + 4), npx(sy + 6));
        ctx.closePath();
        ctx.fillStyle = 'rgba(0, 0, 0, .45)';
        ctx.fill();
        ctx.restore();
    }
    error(box) {
        const { ctx } = this;
        const { x, y, width } = box;
        const sx = x + width - 1;
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(npx(sx - 8), npx(y - 1));
        ctx.lineTo(npx(sx), npx(y - 1));
        ctx.lineTo(npx(sx), npx(y + 8));
        ctx.closePath();
        ctx.fillStyle = 'rgba(255, 0, 0, .65)';
        ctx.fill();
        ctx.restore();
    }
    frozen(box) {
        const { ctx } = this;
        const { x, y, width } = box;
        const sx = x + width - 1;
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(npx(sx - 8), npx(y - 1));
        ctx.lineTo(npx(sx), npx(y - 1));
        ctx.lineTo(npx(sx), npx(y + 8));
        ctx.closePath();
        ctx.fillStyle = 'rgba(0, 255, 0, .85)';
        ctx.fill();
        ctx.restore();
    }
    rect(box, dtextcb) {
        const { ctx } = this;
        const { x, y, width, height, bgcolor } = box;
        ctx.save();
        ctx.beginPath();
        ctx.fillStyle = bgcolor || '#fff';
        ctx.rect(npxLine(x + 1), npxLine(y + 1), npx(width - 2), npx(height - 2));
        ctx.clip();
        ctx.fill();
        dtextcb();
        ctx.restore();
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});



/***/ }),

/***/ "./src/component/border_palette.ts":
/*!*****************************************!*\
  !*** ./src/component/border_palette.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BorderPalette)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _dropdown_color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dropdown_color */ "./src/component/dropdown_color.ts");
/* harmony import */ var _dropdown_linetype__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dropdown_linetype */ "./src/component/dropdown_linetype.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config */ "./src/config.ts");





function buildTable(...trs) {
    return (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('table', '').child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tbody', '').children(...trs));
}
function buildTd(iconName) {
    return (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('td', '').child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_4__.cssPrefix}-border-palette-cell`).child(new _icon__WEBPACK_IMPORTED_MODULE_1__["default"](`border-${iconName}`)).on('click', () => {
        this.mode = iconName;
        const { mode, style, color } = this;
        this.change({ mode, style, color });
    }));
}
class BorderPalette {
    color;
    style;
    mode;
    change;
    ddColor;
    ddType;
    el;
    constructor() {
        this.color = '#000';
        this.style = 'thin';
        this.mode = 'all';
        this.change = () => { };
        this.ddColor = new _dropdown_color__WEBPACK_IMPORTED_MODULE_2__["default"]('line-color', this.color);
        this.ddColor.change = (color) => {
            this.color = color;
        };
        this.ddType = new _dropdown_linetype__WEBPACK_IMPORTED_MODULE_3__["default"](this.style);
        this.ddType.change = ([s]) => {
            this.style = s;
        };
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_4__.cssPrefix}-border-palette`);
        const table = buildTable((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tr', '').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('td', `${_config__WEBPACK_IMPORTED_MODULE_4__.cssPrefix}-border-palette-left`).child(buildTable((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tr', '').children(...['all', 'inside', 'horizontal', 'vertical', 'outside'].map(it => buildTd.call(this, it))), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tr', '').children(...['left', 'top', 'right', 'bottom', 'none'].map(it => buildTd.call(this, it))))), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('td', `${_config__WEBPACK_IMPORTED_MODULE_4__.cssPrefix}-border-palette-right`).children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_4__.cssPrefix}-toolbar-btn`).child(this.ddColor.el), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_4__.cssPrefix}-toolbar-btn`).child(this.ddType.el))));
        this.el.child(table);
    }
}


/***/ }),

/***/ "./src/component/bottombar.ts":
/*!************************************!*\
  !*** ./src/component/bottombar.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Bottombar)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event */ "./src/component/event.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _form_input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./form_input */ "./src/component/form_input.ts");
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");







class DropdownMore extends _dropdown__WEBPACK_IMPORTED_MODULE_5__["default"] {
    contentClick;
    constructor(click) {
        const icon = new _icon__WEBPACK_IMPORTED_MODULE_3__["default"]('ellipsis');
        super(icon, 'auto', false, 'top-left');
        this.contentClick = click;
    }
    reset(items) {
        const eles = items.map((it, i) => (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-item`)
            .css('width', '150px')
            .css('font-weight', 'normal')
            .on('click', () => {
            this.contentClick(i);
            this.hide();
        })
            .child(it));
        this.setContentChildren(...eles);
    }
    setTitle() { }
}
const menuItems = [{ key: 'delete', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_6__.tf)('contextmenu.deleteSheet') }];
function buildMenuItem(item) {
    return (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-item`)
        .child(item.title())
        .on('click', () => {
        this.itemClick(item.key);
        this.hide();
    });
}
function buildMenu() {
    return menuItems.map((it) => buildMenuItem.call(this, it));
}
class ContextMenu {
    el;
    itemClick;
    constructor() {
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-contextmenu`)
            .css('width', '160px')
            .children(...buildMenu.call(this))
            .hide();
        this.itemClick = () => { };
    }
    hide() {
        const { el } = this;
        el.hide();
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.unbindClickoutside)(el);
    }
    setOffset(offset) {
        const { el } = this;
        el.offset(offset);
        el.show();
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.bindClickoutside)(el);
    }
}
class Bottombar {
    swapFunc;
    updateFunc;
    dataNames;
    activeEl;
    deleteEl;
    items;
    moreEl;
    contextMenu;
    el;
    menuEl;
    constructor(addFunc = () => { }, swapFunc = (index) => { }, deleteFunc = () => { }, updateFunc = (index, value) => { }) {
        this.swapFunc = swapFunc;
        this.updateFunc = updateFunc;
        this.dataNames = [];
        this.activeEl = null;
        this.deleteEl = null;
        this.items = [];
        this.moreEl = new DropdownMore((i) => {
            this.clickSwap2(this.items[i]);
        });
        this.contextMenu = new ContextMenu();
        this.contextMenu.itemClick = deleteFunc;
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-bottombar`).children(this.contextMenu.el, (this.menuEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('ul', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-menu`).child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('li', '').children(new _icon__WEBPACK_IMPORTED_MODULE_3__["default"]('add').on('click', () => {
            addFunc();
        }), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('span', '').child(this.moreEl)))));
    }
    addItem(name, active, options) {
        this.dataNames.push(name);
        const item = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('li', active ? 'active' : '').child(name);
        item
            .on('click', () => {
            this.clickSwap2(item);
        })
            .on('contextmenu', (evt) => {
            if (options.mode === 'read')
                return;
            const { offsetLeft, offsetHeight } = evt.target;
            this.contextMenu.setOffset({
                left: offsetLeft,
                bottom: offsetHeight + 1,
            });
            this.deleteEl = item;
        })
            .on('dblclick', () => {
            if (options.mode === 'read')
                return;
            const v = item.html();
            const input = new _form_input__WEBPACK_IMPORTED_MODULE_4__["default"]('auto', '');
            input.val(v);
            input.input.on('blur', ({ target }) => {
                const { value } = target;
                const nindex = this.dataNames.findIndex((it) => it === v);
                this.renameItem(nindex, value);
                /*
              this.dataNames.splice(nindex, 1, value);
              this.moreEl.reset(this.dataNames);
              item.html('').child(value);
              this.updateFunc(nindex, value);
              */
            });
            item.html('').child(input.el);
            input.focus();
        });
        if (active) {
            this.clickSwap(item);
        }
        this.items.push(item);
        this.menuEl.child(item);
        this.moreEl.reset(this.dataNames);
    }
    renameItem(index, value) {
        this.dataNames.splice(index, 1, value);
        this.moreEl.reset(this.dataNames);
        this.items[index].html('').child(value);
        this.updateFunc(index, value);
    }
    clear() {
        this.items.forEach((it) => {
            this.menuEl.removeChild(it.el);
        });
        this.items = [];
        this.dataNames = [];
        this.moreEl.reset(this.dataNames);
    }
    deleteItem() {
        const { activeEl, deleteEl } = this;
        if (this.items.length > 1) {
            const index = this.items.findIndex((it) => it === deleteEl);
            this.items.splice(index, 1);
            this.dataNames.splice(index, 1);
            this.menuEl.removeChild(deleteEl.el);
            this.moreEl.reset(this.dataNames);
            if (activeEl === deleteEl) {
                const [f] = this.items;
                this.activeEl = f;
                this.activeEl.toggle();
                return [index, 0];
            }
            return [index, -1];
        }
        return [-1];
    }
    clickSwap2(item) {
        const index = this.items.findIndex((it) => it === item);
        this.clickSwap(item);
        this.activeEl.toggle();
        this.swapFunc(index);
    }
    clickSwap(item) {
        if (this.activeEl !== null) {
            this.activeEl.toggle();
        }
        this.activeEl = item;
    }
}


/***/ }),

/***/ "./src/component/button.ts":
/*!*********************************!*\
  !*** ./src/component/button.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Button)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");



class Button extends _element__WEBPACK_IMPORTED_MODULE_0__.Element {
    // type: primary
    constructor(title, type = '') {
        super('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-button ${type}`);
        this.child((0,_locale_locale__WEBPACK_IMPORTED_MODULE_2__.t)(`button.${title}`));
    }
}


/***/ }),

/***/ "./src/component/calendar.ts":
/*!***********************************!*\
  !*** ./src/component/calendar.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Calendar)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");



function addMonth(date, step) {
    date.setMonth(date.getMonth() + step);
}
function weekday(date, index) {
    const d = new Date(date);
    d.setDate(index - date.getDay() + 1);
    return d;
}
function monthDays(year, month, cdate) {
    // the first day of month
    const startDate = new Date(year, month, 1, 23, 59, 59);
    const datess = [[], [], [], [], [], []];
    for (let i = 0; i < 6; i += 1) {
        for (let j = 0; j < 7; j += 1) {
            const index = i * 7 + j;
            const d = weekday(startDate, index);
            const disabled = d.getMonth() !== month;
            // console.log('d:', d, ', cdate:', cdate);
            const active = d.getMonth() === cdate.getMonth() && d.getDate() === cdate.getDate();
            datess[i][j] = { d, disabled, active };
        }
    }
    return datess;
}
class Calendar {
    value;
    cvalue;
    headerLeftEl;
    bodyEl;
    el;
    selectChange;
    constructor(value) {
        this.value = value;
        this.cvalue = new Date(value);
        this.headerLeftEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'calendar-header-left');
        this.bodyEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tbody', '');
        this.buildAll();
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'x-spreadsheet-calendar').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'calendar-header').children(this.headerLeftEl, (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'calendar-header-right').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('a', 'calendar-prev')
            .on('click.stop', () => this.prev())
            .child(new _icon__WEBPACK_IMPORTED_MODULE_1__["default"]('chevron-left')), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('a', 'calendar-next')
            .on('click.stop', () => this.next())
            .child(new _icon__WEBPACK_IMPORTED_MODULE_1__["default"]('chevron-right')))), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('table', 'calendar-body').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('thead', '').child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tr', '').children(...(0,_locale_locale__WEBPACK_IMPORTED_MODULE_2__.t)('calendar.weeks').map((week) => (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('th', 'cell').child(week)))), this.bodyEl));
        this.selectChange = () => { };
    }
    setValue(value) {
        this.value = value;
        this.cvalue = new Date(value);
        this.buildAll();
    }
    prev() {
        const { value } = this;
        addMonth(value, -1);
        this.buildAll();
    }
    next() {
        const { value } = this;
        addMonth(value, 1);
        this.buildAll();
    }
    buildAll() {
        this.buildHeaderLeft();
        this.buildBody();
    }
    buildHeaderLeft() {
        const { value } = this;
        this.headerLeftEl.html(`${(0,_locale_locale__WEBPACK_IMPORTED_MODULE_2__.t)('calendar.months')[value.getMonth()]} ${value.getFullYear()}`);
    }
    buildBody() {
        const { value, cvalue, bodyEl } = this;
        const mDays = monthDays(value.getFullYear(), value.getMonth(), cvalue);
        const trs = mDays.map((it) => {
            const tds = it.map((it1) => {
                let cls = 'cell';
                if (it1.disabled)
                    cls += ' disabled';
                if (it1.active)
                    cls += ' active';
                return (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('td', '').child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', cls)
                    .on('click.stop', () => {
                    this.selectChange(it1.d);
                })
                    .child(it1.d.getDate().toString()));
            });
            return (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tr', '').children(...tds);
        });
        bodyEl.html('').children(...trs);
    }
}


/***/ }),

/***/ "./src/component/color_palette.ts":
/*!****************************************!*\
  !*** ./src/component/color_palette.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ColorPalette)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");


const themeColorPlaceHolders = ['#ffffff', '#000100', '#e7e5e6', '#445569', '#5b9cd6', '#ed7d31', '#a5a5a5', '#ffc001', '#4371c6', '#71ae47'];
const themeColors = [
    ['#f2f2f2', '#7f7f7f', '#d0cecf', '#d5dce4', '#deeaf6', '#fce5d5', '#ededed', '#fff2cd', '#d9e2f3', '#e3efd9'],
    ['#d8d8d8', '#595959', '#afabac', '#adb8ca', '#bdd7ee', '#f7ccac', '#dbdbdb', '#ffe59a', '#b3c6e7', '#c5e0b3'],
    ['#bfbfbf', '#3f3f3f', '#756f6f', '#8596b0', '#9cc2e6', '#f4b184', '#c9c9c9', '#fed964', '#8eaada', '#a7d08c'],
    ['#a5a5a5', '#262626', '#3a3839', '#333f4f', '#2e75b5', '#c45a10', '#7b7b7b', '#bf8e01', '#2f5596', '#538136'],
    ['#7f7f7f', '#0c0c0c', '#171516', '#222a35', '#1f4e7a', '#843c0a', '#525252', '#7e6000', '#203864', '#365624'],
];
const standardColors = ['#c00000', '#fe0000', '#fdc101', '#ffff01', '#93d051', '#00b04e', '#01b0f1', '#0170c1', '#012060', '#7030a0'];
function buildTd(bgcolor) {
    return (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('td', '').child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-color-palette-cell`)
        .on('click.stop', () => this.change(bgcolor))
        .css('background-color', bgcolor));
}
class ColorPalette {
    el;
    change;
    constructor() {
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-color-palette`);
        this.change = () => { };
        const table = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('table', '').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tbody', '').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tr', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-theme-color-placeholders`).children(...themeColorPlaceHolders.map(color => buildTd.call(this, color))), ...themeColors.map(it => (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tr', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-theme-colors`).children(...it.map(color => buildTd.call(this, color)))), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('tr', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-standard-colors`).children(...standardColors.map(color => buildTd.call(this, color)))));
        this.el.child(table);
    }
}


/***/ }),

/***/ "./src/component/contextmenu.ts":
/*!**************************************!*\
  !*** ./src/component/contextmenu.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ContextMenu)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event */ "./src/component/event.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");




const menuItems = [
    { key: 'copy', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.copy'), label: 'Ctrl+C' },
    { key: 'cut', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.cut'), label: 'Ctrl+X' },
    { key: 'paste', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.paste'), label: 'Ctrl+V' },
    { key: 'paste-value', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.pasteValue'), label: 'Ctrl+Shift+V' },
    { key: 'paste-format', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.pasteFormat'), label: 'Ctrl+Alt+V' },
    { key: 'divider' },
    { key: 'insert-row', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.insertRow') },
    { key: 'insert-column', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.insertColumn') },
    { key: 'divider' },
    { key: 'delete-row', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.deleteRow') },
    { key: 'delete-column', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.deleteColumn') },
    { key: 'delete-cell-text', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.deleteCellText') },
    { key: 'hide', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.hide') },
    { key: 'divider' },
    { key: 'validation', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.validation') },
    { key: 'divider' },
    { key: 'cell-printable', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.cellprintable') },
    { key: 'cell-non-printable', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.cellnonprintable') },
    { key: 'divider' },
    { key: 'cell-editable', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.celleditable') },
    { key: 'cell-non-editable', title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.tf)('contextmenu.cellnoneditable') },
];
function buildMenuItem(item) {
    if (item.key === 'divider') {
        return (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-item divider`);
    }
    return (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-item`)
        .on('click', () => {
        this.itemClick(item.key);
        this.hide();
    })
        .children(item.title(), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'label').child(item.label || ''));
}
function buildMenu() {
    return menuItems.map(it => buildMenuItem.call(this, it));
}
class ContextMenu {
    menuItems;
    el;
    viewFn;
    itemClick;
    isHide;
    constructor(viewFn, isHide = false) {
        this.menuItems = buildMenu.call(this);
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-contextmenu`)
            .children(...this.menuItems)
            .hide();
        this.viewFn = viewFn;
        this.itemClick = () => { };
        this.isHide = isHide;
        this.setMode('range');
    }
    // row-col: the whole rows or the whole cols
    // range: select range
    setMode(mode) {
        const hideEl = this.menuItems[12];
        if (mode === 'row-col') {
            hideEl.show();
        }
        else {
            hideEl.hide();
        }
    }
    hide() {
        const { el } = this;
        el.hide();
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.unbindClickoutside)(el);
    }
    setPosition(x, y) {
        if (this.isHide)
            return;
        const { el } = this;
        const { width } = el.show().offset();
        const view = this.viewFn();
        const vhf = view.height / 2;
        let left = x;
        if (view.width - x <= width) {
            left -= width;
        }
        el.css('left', `${left}px`);
        if (y > vhf) {
            el.css('bottom', `${view.height - y}px`)
                .css('max-height', `${y}px`)
                .css('top', 'auto');
        }
        else {
            el.css('top', `${y}px`)
                .css('max-height', `${view.height - y}px`)
                .css('bottom', 'auto');
        }
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.bindClickoutside)(el);
    }
}


/***/ }),

/***/ "./src/component/datepicker.ts":
/*!*************************************!*\
  !*** ./src/component/datepicker.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Datepicker)
/* harmony export */ });
/* harmony import */ var _calendar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar */ "./src/component/calendar.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");



class Datepicker {
    calendar;
    el;
    constructor() {
        this.calendar = new _calendar__WEBPACK_IMPORTED_MODULE_0__["default"](new Date());
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-datepicker`)
            .child(this.calendar.el)
            .hide();
    }
    setValue(date) {
        // console.log(':::::::', date, typeof date, date instanceof string);
        const { calendar } = this;
        if (typeof date === 'string') {
            // console.log(/^\d{4}-\d{1,2}-\d{1,2}$/.test(date));
            if (/^\d{4}-\d{1,2}-\d{1,2}$/.test(date)) {
                calendar.setValue(new Date(date.replace(new RegExp('-', 'g'), '/')));
            }
        }
        else if (date instanceof Date) {
            calendar.setValue(date);
        }
        return this;
    }
    change(cb) {
        this.calendar.selectChange = (d) => {
            cb(d);
            this.hide();
        };
    }
    show() {
        this.el.show();
    }
    hide() {
        this.el.hide();
    }
}


/***/ }),

/***/ "./src/component/dropdown.ts":
/*!***********************************!*\
  !*** ./src/component/dropdown.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Dropdown)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event */ "./src/component/event.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");



class Dropdown extends _element__WEBPACK_IMPORTED_MODULE_0__.Element {
    title;
    headerClick;
    contentEl;
    headerEl;
    change;
    constructor(title, width, showArrow, placement, ...children) {
        super('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-dropdown ${placement}`);
        this.title = title;
        // this.change = () => {};
        this.headerClick = () => { };
        if (typeof title === 'string') {
            this.title = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-dropdown-title`).child(title);
        }
        else if (showArrow) {
            this.title.addClass('arrow-left');
        }
        this.contentEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-dropdown-content`)
            .css('width', width)
            .hide();
        this.setContentChildren(...children);
        this.headerEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-dropdown-header`);
        this.headerEl
            .on('click', () => {
            if (this.contentEl.css('display') !== 'block') {
                this.show();
            }
            else {
                this.hide();
            }
        })
            .children(this.title, showArrow
            ? (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-icon arrow-right`).child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-icon-img arrow-down`))
            : '');
    }
    setContentChildren(...children) {
        this.contentEl.html('');
        if (children.length > 0) {
            this.contentEl.children(...children);
        }
    }
    setTitle(title) {
        this.title.html(title);
        this.hide();
    }
    show() {
        const { contentEl } = this;
        contentEl.show();
        // this.parent().active();
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.bindClickoutside)(this.parent(), () => {
            this.hide();
        });
        return this;
    }
    parent() {
        return this;
    }
    hide() {
        this.parent().active(false);
        this.contentEl.hide();
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.unbindClickoutside)(this.parent());
        return this;
    }
}


/***/ }),

/***/ "./src/component/dropdown_align.ts":
/*!*****************************************!*\
  !*** ./src/component/dropdown_align.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DropdownAlign)
/* harmony export */ });
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/config.ts");




function buildItemWithIcon(iconName) {
    return (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-item`).child(new _icon__WEBPACK_IMPORTED_MODULE_2__["default"](iconName));
}
class DropdownAlign extends _dropdown__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(aligns, align) {
        const icon = new _icon__WEBPACK_IMPORTED_MODULE_2__["default"](`align-${align}`);
        const naligns = aligns.map((it) => buildItemWithIcon(`align-${it}`).on('click', () => {
            this.setTitle(it);
            this.change(it);
        }));
        super(icon, 'auto', true, 'bottom-left', ...naligns);
    }
    setTitle(align) {
        this.title.setName(`align-${align}`);
        this.hide();
    }
}


/***/ }),

/***/ "./src/component/dropdown_border.ts":
/*!******************************************!*\
  !*** ./src/component/dropdown_border.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DropdownBorder)
/* harmony export */ });
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _border_palette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./border_palette */ "./src/component/border_palette.ts");



class DropdownBorder extends _dropdown__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        const icon = new _icon__WEBPACK_IMPORTED_MODULE_1__["default"]('border-all');
        const borderPalette = new _border_palette__WEBPACK_IMPORTED_MODULE_2__["default"]();
        borderPalette.change = (v) => {
            this.change(v);
            this.hide();
        };
        super(icon, 'auto', false, 'bottom-left', borderPalette.el);
    }
}


/***/ }),

/***/ "./src/component/dropdown_color.ts":
/*!*****************************************!*\
  !*** ./src/component/dropdown_color.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DropdownColor)
/* harmony export */ });
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _color_palette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./color_palette */ "./src/component/color_palette.ts");



class DropdownColor extends _dropdown__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(iconName, color) {
        const icon = new _icon__WEBPACK_IMPORTED_MODULE_1__["default"](iconName)
            .css('height', '16px')
            .css('border-bottom', `3px solid ${color}`);
        const colorPalette = new _color_palette__WEBPACK_IMPORTED_MODULE_2__["default"]();
        colorPalette.change = (v) => {
            this.setTitle(v);
            this.change(v);
        };
        super(icon, 'auto', false, 'bottom-left', colorPalette.el);
    }
    setTitle(color) {
        this.title.css('border-color', color);
        this.hide();
    }
}


/***/ }),

/***/ "./src/component/dropdown_font.ts":
/*!****************************************!*\
  !*** ./src/component/dropdown_font.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DropdownFont)
/* harmony export */ });
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _core_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/font */ "./src/core/font.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/config.ts");




class DropdownFont extends _dropdown__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        const nfonts = _core_font__WEBPACK_IMPORTED_MODULE_2__.baseFonts.map((it) => (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-item`)
            .on('click', () => {
            this.setTitle(it.title);
            this.change(it);
        })
            .child(it.title));
        super(_core_font__WEBPACK_IMPORTED_MODULE_2__.baseFonts[0].title, '160px', true, 'bottom-left', ...nfonts);
    }
}


/***/ }),

/***/ "./src/component/dropdown_fontsize.ts":
/*!********************************************!*\
  !*** ./src/component/dropdown_fontsize.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DropdownFontSize)
/* harmony export */ });
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _core_font__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/font */ "./src/core/font.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/config.ts");




class DropdownFontSize extends _dropdown__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        const nfontSizes = _core_font__WEBPACK_IMPORTED_MODULE_2__.fontSizes.map((it) => (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-item`)
            .on('click', () => {
            this.setTitle(`${it.pt}`);
            this.change(it);
        })
            .child(`${it.pt}`));
        super('10', '60px', true, 'bottom-left', ...nfontSizes);
    }
}


/***/ }),

/***/ "./src/component/dropdown_format.ts":
/*!******************************************!*\
  !*** ./src/component/dropdown_format.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DropdownFormat)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _core_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/format */ "./src/core/format.ts");
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");




class DropdownFormat extends _dropdown__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor() {
        let nformats = _core_format__WEBPACK_IMPORTED_MODULE_1__.baseFormats.slice(0);
        nformats.splice(2, 0, { key: 'divider' });
        nformats.splice(8, 0, { key: 'divider' });
        nformats = nformats.map((it) => {
            const item = (0,_element__WEBPACK_IMPORTED_MODULE_3__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_0__.cssPrefix}-item`);
            if (it.key === 'divider') {
                item.addClass('divider');
            }
            else {
                item.child(it.title()).on('click', () => {
                    this.setTitle(it.title());
                    this.change(it);
                });
                if (it.label)
                    item.child((0,_element__WEBPACK_IMPORTED_MODULE_3__.h)('div', 'label').html(it.label));
            }
            return item;
        });
        super('Normal', '220px', true, 'bottom-left', ...nformats);
    }
    setTitle(key) {
        for (let i = 0; i < _core_format__WEBPACK_IMPORTED_MODULE_1__.baseFormats.length; i += 1) {
            if (_core_format__WEBPACK_IMPORTED_MODULE_1__.baseFormats[i].key === key) {
                this.title.html(_core_format__WEBPACK_IMPORTED_MODULE_1__.baseFormats[i].title());
            }
        }
        this.hide();
    }
}


/***/ }),

/***/ "./src/component/dropdown_formula.ts":
/*!*******************************************!*\
  !*** ./src/component/dropdown_formula.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DropdownFormula)
/* harmony export */ });
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _core_formula__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/formula */ "./src/core/formula.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config */ "./src/config.ts");





class DropdownFormula extends _dropdown__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        const nformulas = _core_formula__WEBPACK_IMPORTED_MODULE_3__.baseFormulas.map((it) => (0,_element__WEBPACK_IMPORTED_MODULE_2__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_4__.cssPrefix}-item`)
            .on('click', () => {
            this.hide();
            this.change(it);
        })
            .child(it.key));
        super(new _icon__WEBPACK_IMPORTED_MODULE_1__["default"]('formula'), '180px', true, 'bottom-left', ...nformulas);
    }
}


/***/ }),

/***/ "./src/component/dropdown_linetype.ts":
/*!********************************************!*\
  !*** ./src/component/dropdown_linetype.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DropdownLineType)
/* harmony export */ });
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/config.ts");




const lineTypes = [
    [
        'thin',
        '<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" style="user-select: none;"></line></svg>',
    ],
    [
        'medium',
        '<svg xmlns="http://www.w3.org/2000/svg" width="50" height="2" style="user-select: none;"><line x1="0" y1="1.0" x2="50" y2="1.0" stroke-width="2" stroke="black" style="user-select: none;"></line></svg>',
    ],
    [
        'thick',
        '<svg xmlns="http://www.w3.org/2000/svg" width="50" height="3" style="user-select: none;"><line x1="0" y1="1.5" x2="50" y2="1.5" stroke-width="3" stroke="black" style="user-select: none;"></line></svg>',
    ],
    [
        'dashed',
        '<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="2" style="user-select: none;"></line></svg>',
    ],
    [
        'dotted',
        '<svg xmlns="http://www.w3.org/2000/svg" width="50" height="1" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" stroke-dasharray="1" style="user-select: none;"></line></svg>',
    ],
    // ['double', '<svg xmlns="http://www.w3.org/2000/svg" width="50" height="3" style="user-select: none;"><line x1="0" y1="0.5" x2="50" y2="0.5" stroke-width="1" stroke="black" style="user-select: none;"></line><line x1="0" y1="2.5" x2="50" y2="2.5" stroke-width="1" stroke="black" style="user-select: none;"></line></svg>'],
];
class DropdownLineType extends _dropdown__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(type) {
        const icon = new _icon__WEBPACK_IMPORTED_MODULE_2__["default"]('line-type');
        let beforei = 0;
        const lineTypeEls = lineTypes.map((it, iti) => (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-item state ${type === it[0] ? 'checked' : ''}`)
            .on('click', () => {
            lineTypeEls[beforei].toggle('checked');
            lineTypeEls[iti].toggle('checked');
            beforei = iti;
            this.hide();
            this.change(it);
        })
            .child((0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-line-type`).html(it[1])));
        super(icon, 'auto', false, 'bottom-left', ...lineTypeEls);
    }
}


/***/ }),

/***/ "./src/component/editor.ts":
/*!*********************************!*\
  !*** ./src/component/editor.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Editor)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _suggest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./suggest */ "./src/component/suggest.ts");
/* harmony import */ var _datepicker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./datepicker */ "./src/component/datepicker.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/config.ts");
//* global window */




function resetTextareaSize() {
    const { inputText } = this;
    if (!/^\s*$/.test(inputText)) {
        const { textlineEl, textEl, areaOffset } = this;
        const txts = inputText.split('\n');
        const maxTxtSize = Math.max(...txts.map((it) => it.length));
        const tlOffset = textlineEl.offset();
        const fontWidth = tlOffset.width / inputText.length;
        const tlineWidth = (maxTxtSize + 1) * fontWidth + 5;
        const maxWidth = this.viewFn().width - areaOffset.left - fontWidth;
        let h1 = txts.length;
        if (tlineWidth > areaOffset.width) {
            let twidth = tlineWidth;
            if (tlineWidth > maxWidth) {
                twidth = maxWidth;
                h1 += Math.floor(tlineWidth / maxWidth);
                h1 += tlineWidth % maxWidth > 0 ? 1 : 0;
            }
            textEl.css('width', `${twidth}px`);
        }
        h1 *= this.rowHeight;
        if (h1 > areaOffset.height) {
            textEl.css('height', `${h1}px`);
        }
    }
}
function insertText({ target }, itxt) {
    const { value, selectionEnd } = target;
    const ntxt = `${value.slice(0, selectionEnd)}${itxt}${value.slice(selectionEnd)}`;
    target.value = ntxt;
    target.setSelectionRange(selectionEnd + 1, selectionEnd + 1);
    this.inputText = ntxt;
    this.textlineEl.html(ntxt);
    resetTextareaSize.call(this);
}
function keydownEventHandler(evt) {
    const { keyCode, altKey } = evt;
    if (keyCode !== 13 && keyCode !== 9)
        evt.stopPropagation();
    if (keyCode === 13 && altKey) {
        insertText.call(this, evt, '\n');
        evt.stopPropagation();
    }
    if (keyCode === 13 && !altKey)
        evt.preventDefault();
}
function inputEventHandler(evt) {
    const v = evt.target.value;
    // console.log(evt, 'v:', v);
    const { suggest, textlineEl, validator } = this;
    const { cell } = this;
    if (cell !== null) {
        if (('editable' in cell && cell.editable === true) ||
            cell.editable === undefined) {
            this.inputText = v;
            if (validator) {
                if (validator.type === 'list') {
                    suggest.search(v);
                }
                else {
                    suggest.hide();
                }
            }
            else {
                const start = v.lastIndexOf('=');
                if (start !== -1) {
                    suggest.search(v.substring(start + 1));
                }
                else {
                    suggest.hide();
                }
            }
            textlineEl.html(v);
            resetTextareaSize.call(this);
            this.change('input', v);
        }
        else {
            evt.target.value = cell.text || '';
        }
    }
    else {
        this.inputText = v;
        if (validator) {
            if (validator.type === 'list') {
                suggest.search(v);
            }
            else {
                suggest.hide();
            }
        }
        else {
            const start = v.lastIndexOf('=');
            if (start !== -1) {
                suggest.search(v.substring(start + 1));
            }
            else {
                suggest.hide();
            }
        }
        textlineEl.html(v);
        resetTextareaSize.call(this);
        this.change('input', v);
    }
}
function setTextareaRange(position) {
    const { el } = this.textEl;
    setTimeout(() => {
        el.focus();
        el.setSelectionRange(position, position);
    }, 0);
}
function setText(text, position) {
    const { textEl, textlineEl } = this;
    // firefox bug
    textEl.el.blur();
    textEl.val(text);
    textlineEl.html(text);
    setTextareaRange.call(this, position);
}
function suggestItemClick(it) {
    const { inputText, validator } = this;
    let position = 0;
    if (validator && validator.type === 'list') {
        this.inputText = it;
        position = this.inputText.length;
    }
    else {
        const start = inputText.lastIndexOf('=');
        const sit = inputText.substring(0, start + 1);
        let eit = inputText.substring(start + 1);
        if (eit.indexOf(')') !== -1) {
            eit = eit.substring(eit.indexOf(')'));
        }
        else {
            eit = '';
        }
        this.inputText = `${sit + it.key}(`;
        // console.log('inputText:', this.inputText);
        position = this.inputText.length;
        this.inputText += `)${eit}`;
    }
    setText.call(this, this.inputText, position);
}
function resetSuggestItems() {
    this.suggest.setItems(this.formulas);
}
function dateFormat(d) {
    let month = d.getMonth() + 1;
    let date = d.getDate();
    if (month < 10)
        month = `0${month}`;
    if (date < 10)
        date = `0${date}`;
    return `${d.getFullYear()}-${month}-${date}`;
}
class Editor {
    viewFn;
    rowHeight;
    formulas;
    suggest;
    datepicker;
    areaEl;
    textEl;
    textlineEl;
    el;
    areaOffset;
    freeze;
    cell;
    inputText;
    change;
    validator;
    constructor(formulas, viewFn, rowHeight) {
        this.viewFn = viewFn;
        this.rowHeight = rowHeight;
        this.formulas = formulas;
        this.suggest = new _suggest__WEBPACK_IMPORTED_MODULE_1__["default"](formulas, (it) => {
            suggestItemClick.call(this, it);
        });
        this.datepicker = new _datepicker__WEBPACK_IMPORTED_MODULE_2__["default"]();
        this.datepicker.change((d) => {
            // console.log('d:', d);
            this.setText(dateFormat(d));
            this.clear();
        });
        this.areaEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-editor-area`)
            .children((this.textEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('textarea', '')
            .on('input', (evt) => inputEventHandler.call(this, evt))
            .on('paste.stop', () => { })
            .on('keydown', (evt) => keydownEventHandler.call(this, evt))), (this.textlineEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'textline')), this.suggest.el, this.datepicker.el)
            .on('mousemove.stop', () => { })
            .on('mousedown.stop', () => { });
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-editor`).child(this.areaEl).hide();
        this.suggest.bindInputEvents(this.textEl);
        this.areaOffset = null;
        this.freeze = { w: 0, h: 0 };
        this.cell = null;
        this.inputText = '';
        this.change = () => { };
    }
    setFreezeLengths(width, height) {
        this.freeze.w = width;
        this.freeze.h = height;
    }
    clear() {
        // const { cell } = this;
        // const cellText = (cell && cell.text) || '';
        if (this.inputText !== '') {
            this.change('finished', this.inputText);
        }
        this.cell = null;
        this.areaOffset = null;
        this.inputText = '';
        this.el.hide();
        this.textEl.val('');
        this.textlineEl.html('');
        resetSuggestItems.call(this);
        this.datepicker.hide();
    }
    setOffset(offset, suggestPosition = 'top') {
        const { textEl, areaEl, suggest, freeze, el } = this;
        if (offset) {
            this.areaOffset = offset;
            const { left, top, width, height, l, t } = offset;
            // console.log('left:', left, ',top:', top, ', freeze:', freeze);
            const elOffset = { left: 0, top: 0 };
            // top left
            if (freeze.w > l && freeze.h > t) {
                //
            }
            else if (freeze.w < l && freeze.h < t) {
                elOffset.left = freeze.w;
                elOffset.top = freeze.h;
            }
            else if (freeze.w > l) {
                elOffset.top = freeze.h;
            }
            else if (freeze.h > t) {
                elOffset.left = freeze.w;
            }
            el.offset(elOffset);
            areaEl.offset({
                left: left - elOffset.left - 0.8,
                top: top - elOffset.top - 0.8,
            });
            textEl.offset({ width: width - 9 + 0.8, height: height - 3 + 0.8 });
            const sOffset = { left: 0 };
            sOffset[suggestPosition] = height;
            suggest.setOffset(sOffset);
            suggest.hide();
        }
    }
    setCell(cell, validator) {
        if (cell && cell.editable === false)
            return;
        // console.log('::', validator);
        const { el, datepicker, suggest } = this;
        el.show();
        this.cell = cell;
        const text = (cell && cell.text) || '';
        this.setText(text);
        this.validator = validator;
        if (validator) {
            const { type } = validator;
            if (type === 'date') {
                datepicker.show();
                if (!/^\s*$/.test(text)) {
                    datepicker.setValue(text);
                }
            }
            if (type === 'list') {
                suggest.setItems(validator.values());
                suggest.search('');
            }
        }
    }
    setText(text) {
        this.inputText = text;
        // console.log('text>>:', text);
        setText.call(this, text, text.length);
        resetTextareaSize.call(this);
    }
}


/***/ }),

/***/ "./src/component/element.ts":
/*!**********************************!*\
  !*** ./src/component/element.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Element": () => (/* binding */ Element),
/* harmony export */   "h": () => (/* binding */ h)
/* harmony export */ });
class Element {
    el;
    constructor(tag, className = '') {
        if (typeof tag === 'string') {
            this.el = document.createElement(tag);
            this.el.className = className;
        }
        else {
            this.el = tag;
        }
        // this.data = {};
    }
    data(key, value) {
        if (value !== undefined) {
            this.data[key] = value;
            return this;
        }
        return this.data[key];
    }
    on(eventNames, handler) {
        const [fen, ...oen] = eventNames.split('.');
        let eventName = fen;
        if (eventName === 'mousewheel' &&
            /Firefox/i.test(window.navigator.userAgent)) {
            eventName = 'DOMMouseScroll';
        }
        this.el.addEventListener(eventName, (evt) => {
            handler(evt);
            for (let i = 0; i < oen.length; i += 1) {
                const k = oen[i];
                if (k === 'left' && evt instanceof MouseEvent && evt.button !== 0) {
                    return;
                }
                if (k === 'right' && evt instanceof MouseEvent && evt.button !== 2) {
                    return;
                }
                if (k === 'stop') {
                    evt.stopPropagation();
                }
            }
        });
        return this;
    }
    offset(value) {
        if (value !== undefined) {
            Object.keys(value).forEach((k) => {
                this.css(k, `${value[k]}px`);
            });
            return this;
        }
        const { offsetTop, offsetLeft, offsetHeight, offsetWidth } = this.el;
        return {
            top: offsetTop,
            left: offsetLeft,
            height: offsetHeight,
            width: offsetWidth,
        };
    }
    scroll(v) {
        const { el } = this;
        if (v !== undefined) {
            if (v.left !== undefined) {
                el.scrollLeft = v.left;
            }
            if (v.top !== undefined) {
                el.scrollTop = v.top;
            }
        }
        return { left: el.scrollLeft, top: el.scrollTop };
    }
    box() {
        return this.el.getBoundingClientRect();
    }
    parent() {
        const parent = this.el.parentElement;
        return new Element(parent);
    }
    children(...eles) {
        if (arguments.length === 0) {
            return Array.from(this.el.children);
        }
        eles.forEach((ele) => this.child(ele));
        return this;
    }
    removeChild(el) {
        this.el.removeChild(el);
    }
    /*
    first() {
      return this.el.firstChild;
    }
  
    last() {
      return this.el.lastChild;
    }
  
    remove(ele) {
      return this.el.removeChild(ele);
    }
  
    prepend(ele) {
      const { el } = this;
      if (el.children.length > 0) {
        el.insertBefore(ele, el.firstChild);
      } else {
        el.appendChild(ele);
      }
      return this;
    }
  
    prev() {
      return this.el.previousSibling;
    }
  
    next() {
      return this.el.nextSibling;
    }
    */
    child(arg) {
        let ele;
        if (typeof arg === 'string') {
            ele = document.createTextNode(arg);
        }
        else if (arg instanceof Element) {
            ele = arg.el;
        }
        else {
            ele = arg;
        }
        this.el.appendChild(ele);
        return this;
    }
    contains(ele) {
        return this.el.contains(ele);
    }
    className(v) {
        if (v !== undefined) {
            this.el.className = v;
            return this;
        }
        return this.el.className;
    }
    addClass(name) {
        this.el.classList.add(name);
        return this;
    }
    hasClass(name) {
        return this.el.classList.contains(name);
    }
    removeClass(name) {
        this.el.classList.remove(name);
        return this;
    }
    toggle(cls = 'active') {
        return this.toggleClass(cls);
    }
    toggleClass(name) {
        return this.el.classList.toggle(name);
    }
    active(flag = true, cls = 'active') {
        if (flag)
            this.addClass(cls);
        else
            this.removeClass(cls);
        return this;
    }
    checked(flag = true) {
        this.active(flag, 'checked');
        return this;
    }
    disabled(flag = true) {
        if (flag)
            this.addClass('disabled');
        else
            this.removeClass('disabled');
        return this;
    }
    attr(key, value) {
        if (value !== undefined) {
            this.el.setAttribute(key, value);
        }
        else {
            if (typeof key === 'string') {
                return this.el.getAttribute(key);
            }
            Object.keys(key).forEach((k) => {
                this.el.setAttribute(k, key[k]);
            });
        }
        return this;
    }
    removeAttr(key) {
        this.el.removeAttribute(key);
        return this;
    }
    html(content) {
        if (content !== undefined) {
            this.el.innerHTML = content;
            return this;
        }
        return this.el.innerHTML;
    }
    val(v) {
        const el = this.el;
        if (v !== undefined) {
            el.value = v;
            return this;
        }
        return el.value;
    }
    focus() {
        this.el.focus();
    }
    cssRemoveKeys(...keys) {
        keys.forEach((k) => this.el.style.removeProperty(k));
        return this;
    }
    css(name, value) {
        if (value === undefined && typeof name !== 'string') {
            Object.keys(name).forEach((k) => {
                this.el.style[k] = name[k];
            });
            return this;
        }
        if (value !== undefined) {
            this.el.style[name] = value;
            return this;
        }
        return this.el.style[name];
    }
    computedStyle() {
        return window.getComputedStyle(this.el, null);
    }
    show() {
        this.css('display', 'block');
        return this;
    }
    hide() {
        this.css('display', 'none');
        return this;
    }
}
const h = (tag, className = '') => new Element(tag, className);



/***/ }),

/***/ "./src/component/event.ts":
/*!********************************!*\
  !*** ./src/component/event.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bind": () => (/* binding */ bind),
/* harmony export */   "bindClickoutside": () => (/* binding */ bindClickoutside),
/* harmony export */   "bindTouch": () => (/* binding */ bindTouch),
/* harmony export */   "createEventEmitter": () => (/* binding */ createEventEmitter),
/* harmony export */   "mouseMoveUp": () => (/* binding */ mouseMoveUp),
/* harmony export */   "unbind": () => (/* binding */ unbind),
/* harmony export */   "unbindClickoutside": () => (/* binding */ unbindClickoutside)
/* harmony export */ });
/* global window */
function bind(target, name, fn) {
    target.addEventListener(name, fn);
}
function unbind(target, name, fn) {
    target.removeEventListener(name, fn);
}
function unbindClickoutside(el) {
    if (el.xclickoutside) {
        unbind(window.document.body, 'click', el.xclickoutside);
        delete el.xclickoutside;
    }
}
// the left mouse button: mousedown → mouseup → click
// the right mouse button: mousedown → contenxtmenu → mouseup
// the right mouse button in firefox(>65.0): mousedown → contenxtmenu → mouseup → click on window
function bindClickoutside(el, cb) {
    el.xclickoutside = (evt) => {
        // ignore double click
        // console.log('evt:', evt);
        if (evt.detail === 2 || el.contains(evt.target))
            return;
        if (cb) {
            cb(el);
        }
        else {
            el.hide();
            unbindClickoutside(el);
        }
    };
    bind(window.document.body, 'click', el.xclickoutside);
}
function mouseMoveUp(target, movefunc, upfunc) {
    bind(target, 'mousemove', movefunc);
    const t = target;
    t.xEvtUp = (evt) => {
        // console.log('mouseup>>>');
        unbind(target, 'mousemove', movefunc);
        unbind(target, 'mouseup', target.xEvtUp);
        upfunc(evt);
    };
    bind(target, 'mouseup', target.xEvtUp);
}
function calTouchDirection(spanx, spany, evt, cb) {
    let direction = '';
    // console.log('spanx:', spanx, ', spany:', spany);
    if (Math.abs(spanx) > Math.abs(spany)) {
        // horizontal
        direction = spanx > 0 ? 'right' : 'left';
        cb(direction, spanx, evt);
    }
    else {
        // vertical
        direction = spany > 0 ? 'down' : 'up';
        cb(direction, spany, evt);
    }
}
// cb = (direction, distance) => {}
function bindTouch(target, { move, end }) {
    let startx = 0;
    let starty = 0;
    bind(target, 'touchstart', (evt) => {
        const { pageX, pageY } = evt.touches[0];
        startx = pageX;
        starty = pageY;
    });
    bind(target, 'touchmove', (evt) => {
        if (!move)
            return;
        const { pageX, pageY } = evt.changedTouches[0];
        const spanx = pageX - startx;
        const spany = pageY - starty;
        if (Math.abs(spanx) > 10 || Math.abs(spany) > 10) {
            // console.log('spanx:', spanx, ', spany:', spany);
            calTouchDirection(spanx, spany, evt, move);
            startx = pageX;
            starty = pageY;
        }
        evt.preventDefault();
    });
    bind(target, 'touchend', (evt) => {
        if (!end)
            return;
        const { pageX, pageY } = evt.changedTouches[0];
        const spanx = pageX - startx;
        const spany = pageY - starty;
        calTouchDirection(spanx, spany, evt, end);
    });
}
// eventemiter
function createEventEmitter() {
    const listeners = new Map();
    function on(eventName, callback) {
        const push = () => {
            const currentListener = listeners.get(eventName);
            return ((Array.isArray(currentListener) && currentListener.push(callback)) ||
                false);
        };
        const create = () => listeners.set(eventName, [].concat(callback));
        return (listeners.has(eventName) && push()) || create();
    }
    function fire(eventName, args) {
        const exec = () => {
            const currentListener = listeners.get(eventName);
            for (const callback of currentListener)
                callback.call(null, ...args);
        };
        return listeners.has(eventName) && exec();
    }
    function removeListener(eventName, callback) {
        const remove = () => {
            const currentListener = listeners.get(eventName);
            const idx = currentListener.indexOf(callback);
            return (idx >= 0 &&
                currentListener.splice(idx, 1) &&
                listeners.get(eventName).length === 0 &&
                listeners.delete(eventName));
        };
        return listeners.has(eventName) && remove();
    }
    function once(eventName, callback) {
        const execCalllback = (...args) => {
            callback.call(null, ...args);
            removeListener(eventName, execCalllback);
        };
        return on(eventName, execCalllback);
    }
    function removeAllListeners() {
        listeners.clear();
    }
    return {
        get current() {
            return listeners;
        },
        on,
        once,
        fire,
        removeListener,
        removeAllListeners,
    };
}


/***/ }),

/***/ "./src/component/form_field.ts":
/*!*************************************!*\
  !*** ./src/component/form_field.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FormField)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");



const patterns = {
    number: /(^\d+$)|(^\d+(\.\d{0,4})?$)/,
    date: /^\d{4}-\d{1,2}-\d{1,2}$/,
};
// rule: { required: false, type, pattern: // }
class FormField {
    label;
    rule;
    tip;
    input;
    el;
    constructor(input, rule, label, labelWidth) {
        this.label = '';
        this.rule = rule;
        if (label) {
            this.label = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('label', 'label').css('width', `${labelWidth}px`).html(label);
        }
        this.tip = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'tip').child('tip').hide();
        this.input = input;
        this.input.vchange = () => this.validate();
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-form-field`)
            .children(this.label, input.el, this.tip);
    }
    isShow() {
        return this.el.css('display') !== 'none';
    }
    show() {
        this.el.show();
    }
    hide() {
        this.el.hide();
        return this;
    }
    val(v) {
        return this.input.val(v);
    }
    hint(hint) {
        this.input.hint(hint);
    }
    validate() {
        const { input, rule, tip, el, } = this;
        const v = input.val();
        if (rule.required) {
            if (/^\s*$/.test(v)) {
                tip.html((0,_locale_locale__WEBPACK_IMPORTED_MODULE_2__.t)('validation.required'));
                el.addClass('error');
                return false;
            }
        }
        if (rule.type || rule.pattern) {
            const pattern = rule.pattern || patterns[rule.type];
            if (!pattern.test(v)) {
                tip.html((0,_locale_locale__WEBPACK_IMPORTED_MODULE_2__.t)('validation.notMatch'));
                el.addClass('error');
                return false;
            }
        }
        el.removeClass('error');
        return true;
    }
}


/***/ }),

/***/ "./src/component/form_input.ts":
/*!*************************************!*\
  !*** ./src/component/form_input.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FormInput)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");


class FormInput {
    vchange;
    el;
    input;
    constructor(width, hint) {
        this.vchange = () => { };
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-form-input`);
        this.input = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('input', '').css('width', width)
            .on('input', evt => this.vchange(evt))
            .attr('placeholder', hint);
        this.el.child(this.input);
    }
    focus() {
        setTimeout(() => {
            this.input.el.focus();
        }, 10);
    }
    hint(v) {
        this.input.attr('placeholder', v);
    }
    val(v) {
        return this.input.val(v);
    }
}


/***/ }),

/***/ "./src/component/form_select.ts":
/*!**************************************!*\
  !*** ./src/component/form_select.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FormSelect)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _suggest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./suggest */ "./src/component/suggest.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");



class FormSelect {
    key;
    getTitle;
    vchange;
    el;
    suggest;
    itemEl;
    constructor(key, items, width, getTitle = (it) => it, change = (key) => { }) {
        this.key = key;
        this.getTitle = getTitle;
        this.vchange = () => { };
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-form-select`);
        this.suggest = new _suggest__WEBPACK_IMPORTED_MODULE_1__["default"](items.map((it) => {
            return { key: it, title: this.getTitle(it) };
        }), (it) => {
            this.itemClick(it.key);
            change(it.key);
            this.vchange(it.key);
        }, width);
        this.el
            .children((this.itemEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'input-text').html(this.getTitle(key))), this.suggest.el)
            .on('click', () => this.show());
    }
    show() {
        this.suggest.search('');
    }
    itemClick(it) {
        this.key = it;
        this.itemEl.html(this.getTitle(it));
    }
    val(v) {
        if (v !== undefined) {
            this.key = v;
            this.itemEl.html(this.getTitle(v));
            return this;
        }
        return this.key;
    }
}


/***/ }),

/***/ "./src/component/icon.ts":
/*!*******************************!*\
  !*** ./src/component/icon.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Icon)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");


class Icon extends _element__WEBPACK_IMPORTED_MODULE_0__.Element {
    iconNameEl;
    constructor(name) {
        super('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-icon`);
        this.iconNameEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-icon-img ${name}`);
        this.child(this.iconNameEl);
    }
    setName(name) {
        this.iconNameEl.className(`${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-icon-img ${name}`);
    }
}


/***/ }),

/***/ "./src/component/message.ts":
/*!**********************************!*\
  !*** ./src/component/message.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "xtoast": () => (/* binding */ xtoast)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* global document */



function xtoast(title, content) {
    const el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-toast`);
    const dimmer = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-dimmer active`);
    const remove = () => {
        document.body.removeChild(el.el);
        document.body.removeChild(dimmer.el);
    };
    el.children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-toast-header`).children(new _icon__WEBPACK_IMPORTED_MODULE_1__["default"]('close').on('click.stop', () => remove()), title), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-toast-content`).html(content));
    document.body.appendChild(el.el);
    document.body.appendChild(dimmer.el);
    // set offset
    const { width, height } = el.box();
    const { clientHeight, clientWidth } = document.documentElement;
    el.offset({
        left: (clientWidth - width) / 2,
        top: (clientHeight - height) / 3,
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});


/***/ }),

/***/ "./src/component/modal.ts":
/*!********************************!*\
  !*** ./src/component/modal.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Modal)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon */ "./src/component/icon.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./event */ "./src/component/event.ts");
/* global document */
/* global window */




class Modal {
    title;
    el;
    dimmer;
    constructor(title, content, width = '600px') {
        this.title = title;
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-modal`)
            .css('width', width)
            .children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-modal-header`).children(new _icon__WEBPACK_IMPORTED_MODULE_1__["default"]('close').on('click.stop', () => this.hide()), this.title), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-modal-content`).children(...content))
            .hide();
    }
    show() {
        // dimmer
        this.dimmer = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-dimmer active`);
        document.body.appendChild(this.dimmer.el);
        const { width, height } = this.el.show().box();
        const { clientHeight, clientWidth } = document.documentElement;
        this.el.offset({
            left: (clientWidth - width) / 2,
            top: (clientHeight - height) / 3,
        });
        window.xkeydownEsc = (evt) => {
            if (evt.keyCode === 27) {
                this.hide();
            }
        };
        (0,_event__WEBPACK_IMPORTED_MODULE_3__.bind)(window, 'keydown', window.xkeydownEsc);
    }
    hide() {
        this.el.hide();
        document.body.removeChild(this.dimmer.el);
        (0,_event__WEBPACK_IMPORTED_MODULE_3__.unbind)(window, 'keydown', window.xkeydownEsc);
        delete window.xkeydownEsc;
    }
}


/***/ }),

/***/ "./src/component/modal_validation.ts":
/*!*******************************************!*\
  !*** ./src/component/modal_validation.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ModalValidation)
/* harmony export */ });
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ "./src/component/modal.ts");
/* harmony import */ var _form_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./form_input */ "./src/component/form_input.ts");
/* harmony import */ var _form_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./form_select */ "./src/component/form_select.ts");
/* harmony import */ var _form_field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./form_field */ "./src/component/form_field.ts");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./button */ "./src/component/button.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../config */ "./src/config.ts");








const fieldLabelWidth = 100;
class ModalValidation extends _modal__WEBPACK_IMPORTED_MODULE_0__["default"] {
    mf;
    rf;
    cf;
    of;
    minvf;
    maxvf;
    vf;
    svf;
    change;
    constructor() {
        const mf = new _form_field__WEBPACK_IMPORTED_MODULE_3__["default"](new _form_select__WEBPACK_IMPORTED_MODULE_2__["default"]('cell', ['cell'], // cell|row|column
        '100%', (it) => (0,_locale_locale__WEBPACK_IMPORTED_MODULE_5__.t)(`dataValidation.modeType.${it}`)), { required: true }, `${(0,_locale_locale__WEBPACK_IMPORTED_MODULE_5__.t)('dataValidation.range')}:`, fieldLabelWidth);
        const rf = new _form_field__WEBPACK_IMPORTED_MODULE_3__["default"](new _form_input__WEBPACK_IMPORTED_MODULE_1__["default"]('120px', 'E3 or E3:F12'), {
            required: true,
            pattern: /^([A-Z]{1,2}[1-9]\d*)(:[A-Z]{1,2}[1-9]\d*)?$/,
        });
        const cf = new _form_field__WEBPACK_IMPORTED_MODULE_3__["default"](new _form_select__WEBPACK_IMPORTED_MODULE_2__["default"]('list', ['list', 'number', 'date', 'phone', 'email'], '100%', (it) => (0,_locale_locale__WEBPACK_IMPORTED_MODULE_5__.t)(`dataValidation.type.${it}`), (it) => this.criteriaSelected(it)), { required: true }, `${(0,_locale_locale__WEBPACK_IMPORTED_MODULE_5__.t)('dataValidation.criteria')}:`, fieldLabelWidth);
        // operator
        const of = new _form_field__WEBPACK_IMPORTED_MODULE_3__["default"](new _form_select__WEBPACK_IMPORTED_MODULE_2__["default"]('be', ['be', 'nbe', 'eq', 'neq', 'lt', 'lte', 'gt', 'gte'], '160px', (it) => (0,_locale_locale__WEBPACK_IMPORTED_MODULE_5__.t)(`dataValidation.operator.${it}`), (it) => this.criteriaOperatorSelected(it)), { required: true }).hide();
        // min, max
        const minvf = new _form_field__WEBPACK_IMPORTED_MODULE_3__["default"](new _form_input__WEBPACK_IMPORTED_MODULE_1__["default"]('70px', '10'), {
            required: true,
        }).hide();
        const maxvf = new _form_field__WEBPACK_IMPORTED_MODULE_3__["default"](new _form_input__WEBPACK_IMPORTED_MODULE_1__["default"]('70px', '100'), {
            required: true,
            type: 'number',
        }).hide();
        // value
        const svf = new _form_field__WEBPACK_IMPORTED_MODULE_3__["default"](new _form_input__WEBPACK_IMPORTED_MODULE_1__["default"]('120px', 'a,b,c'), {
            required: true,
        });
        const vf = new _form_field__WEBPACK_IMPORTED_MODULE_3__["default"](new _form_input__WEBPACK_IMPORTED_MODULE_1__["default"]('70px', '10'), {
            required: true,
            type: 'number',
        }).hide();
        super((0,_locale_locale__WEBPACK_IMPORTED_MODULE_5__.t)('contextmenu.validation'), [
            (0,_element__WEBPACK_IMPORTED_MODULE_6__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_7__.cssPrefix}-form-fields`).children(mf.el, rf.el),
            (0,_element__WEBPACK_IMPORTED_MODULE_6__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_7__.cssPrefix}-form-fields`).children(cf.el, of.el, minvf.el, maxvf.el, vf.el, svf.el),
            (0,_element__WEBPACK_IMPORTED_MODULE_6__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_7__.cssPrefix}-buttons`).children(new _button__WEBPACK_IMPORTED_MODULE_4__["default"]('cancel').on('click', () => this.btnClick('cancel')), new _button__WEBPACK_IMPORTED_MODULE_4__["default"]('remove').on('click', () => this.btnClick('remove')), new _button__WEBPACK_IMPORTED_MODULE_4__["default"]('save', 'primary').on('click', () => this.btnClick('save'))),
        ]);
        this.mf = mf;
        this.rf = rf;
        this.cf = cf;
        this.of = of;
        this.minvf = minvf;
        this.maxvf = maxvf;
        this.vf = vf;
        this.svf = svf;
        this.change = () => { };
    }
    showVf(it) {
        const hint = it === 'date' ? '2018-11-12' : '10';
        const { vf } = this;
        vf.input.hint(hint);
        vf.show();
    }
    criteriaSelected(it) {
        const { of, minvf, maxvf, vf, svf } = this;
        if (it === 'date' || it === 'number') {
            of.show();
            minvf.rule.type = it;
            maxvf.rule.type = it;
            if (it === 'date') {
                minvf.hint('2018-11-12');
                maxvf.hint('2019-11-12');
            }
            else {
                minvf.hint('10');
                maxvf.hint('100');
            }
            minvf.show();
            maxvf.show();
            vf.hide();
            svf.hide();
        }
        else {
            if (it === 'list') {
                svf.show();
            }
            else {
                svf.hide();
            }
            vf.hide();
            of.hide();
            minvf.hide();
            maxvf.hide();
        }
    }
    criteriaOperatorSelected(it) {
        if (!it)
            return;
        const { minvf, maxvf, vf } = this;
        if (it === 'be' || it === 'nbe') {
            minvf.show();
            maxvf.show();
            vf.hide();
        }
        else {
            const type = this.cf.val();
            vf.rule.type = type;
            if (type === 'date') {
                vf.hint('2018-11-12');
            }
            else {
                vf.hint('10');
            }
            vf.show();
            minvf.hide();
            maxvf.hide();
        }
    }
    btnClick(action) {
        if (action === 'cancel') {
            this.hide();
        }
        else if (action === 'remove') {
            this.change('remove');
            this.hide();
        }
        else if (action === 'save') {
            // validate
            const attrs = ['mf', 'rf', 'cf', 'of', 'svf', 'vf', 'minvf', 'maxvf'];
            for (let i = 0; i < attrs.length; i += 1) {
                const field = this[attrs[i]];
                // console.log('field:', field);
                if (field.isShow()) {
                    // console.log('it:', it);
                    if (!field.validate())
                        return;
                }
            }
            const mode = this.mf.val();
            const ref = this.rf.val();
            const type = this.cf.val();
            const operator = this.of.val();
            let value = this.svf.val();
            if (type === 'number' || type === 'date') {
                if (operator === 'be' || operator === 'nbe') {
                    value = [this.minvf.val(), this.maxvf.val()];
                }
                else {
                    value = this.vf.val();
                }
            }
            // console.log(mode, ref, type, operator, value);
            this.change('save', mode, ref, {
                type,
                operator,
                required: false,
                value,
            });
            this.hide();
        }
    }
    hide() {
        throw new Error('Method not implemented.');
    }
    // validation: { mode, ref, validator }
    setValue(v) {
        if (v) {
            const { mf, rf, cf, of, svf, vf, minvf, maxvf } = this;
            const { mode, ref, validator } = v;
            const { type, operator, value } = validator || { type: 'list' };
            mf.val(mode || 'cell');
            rf.val(ref);
            cf.val(type);
            of.val(operator);
            if (Array.isArray(value)) {
                minvf.val(value[0]);
                maxvf.val(value[1]);
            }
            else {
                svf.val(value || '');
                vf.val(value || '');
            }
            this.criteriaSelected(type);
            this.criteriaOperatorSelected(operator);
        }
        this.show();
    }
    show() {
        throw new Error('Method not implemented.');
    }
}


/***/ }),

/***/ "./src/component/print.ts":
/*!********************************!*\
  !*** ./src/component/print.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Print)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./button */ "./src/component/button.ts");
/* harmony import */ var _canvas_draw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../canvas/draw */ "./src/canvas/draw.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./table */ "./src/component/table.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");
/* global window document */






// resolution: 72 => 595 x 842
// 150 => 1240 x 1754
// 200 => 1654 x 2339
// 300 => 2479 x 3508
// 96 * cm / 2.54 , 96 * cm / 2.54
const PAGER_SIZES = [
    ['A3', 11.69, 16.54],
    ['A4', 8.27, 11.69],
    ['A5', 5.83, 8.27],
    ['B4', 9.84, 13.90],
    ['B5', 6.93, 9.84],
];
const PAGER_ORIENTATIONS = ['landscape', 'portrait'];
function inches2px(inc) {
    return Math.floor(96 * inc);
}
function btnClick(type) {
    if (type === 'cancel') {
        this.el.hide();
    }
    else {
        this.toPrint();
    }
}
function pagerSizeChange(evt) {
    const { paper } = this;
    const { value } = evt.target;
    const ps = PAGER_SIZES[value];
    paper.w = inches2px(ps[1]);
    paper.h = inches2px(ps[2]);
    // console.log('paper:', ps, paper);
    this.preview();
}
function pagerOrientationChange(evt) {
    const { paper } = this;
    const { value } = evt.target;
    const v = PAGER_ORIENTATIONS[value];
    paper.orientation = v;
    this.preview();
}
class Print {
    paper;
    data;
    el;
    contentEl;
    canvases;
    constructor(data) {
        this.paper = {
            w: inches2px(PAGER_SIZES[0][1]),
            h: inches2px(PAGER_SIZES[0][2]),
            padding: 50,
            orientation: PAGER_ORIENTATIONS[0],
            get width() {
                return this.orientation === 'landscape' ? this.h : this.w;
            },
            get height() {
                return this.orientation === 'landscape' ? this.w : this.h;
            },
        };
        this.data = data;
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-print`)
            .children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-print-bar`)
            .children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', '-title').child('Print settings'), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', '-right').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-buttons`).children(new _button__WEBPACK_IMPORTED_MODULE_2__["default"]('cancel').on('click', btnClick.bind(this, 'cancel')), new _button__WEBPACK_IMPORTED_MODULE_2__["default"]('next', 'primary').on('click', btnClick.bind(this, 'next'))))), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-print-content`)
            .children(this.contentEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', '-content'), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', '-sider').child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('form', '').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('fieldset', '').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('label', '').child(`${(0,_locale_locale__WEBPACK_IMPORTED_MODULE_5__.t)('print.size')}`), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('select', '').children(...PAGER_SIZES.map((it, index) => (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('option', '').attr('value', index).child(`${it[0]} ( ${it[1]}''x${it[2]}'' )`))).on('change', pagerSizeChange.bind(this))), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('fieldset', '').children((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('label', '').child(`${(0,_locale_locale__WEBPACK_IMPORTED_MODULE_5__.t)('print.orientation')}`), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('select', '').children(...PAGER_ORIENTATIONS.map((it, index) => (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('option', '').attr('value', index).child(`${(0,_locale_locale__WEBPACK_IMPORTED_MODULE_5__.t)('print.orientations')[index]}`))).on('change', pagerOrientationChange.bind(this))))))).hide();
    }
    resetData(data) {
        this.data = data;
    }
    preview() {
        const { data, paper } = this;
        const { width, height, padding } = paper;
        const iwidth = width - padding * 2;
        const iheight = height - padding * 2;
        const cr = data.contentRange();
        const pages = Math.floor(cr.h / iheight) + 1;
        const scale = iwidth / cr.w;
        let left = padding;
        const top = padding;
        if (scale > 1) {
            left += (iwidth - cr.w) / 2;
        }
        let ri = 0;
        let yoffset = 0;
        this.contentEl.html('');
        this.canvases = [];
        const mViewRange = {
            sri: 0,
            sci: 0,
            eri: 0,
            eci: 0,
        };
        for (let i = 0; i < pages; i += 1) {
            let th = 0;
            let yo = 0;
            const wrap = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-canvas-card`);
            const canvas = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('canvas', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-canvas`);
            this.canvases.push(canvas.el);
            const draw = new _canvas_draw__WEBPACK_IMPORTED_MODULE_3__.Draw(canvas.el, width, height);
            // cell-content
            draw.save();
            draw.translate(left, top);
            if (scale < 1)
                draw.scale(scale, scale);
            // console.log('ri:', ri, cr.eri, yoffset);
            for (; ri <= cr.eri; ri += 1) {
                const rh = data.rows.getHeight(ri);
                th += rh;
                if (th < iheight) {
                    for (let ci = 0; ci <= cr.eci; ci += 1) {
                        (0,_table__WEBPACK_IMPORTED_MODULE_4__.renderCell)(draw, data, ri, ci, yoffset);
                        mViewRange.eci = ci;
                    }
                }
                else {
                    yo = -(th - rh);
                    break;
                }
            }
            mViewRange.eri = ri;
            draw.restore();
            // merge-cell
            draw.save();
            draw.translate(left, top);
            if (scale < 1)
                draw.scale(scale, scale);
            const yof = yoffset;
            data.eachMergesInView(mViewRange, ({ sri, sci }) => {
                (0,_table__WEBPACK_IMPORTED_MODULE_4__.renderCell)(draw, data, sri, sci, yof);
            });
            draw.restore();
            mViewRange.sri = mViewRange.eri;
            mViewRange.sci = mViewRange.eci;
            yoffset += yo;
            this.contentEl.child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-canvas-card-wraper`).child(wrap.child(canvas)));
        }
        this.el.show();
    }
    toPrint() {
        this.el.hide();
        const { paper } = this;
        const iframe = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('iframe', '').hide();
        const el = iframe.el;
        window.document.body.appendChild(el);
        const { contentWindow } = el;
        const idoc = contentWindow.document;
        const style = document.createElement('style');
        style.innerHTML = `
      @page { size: ${paper.width}px ${paper.height}px; };
      canvas {
        page-break-before: auto;        
        page-break-after: always;
        image-rendering: pixelated;
      };
    `;
        idoc.head.appendChild(style);
        this.canvases.forEach((it) => {
            const cn = it.cloneNode(false);
            const ctx = cn.getContext('2d');
            // ctx.imageSmoothingEnabled = true;
            ctx.drawImage(it, 0, 0);
            idoc.body.appendChild(cn);
        });
        contentWindow.print();
    }
}


/***/ }),

/***/ "./src/component/resizer.ts":
/*!**********************************!*\
  !*** ./src/component/resizer.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Resizer)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event */ "./src/component/event.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* global window */



class Resizer {
    moving;
    vertical;
    el;
    unhideHoverEl;
    hoverEl;
    lineEl;
    cRect;
    finishedFn;
    minDistance;
    unhideFn;
    unhideIndex;
    constructor(vertical = false, minDistance) {
        this.moving = false;
        this.vertical = vertical;
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-resizer ${vertical ? 'vertical' : 'horizontal'}`)
            .children((this.unhideHoverEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-resizer-hover`)
            .on('dblclick.stop', (evt) => this.mousedblclickHandler())
            .css('position', 'absolute')
            .hide()), (this.hoverEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-resizer-hover`).on('mousedown.stop', (evt) => this.mousedownHandler(evt))), (this.lineEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-resizer-line`).hide()))
            .hide();
        // cell rect
        this.cRect = null;
        this.finishedFn = null;
        this.minDistance = minDistance;
        this.unhideFn = () => { };
    }
    showUnhide(index) {
        this.unhideIndex = index;
        this.unhideHoverEl.show();
    }
    hideUnhide() {
        this.unhideHoverEl.hide();
    }
    // rect : {top, left, width, height}
    // line : {width, height}
    show(rect, line) {
        const { moving, vertical, hoverEl, lineEl, el, unhideHoverEl } = this;
        if (moving)
            return;
        this.cRect = rect;
        const { left, top, width, height } = rect;
        el.offset({
            left: vertical ? left + width - 5 : left,
            top: vertical ? top : top + height - 5,
        }).show();
        hoverEl.offset({
            width: vertical ? 5 : width,
            height: vertical ? height : 5,
        });
        lineEl.offset({
            width: vertical ? 0 : line.width,
            height: vertical ? line.height : 0,
        });
        unhideHoverEl.offset({
            left: vertical ? 5 - width : left,
            top: vertical ? top : 5 - height,
            width: vertical ? 5 : width,
            height: vertical ? height : 5,
        });
    }
    hide() {
        this.el
            .offset({
            left: 0,
            top: 0,
        })
            .hide();
        this.hideUnhide();
    }
    mousedblclickHandler() {
        if (this.unhideIndex) {
            this.unhideFn(this.unhideIndex);
        }
    }
    mousedownHandler(evt) {
        let startEvt = evt;
        const { el, lineEl, cRect, vertical, minDistance } = this;
        let distance = vertical ? cRect.width : cRect.height;
        // console.log('distance:', distance);
        lineEl.show();
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.mouseMoveUp)(window, (e) => {
            this.moving = true;
            if (startEvt !== null && e.buttons === 1) {
                // console.log('top:', top, ', left:', top, ', cRect:', cRect);
                if (vertical) {
                    distance += e.movementX;
                    if (distance > minDistance) {
                        el.css('left', `${cRect.left + distance}px`);
                    }
                }
                else {
                    distance += e.movementY;
                    if (distance > minDistance) {
                        el.css('top', `${cRect.top + distance}px`);
                    }
                }
                startEvt = e;
            }
        }, () => {
            startEvt = null;
            lineEl.hide();
            this.moving = false;
            this.hide();
            if (this.finishedFn) {
                if (distance < minDistance)
                    distance = minDistance;
                this.finishedFn(cRect, distance);
            }
        });
    }
}


/***/ }),

/***/ "./src/component/scrollbar.ts":
/*!************************************!*\
  !*** ./src/component/scrollbar.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Scrollbar)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");


class Scrollbar {
    vertical;
    moveFn;
    el;
    contentEl;
    constructor(vertical) {
        this.vertical = vertical;
        this.moveFn = null;
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-scrollbar ${vertical ? 'vertical' : 'horizontal'}`)
            .child(this.contentEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', ''))
            .on('mousemove.stop', () => { })
            .on('scroll.stop', (evt) => {
            const { scrollTop, scrollLeft } = evt.target;
            // console.log('scrollTop:', scrollTop);
            if (this.moveFn) {
                this.moveFn(this.vertical ? scrollTop : scrollLeft, evt);
            }
            // console.log('evt:::', evt);
        });
    }
    move(v) {
        this.el.scroll(v);
        return this;
    }
    scroll() {
        return this.el.scroll();
    }
    set(distance, contentDistance) {
        const d = distance - 1;
        // console.log('distance:', distance, ', contentDistance:', contentDistance);
        if (contentDistance > d) {
            const cssKey = this.vertical ? 'height' : 'width';
            // console.log('d:', d);
            this.el.css(cssKey, `${d - 15}px`).show();
            this.contentEl
                .css(this.vertical ? 'width' : 'height', '1px')
                .css(cssKey, `${contentDistance}px`);
        }
        else {
            this.el.hide();
        }
        return this;
    }
}


/***/ }),

/***/ "./src/component/selector.ts":
/*!***********************************!*\
  !*** ./src/component/selector.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Selector)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _core_cell_range__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/cell_range */ "./src/core/cell_range.ts");



const selectorHeightBorderWidth = 2 * 2 - 1;
let startZIndex = 10;
class SelectorElement {
    useHideInput;
    autoFocus;
    inputChange;
    cornerEl;
    areaEl;
    clipboardEl;
    autofillEl;
    el;
    hideInput;
    hideInputDiv;
    constructor(useHideInput = false, autoFocus = true) {
        this.useHideInput = useHideInput;
        this.autoFocus = autoFocus;
        this.inputChange = () => { };
        this.cornerEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-selector-corner`);
        this.areaEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-selector-area`)
            .child(this.cornerEl).hide();
        this.clipboardEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-selector-clipboard`).hide();
        this.autofillEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-selector-autofill`).hide();
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-selector`)
            .css('z-index', `${startZIndex}`)
            .children(this.areaEl, this.clipboardEl, this.autofillEl)
            .hide();
        if (useHideInput) {
            this.hideInput = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('input', '')
                .on('compositionend', (evt) => {
                this.inputChange(evt.target.value);
            });
            this.el.child(this.hideInputDiv = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'hide-input').child(this.hideInput));
            this.el.child(this.hideInputDiv = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'hide-input').child(this.hideInput));
        }
        startZIndex += 1;
    }
    setOffset(v) {
        this.el.offset(v).show();
        return this;
    }
    hide() {
        this.el.hide();
        return this;
    }
    setAreaOffset(v) {
        const { left, top, width, height, } = v;
        const of = {
            width: width - selectorHeightBorderWidth + 0.8,
            height: height - selectorHeightBorderWidth + 0.8,
            left: left - 0.8,
            top: top - 0.8,
        };
        this.areaEl.offset(of).show();
        if (this.useHideInput) {
            this.hideInputDiv.offset(of);
            if (this.autoFocus) {
                this.hideInput.val('').focus();
            }
            else {
                this.hideInput.val('');
            }
        }
    }
    setClipboardOffset(v) {
        const { left, top, width, height, } = v;
        this.clipboardEl.offset({
            left,
            top,
            width: width - 5,
            height: height - 5,
        });
    }
    showAutofill(v) {
        const { left, top, width, height, } = v;
        this.autofillEl.offset({
            width: width - selectorHeightBorderWidth,
            height: height - selectorHeightBorderWidth,
            left,
            top,
        }).show();
    }
    hideAutofill() {
        this.autofillEl.hide();
    }
    showClipboard() {
        this.clipboardEl.show();
    }
    hideClipboard() {
        this.clipboardEl.hide();
    }
}
function calBRAreaOffset(offset) {
    const { data } = this;
    const { left, top, width, height, scroll, l, t, } = offset;
    const ftwidth = data.freezeTotalWidth();
    const ftheight = data.freezeTotalHeight();
    let left0 = left - ftwidth;
    if (ftwidth > l)
        left0 -= scroll.x;
    let top0 = top - ftheight;
    if (ftheight > t)
        top0 -= scroll.y;
    return {
        left: left0,
        top: top0,
        width,
        height,
    };
}
function calTAreaOffset(offset) {
    const { data } = this;
    const { left, width, height, l, t, scroll, } = offset;
    const ftwidth = data.freezeTotalWidth();
    let left0 = left - ftwidth;
    if (ftwidth > l)
        left0 -= scroll.x;
    return {
        left: left0, top: t, width, height,
    };
}
function calLAreaOffset(offset) {
    const { data } = this;
    const { top, width, height, l, t, scroll, } = offset;
    const ftheight = data.freezeTotalHeight();
    let top0 = top - ftheight;
    // console.log('ftheight:', ftheight, ', t:', t);
    if (ftheight > t)
        top0 -= scroll.y;
    return {
        left: l, top: top0, width, height,
    };
}
function setBRAreaOffset(offset) {
    const { br } = this;
    br.setAreaOffset(calBRAreaOffset.call(this, offset));
}
function setTLAreaOffset(offset) {
    const { tl } = this;
    tl.setAreaOffset(offset);
}
function setTAreaOffset(offset) {
    const { t } = this;
    t.setAreaOffset(calTAreaOffset.call(this, offset));
}
function setLAreaOffset(offset) {
    const { l } = this;
    l.setAreaOffset(calLAreaOffset.call(this, offset));
}
function setLClipboardOffset(offset) {
    const { l } = this;
    l.setClipboardOffset(calLAreaOffset.call(this, offset));
}
function setBRClipboardOffset(offset) {
    const { br } = this;
    br.setClipboardOffset(calBRAreaOffset.call(this, offset));
}
function setTLClipboardOffset(offset) {
    const { tl } = this;
    tl.setClipboardOffset(offset);
}
function setTClipboardOffset(offset) {
    const { t } = this;
    t.setClipboardOffset(calTAreaOffset.call(this, offset));
}
function setAllAreaOffset(offset) {
    setBRAreaOffset.call(this, offset);
    setTLAreaOffset.call(this, offset);
    setTAreaOffset.call(this, offset);
    setLAreaOffset.call(this, offset);
}
function setAllClipboardOffset(offset) {
    setBRClipboardOffset.call(this, offset);
    setTLClipboardOffset.call(this, offset);
    setTClipboardOffset.call(this, offset);
    setLClipboardOffset.call(this, offset);
}
class Selector {
    inputChange;
    data;
    br;
    t;
    l;
    tl;
    offset;
    areaOffset;
    indexes;
    range;
    arange;
    el;
    lastri;
    lastci;
    moveIndexes;
    constructor(data) {
        const { autoFocus } = data.settings;
        this.inputChange = () => { };
        this.data = data;
        this.br = new SelectorElement(true, autoFocus);
        this.t = new SelectorElement();
        this.l = new SelectorElement();
        this.tl = new SelectorElement();
        this.br.inputChange = (v) => {
            this.inputChange(v);
        };
        this.br.el.show();
        this.offset = null;
        this.areaOffset = null;
        this.indexes = null;
        this.range = null;
        this.arange = null;
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_1__.cssPrefix}-selectors`)
            .children(this.tl.el, this.t.el, this.l.el, this.br.el).hide();
        // for performance
        this.lastri = -1;
        this.lastci = -1;
        startZIndex += 1;
    }
    resetData(data) {
        this.data = data;
        this.range = data.selector.range;
        this.resetAreaOffset();
    }
    hide() {
        this.el.hide();
    }
    resetOffset() {
        const { data, tl, t, l, br, } = this;
        const freezeHeight = data.freezeTotalHeight();
        const freezeWidth = data.freezeTotalWidth();
        if (freezeHeight > 0 || freezeWidth > 0) {
            tl.setOffset({ width: freezeWidth, height: freezeHeight });
            t.setOffset({ left: freezeWidth, height: freezeHeight });
            l.setOffset({ top: freezeHeight, width: freezeWidth });
            br.setOffset({ left: freezeWidth, top: freezeHeight });
        }
        else {
            tl.hide();
            t.hide();
            l.hide();
            br.setOffset({ left: 0, top: 0 });
        }
    }
    resetAreaOffset() {
        // console.log('offset:', offset);
        const offset = this.data.getSelectedRect();
        const coffset = this.data.getClipboardRect();
        setAllAreaOffset.call(this, offset);
        setAllClipboardOffset.call(this, coffset);
        this.resetOffset();
    }
    resetBRTAreaOffset() {
        const offset = this.data.getSelectedRect();
        const coffset = this.data.getClipboardRect();
        setBRAreaOffset.call(this, offset);
        setTAreaOffset.call(this, offset);
        setBRClipboardOffset.call(this, coffset);
        setTClipboardOffset.call(this, coffset);
        this.resetOffset();
    }
    resetBRLAreaOffset() {
        const offset = this.data.getSelectedRect();
        const coffset = this.data.getClipboardRect();
        setBRAreaOffset.call(this, offset);
        setLAreaOffset.call(this, offset);
        setBRClipboardOffset.call(this, coffset);
        setLClipboardOffset.call(this, coffset);
        this.resetOffset();
    }
    set(ri, ci, indexesUpdated = true) {
        const { data } = this;
        const cellRange = data.calSelectedRangeByStart(ri, ci);
        const { sri, sci } = cellRange;
        if (indexesUpdated) {
            let [cri, cci] = [ri, ci];
            if (ri < 0)
                cri = 0;
            if (ci < 0)
                cci = 0;
            data.selector.setIndexes(cri, cci);
            this.indexes = [cri, cci];
        }
        this.moveIndexes = [sri, sci];
        // this.sIndexes = sIndexes;
        // this.eIndexes = eIndexes;
        this.range = cellRange;
        this.resetAreaOffset();
        this.el.show();
    }
    setEnd(ri, ci, moving = true) {
        const { data, lastri, lastci } = this;
        if (moving) {
            if (ri === lastri && ci === lastci)
                return;
            this.lastri = ri;
            this.lastci = ci;
        }
        this.range = data.calSelectedRangeByEnd(ri, ci);
        setAllAreaOffset.call(this, this.data.getSelectedRect());
    }
    reset() {
        // console.log('::::', this.data);
        const { eri, eci } = this.data.selector.range;
        this.setEnd(eri, eci);
    }
    showAutofill(ri, ci) {
        if (ri === -1 && ci === -1)
            return;
        // console.log('ri:', ri, ', ci:', ci);
        // const [sri, sci] = this.sIndexes;
        // const [eri, eci] = this.eIndexes;
        const { sri, sci, eri, eci, } = this.range;
        const [nri, nci] = [ri, ci];
        // const rn = eri - sri;
        // const cn = eci - sci;
        const srn = sri - ri;
        const scn = sci - ci;
        const ern = eri - ri;
        const ecn = eci - ci;
        if (scn > 0) {
            // left
            // console.log('left');
            this.arange = new _core_cell_range__WEBPACK_IMPORTED_MODULE_2__.CellRange(sri, nci, eri, sci - 1);
            // this.saIndexes = [sri, nci];
            // this.eaIndexes = [eri, sci - 1];
            // data.calRangeIndexes2(
        }
        else if (srn > 0) {
            // top
            // console.log('top');
            // nri = sri;
            this.arange = new _core_cell_range__WEBPACK_IMPORTED_MODULE_2__.CellRange(nri, sci, sri - 1, eci);
            // this.saIndexes = [nri, sci];
            // this.eaIndexes = [sri - 1, eci];
        }
        else if (ecn < 0) {
            // right
            // console.log('right');
            // nci = eci;
            this.arange = new _core_cell_range__WEBPACK_IMPORTED_MODULE_2__.CellRange(sri, eci + 1, eri, nci);
            // this.saIndexes = [sri, eci + 1];
            // this.eaIndexes = [eri, nci];
        }
        else if (ern < 0) {
            // bottom
            // console.log('bottom');
            // nri = eri;
            this.arange = new _core_cell_range__WEBPACK_IMPORTED_MODULE_2__.CellRange(eri + 1, sci, nri, eci);
            // this.saIndexes = [eri + 1, sci];
            // this.eaIndexes = [nri, eci];
        }
        else {
            // console.log('else:');
            this.arange = null;
            // this.saIndexes = null;
            // this.eaIndexes = null;
            return;
        }
        if (this.arange !== null) {
            // console.log(this.saIndexes, ':', this.eaIndexes);
            const offset = this.data.getRect(this.arange);
            offset.width += 2;
            offset.height += 2;
            const { br, l, t, tl, } = this;
            br.showAutofill(calBRAreaOffset.call(this, offset));
            l.showAutofill(calLAreaOffset.call(this, offset));
            t.showAutofill(calTAreaOffset.call(this, offset));
            tl.showAutofill(offset);
        }
    }
    hideAutofill() {
        ['br', 'l', 't', 'tl'].forEach((property) => {
            this[property].hideAutofill();
        });
    }
    showClipboard() {
        const coffset = this.data.getClipboardRect();
        setAllClipboardOffset.call(this, coffset);
        ['br', 'l', 't', 'tl'].forEach((property) => {
            this[property].showClipboard();
        });
    }
    hideClipboard() {
        ['br', 'l', 't', 'tl'].forEach((property) => {
            this[property].hideClipboard();
        });
    }
}


/***/ }),

/***/ "./src/component/sheet.ts":
/*!********************************!*\
  !*** ./src/component/sheet.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Sheet)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event */ "./src/component/event.ts");
/* harmony import */ var _resizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resizer */ "./src/component/resizer.ts");
/* harmony import */ var _scrollbar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scrollbar */ "./src/component/scrollbar.ts");
/* harmony import */ var _selector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./selector */ "./src/component/selector.ts");
/* harmony import */ var _editor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./editor */ "./src/component/editor.ts");
/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./print */ "./src/component/print.ts");
/* harmony import */ var _contextmenu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./contextmenu */ "./src/component/contextmenu.ts");
/* harmony import */ var _table__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./table */ "./src/component/table.ts");
/* harmony import */ var _toolbar_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./toolbar/index */ "./src/component/toolbar/index.ts");
/* harmony import */ var _modal_validation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modal_validation */ "./src/component/modal_validation.ts");
/* harmony import */ var _sort_filter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sort_filter */ "./src/component/sort_filter.ts");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./message */ "./src/component/message.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _core_formula__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../core/formula */ "./src/core/formula.ts");
/* global window */















/**
 * @desc throttle fn
 * @param func function
 * @param wait Delay in milliseconds
 */
function throttle(func, wait) {
    let timeout;
    return (...arg) => {
        const that = this;
        const args = arg;
        if (!timeout) {
            timeout = setTimeout(() => {
                timeout = null;
                func.apply(that, args);
            }, wait);
        }
    };
}
function scrollbarMove() {
    const { data, verticalScrollbar, horizontalScrollbar, } = this;
    const { l, t, left, top, width, height, } = data.getSelectedRect();
    const tableOffset = this.getTableOffset();
    // console.log(',l:', l, ', left:', left, ', tOffset.left:', tableOffset.width);
    if (Math.abs(left) + width > tableOffset.width) {
        horizontalScrollbar.move({ left: l + width - tableOffset.width });
    }
    else {
        const fsw = data.freezeTotalWidth();
        if (left < fsw) {
            horizontalScrollbar.move({ left: l - 1 - fsw });
        }
    }
    // console.log('top:', top, ', height:', height, ', tof.height:', tableOffset.height);
    if (Math.abs(top) + height > tableOffset.height) {
        verticalScrollbar.move({ top: t + height - tableOffset.height - 1 });
    }
    else {
        const fsh = data.freezeTotalHeight();
        if (top < fsh) {
            verticalScrollbar.move({ top: t - 1 - fsh });
        }
    }
}
function selectorSet(multiple, ri, ci, indexesUpdated = true, moving = false) {
    if (ri === -1 && ci === -1)
        return;
    const { table, selector, toolbar, data, contextMenu, } = this;
    const cell = data.getCell(ri, ci);
    if (multiple) {
        selector.setEnd(ri, ci, moving);
        this.trigger('cells-selected', cell, selector.range);
    }
    else {
        // trigger click event
        selector.set(ri, ci, indexesUpdated);
        this.trigger('cell-selected', cell, ri, ci);
    }
    contextMenu.setMode((ri === -1 || ci === -1) ? 'row-col' : 'range');
    toolbar.reset();
    table.render();
}
// multiple: boolean
// direction: left | right | up | down | row-first | row-last | col-first | col-last
function selectorMove(multiple, direction) {
    const { selector, data, } = this;
    const { rows, cols } = data;
    let [ri, ci] = selector.indexes;
    const { eri, eci } = selector.range;
    if (multiple) {
        [ri, ci] = selector.moveIndexes;
    }
    // console.log('selector.move:', ri, ci);
    if (direction === 'left') {
        if (ci > 0)
            ci -= 1;
    }
    else if (direction === 'right') {
        if (eci !== ci)
            ci = eci;
        if (ci < cols.len - 1)
            ci += 1;
    }
    else if (direction === 'up') {
        if (ri > 0)
            ri -= 1;
    }
    else if (direction === 'down') {
        if (eri !== ri)
            ri = eri;
        if (ri < rows.len - 1)
            ri += 1;
    }
    else if (direction === 'row-first') {
        ci = 0;
    }
    else if (direction === 'row-last') {
        ci = cols.len - 1;
    }
    else if (direction === 'col-first') {
        ri = 0;
    }
    else if (direction === 'col-last') {
        ri = rows.len - 1;
    }
    if (multiple) {
        selector.moveIndexes = [ri, ci];
    }
    selectorSet.call(this, multiple, ri, ci);
    scrollbarMove.call(this);
}
// private methods
function overlayerMousemove(evt) {
    // console.log('x:', evt.offsetX, ', y:', evt.offsetY);
    if (evt.buttons !== 0)
        return;
    if (evt.target.className === `${_config__WEBPACK_IMPORTED_MODULE_13__.cssPrefix}-resizer-hover`)
        return;
    const { offsetX, offsetY } = evt;
    const { rowResizer, colResizer, tableEl, data, } = this;
    const { rows, cols } = data;
    if (offsetX > cols.indexWidth && offsetY > rows.height) {
        rowResizer.hide();
        colResizer.hide();
        return;
    }
    const tRect = tableEl.box();
    const cRect = data.getCellRectByXY(evt.offsetX, evt.offsetY);
    if (cRect.ri >= 0 && cRect.ci === -1) {
        cRect.width = cols.indexWidth;
        rowResizer.show(cRect, {
            width: tRect.width,
        });
        if (rows.isHide(cRect.ri - 1)) {
            rowResizer.showUnhide(cRect.ri);
        }
        else {
            rowResizer.hideUnhide();
        }
    }
    else {
        rowResizer.hide();
    }
    if (cRect.ri === -1 && cRect.ci >= 0) {
        cRect.height = rows.height;
        colResizer.show(cRect, {
            height: tRect.height,
        });
        if (cols.isHide(cRect.ci - 1)) {
            colResizer.showUnhide(cRect.ci);
        }
        else {
            colResizer.hideUnhide();
        }
    }
    else {
        colResizer.hide();
    }
}
// let scrollThreshold = 15;
function overlayerMousescroll(evt) {
    // scrollThreshold -= 1;
    // if (scrollThreshold > 0) return;
    // scrollThreshold = 15;
    const { verticalScrollbar, horizontalScrollbar, data } = this;
    const { top } = verticalScrollbar.scroll();
    const { left } = horizontalScrollbar.scroll();
    // console.log('evt:::', evt.wheelDelta, evt.detail * 40);
    const { rows, cols } = data;
    // deltaY for vertical delta
    const { deltaY, deltaX } = evt;
    const loopValue = (ii, vFunc) => {
        let i = ii;
        let v = 0;
        do {
            v = vFunc(i);
            i += 1;
        } while (v <= 0);
        return v;
    };
    // console.log('deltaX', deltaX, 'evt.detail', evt.detail);
    // if (evt.detail) deltaY = evt.detail * 40;
    const moveY = (vertical) => {
        if (vertical > 0) {
            // up
            const ri = data.scroll.ri + 1;
            if (ri < rows.len) {
                const rh = loopValue(ri, i => rows.getHeight(i));
                verticalScrollbar.move({ top: top + rh - 1 });
            }
        }
        else {
            // down
            const ri = data.scroll.ri - 1;
            if (ri >= 0) {
                const rh = loopValue(ri, i => rows.getHeight(i));
                verticalScrollbar.move({ top: ri === 0 ? 0 : top - rh });
            }
        }
    };
    // deltaX for Mac horizontal scroll
    const moveX = (horizontal) => {
        if (horizontal > 0) {
            // left
            const ci = data.scroll.ci + 1;
            if (ci < cols.len) {
                const cw = loopValue(ci, i => cols.getWidth(i));
                horizontalScrollbar.move({ left: left + cw - 1 });
            }
        }
        else {
            // right
            const ci = data.scroll.ci - 1;
            if (ci >= 0) {
                const cw = loopValue(ci, i => cols.getWidth(i));
                horizontalScrollbar.move({ left: ci === 0 ? 0 : left - cw });
            }
        }
    };
    const tempY = Math.abs(deltaY);
    const tempX = Math.abs(deltaX);
    const temp = Math.max(tempY, tempX);
    // console.log('event:', evt);
    // detail for windows/mac firefox vertical scroll
    if (/Firefox/i.test(window.navigator.userAgent))
        throttle(moveY(evt.detail), 50);
    if (temp === tempX)
        throttle(moveX(deltaX), 50);
    if (temp === tempY)
        throttle(moveY(deltaY), 50);
}
function overlayerTouch(direction, distance) {
    const { verticalScrollbar, horizontalScrollbar } = this;
    const { top } = verticalScrollbar.scroll();
    const { left } = horizontalScrollbar.scroll();
    if (direction === 'left' || direction === 'right') {
        horizontalScrollbar.move({ left: left - distance });
    }
    else if (direction === 'up' || direction === 'down') {
        verticalScrollbar.move({ top: top - distance });
    }
}
function verticalScrollbarSet() {
    const { data, verticalScrollbar } = this;
    const { height } = this.getTableOffset();
    const erth = data.exceptRowTotalHeight(0, -1);
    // console.log('erth:', erth);
    verticalScrollbar.set(height, data.rows.totalHeight() - erth);
}
function horizontalScrollbarSet() {
    const { data, horizontalScrollbar } = this;
    const { width } = this.getTableOffset();
    if (data) {
        horizontalScrollbar.set(width, data.cols.totalWidth());
    }
}
function sheetFreeze() {
    const { selector, data, editor, } = this;
    const [ri, ci] = data.freeze;
    if (ri > 0 || ci > 0) {
        const fwidth = data.freezeTotalWidth();
        const fheight = data.freezeTotalHeight();
        editor.setFreezeLengths(fwidth, fheight);
    }
    selector.resetAreaOffset();
}
function sheetReset() {
    const { tableEl, overlayerEl, overlayerCEl, table, toolbar, selector, el, } = this;
    const tOffset = this.getTableOffset();
    const vRect = this.getRect();
    tableEl.attr(vRect);
    overlayerEl.offset(vRect);
    overlayerCEl.offset(tOffset);
    el.css('width', `${vRect.width}px`);
    verticalScrollbarSet.call(this);
    horizontalScrollbarSet.call(this);
    sheetFreeze.call(this);
    table.render();
    toolbar.reset();
    selector.reset();
}
function clearClipboard() {
    const { data, selector } = this;
    data.clearClipboard();
    selector.hideClipboard();
}
function copy(evt) {
    const { data, selector } = this;
    if (data.settings.mode === 'read')
        return;
    data.copy();
    data.copyToSystemClipboard(evt);
    selector.showClipboard();
}
function cut() {
    const { data, selector } = this;
    if (data.settings.mode === 'read')
        return;
    data.cut();
    selector.showClipboard();
}
function paste(what, evt) {
    const { data } = this;
    if (data.settings.mode === 'read')
        return;
    if (data.clipboard.isClear()) {
        const resetSheet = () => sheetReset.call(this);
        const eventTrigger = (rows) => {
            this.trigger('pasted-clipboard', rows);
        };
        // pastFromSystemClipboard is async operation, need to tell it how to reset sheet and trigger event after it finishes
        // pasting content from system clipboard
        data.pasteFromSystemClipboard(resetSheet, eventTrigger);
    }
    else if (data.paste(what, msg => (0,_message__WEBPACK_IMPORTED_MODULE_12__.xtoast)('Tip', msg))) {
        sheetReset.call(this);
    }
    else if (evt) {
        const cdata = evt.clipboardData.getData('text/plain');
        this.data.pasteFromText(cdata);
        sheetReset.call(this);
    }
}
function hideRowsOrCols() {
    this.data.hideRowsOrCols();
    sheetReset.call(this);
}
function unhideRowsOrCols(type, index) {
    this.data.unhideRowsOrCols(type, index);
    sheetReset.call(this);
}
function autofilter() {
    const { data } = this;
    data.autofilter();
    sheetReset.call(this);
}
function toolbarChangePaintformatPaste() {
    const { toolbar } = this;
    if (toolbar.paintformatActive()) {
        paste.call(this, 'format');
        clearClipboard.call(this);
        toolbar.paintformatToggle();
    }
}
function overlayerMousedown(evt) {
    // console.log(':::::overlayer.mousedown:', evt.detail, evt.button, evt.buttons, evt.shiftKey);
    // console.log('evt.target.className:', evt.target.className);
    const { selector, data, table, sortFilter, } = this;
    const { offsetX, offsetY } = evt;
    const isAutofillEl = evt.target.className === `${_config__WEBPACK_IMPORTED_MODULE_13__.cssPrefix}-selector-corner`;
    const cellRect = data.getCellRectByXY(offsetX, offsetY);
    const { left, top, width, height, } = cellRect;
    let { ri, ci } = cellRect;
    // sort or filter
    const { autoFilter } = data;
    if (autoFilter.includes(ri, ci)) {
        if (left + width - 20 < offsetX && top + height - 20 < offsetY) {
            const items = autoFilter.items(ci, (r, c) => data.rows.getCell(r, c));
            sortFilter.hide();
            sortFilter.set(ci, items, autoFilter.getFilter(ci), autoFilter.getSort(ci));
            sortFilter.setOffset({ left, top: top + height + 2 });
            return;
        }
    }
    // console.log('ri:', ri, ', ci:', ci);
    if (!evt.shiftKey) {
        // console.log('selectorSetStart:::');
        if (isAutofillEl) {
            selector.showAutofill(ri, ci);
        }
        else {
            selectorSet.call(this, false, ri, ci);
        }
        // mouse move up
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.mouseMoveUp)(window, (e) => {
            // console.log('mouseMoveUp::::');
            ({ ri, ci } = data.getCellRectByXY(e.offsetX, e.offsetY));
            if (isAutofillEl) {
                selector.showAutofill(ri, ci);
            }
            else if (e.buttons === 1 && !e.shiftKey) {
                selectorSet.call(this, true, ri, ci, true, true);
            }
        }, () => {
            if (isAutofillEl && selector.arange && data.settings.mode !== 'read') {
                if (data.autofill(selector.arange, 'all', msg => (0,_message__WEBPACK_IMPORTED_MODULE_12__.xtoast)('Tip', msg))) {
                    table.render();
                }
            }
            selector.hideAutofill();
            toolbarChangePaintformatPaste.call(this);
        });
    }
    if (!isAutofillEl && evt.buttons === 1) {
        if (evt.shiftKey) {
            // console.log('shiftKey::::');
            selectorSet.call(this, true, ri, ci);
        }
    }
}
function editorSetOffset() {
    const { editor, data } = this;
    const sOffset = data.getSelectedRect();
    const tOffset = this.getTableOffset();
    let sPosition = 'top';
    // console.log('sOffset:', sOffset, ':', tOffset);
    if (sOffset.top > tOffset.height / 2) {
        sPosition = 'bottom';
    }
    editor.setOffset(sOffset, sPosition);
}
function editorSet() {
    const { editor, data } = this;
    if (data.settings.mode === 'read')
        return;
    editorSetOffset.call(this);
    editor.setCell(data.getSelectedCell(), data.getSelectedValidator());
    clearClipboard.call(this);
}
function verticalScrollbarMove(distance) {
    const { data, table, selector } = this;
    data.scrolly(distance, () => {
        selector.resetBRLAreaOffset();
        editorSetOffset.call(this);
        table.render();
    });
}
function horizontalScrollbarMove(distance) {
    const { data, table, selector } = this;
    data.scrollx(distance, () => {
        selector.resetBRTAreaOffset();
        editorSetOffset.call(this);
        table.render();
    });
}
function rowResizerFinished(cRect, distance) {
    const { ri } = cRect;
    const { table, selector, data } = this;
    const { sri, eri } = selector.range;
    if (ri >= sri && ri <= eri) {
        for (let row = sri; row <= eri; row += 1) {
            data.rows.setHeight(row, distance);
        }
    }
    else {
        data.rows.setHeight(ri, distance);
    }
    table.render();
    selector.resetAreaOffset();
    verticalScrollbarSet.call(this);
    editorSetOffset.call(this);
}
function colResizerFinished(cRect, distance) {
    const { ci } = cRect;
    const { table, selector, data } = this;
    const { sci, eci } = selector.range;
    if (ci >= sci && ci <= eci) {
        for (let col = sci; col <= eci; col += 1) {
            data.cols.setWidth(col, distance);
        }
    }
    else {
        data.cols.setWidth(ci, distance);
    }
    table.render();
    selector.resetAreaOffset();
    horizontalScrollbarSet.call(this);
    editorSetOffset.call(this);
}
function dataSetCellText(text, state = 'finished') {
    const { data, table } = this;
    // const [ri, ci] = selector.indexes;
    if (data.settings.mode === 'read')
        return;
    data.setSelectedCellText(text, state);
    const { ri, ci } = data.selector;
    if (state === 'finished') {
        table.render();
    }
    else {
        this.trigger('cell-edited', text, ri, ci);
    }
}
function insertDeleteRowColumn(type) {
    const { data } = this;
    if (data.settings.mode === 'read')
        return;
    if (type === 'insert-row') {
        data.insert('row');
    }
    else if (type === 'delete-row') {
        data.delete('row');
    }
    else if (type === 'insert-column') {
        data.insert('column');
    }
    else if (type === 'delete-column') {
        data.delete('column');
    }
    else if (type === 'delete-cell') {
        data.deleteCell();
    }
    else if (type === 'delete-cell-format') {
        data.deleteCell('format');
    }
    else if (type === 'delete-cell-text') {
        data.deleteCell('text');
    }
    else if (type === 'cell-printable') {
        data.setSelectedCellAttr('printable', true);
    }
    else if (type === 'cell-non-printable') {
        data.setSelectedCellAttr('printable', false);
    }
    else if (type === 'cell-editable') {
        data.setSelectedCellAttr('editable', true);
    }
    else if (type === 'cell-non-editable') {
        data.setSelectedCellAttr('editable', false);
    }
    clearClipboard.call(this);
    sheetReset.call(this);
}
function toolbarChange(type, value) {
    const { data } = this;
    if (type === 'undo') {
        this.undo();
    }
    else if (type === 'redo') {
        this.redo();
    }
    else if (type === 'print') {
        this.print.preview();
    }
    else if (type === 'paintformat') {
        if (value === true)
            copy.call(this);
        else
            clearClipboard.call(this);
    }
    else if (type === 'clearformat') {
        insertDeleteRowColumn.call(this, 'delete-cell-format');
    }
    else if (type === 'link') {
        // link
    }
    else if (type === 'chart') {
        // chart
    }
    else if (type === 'autofilter') {
        // filter
        autofilter.call(this);
    }
    else if (type === 'freeze') {
        if (value) {
            const { ri, ci } = data.selector;
            this.freeze(ri, ci);
        }
        else {
            this.freeze(0, 0);
        }
    }
    else {
        data.setSelectedCellAttr(type, value);
        if (type === 'formula' && !data.selector.multiple()) {
            editorSet.call(this);
        }
        sheetReset.call(this);
    }
}
function sortFilterChange(ci, order, operator, value) {
    // console.log('sort:', sortDesc, operator, value);
    this.data.setAutoFilter(ci, order, operator, value);
    sheetReset.call(this);
}
function sheetInitEvents() {
    const { selector, overlayerEl, rowResizer, colResizer, verticalScrollbar, horizontalScrollbar, editor, contextMenu, toolbar, modalValidation, sortFilter, } = this;
    // overlayer
    overlayerEl
        .on('mousemove', (evt) => {
        overlayerMousemove.call(this, evt);
    })
        .on('mousedown', (evt) => {
        editor.clear();
        contextMenu.hide();
        // the left mouse button: mousedown → mouseup → click
        // the right mouse button: mousedown → contenxtmenu → mouseup
        if (evt.buttons === 2) {
            if (this.data.xyInSelectedRect(evt.offsetX, evt.offsetY)) {
                contextMenu.setPosition(evt.offsetX, evt.offsetY);
            }
            else {
                overlayerMousedown.call(this, evt);
                contextMenu.setPosition(evt.offsetX, evt.offsetY);
            }
            evt.stopPropagation();
        }
        else if (evt.detail === 2) {
            editorSet.call(this);
        }
        else {
            overlayerMousedown.call(this, evt);
        }
    })
        .on('mousewheel.stop', (evt) => {
        overlayerMousescroll.call(this, evt);
    })
        .on('mouseout', (evt) => {
        const { offsetX, offsetY } = evt;
        if (offsetY <= 0)
            colResizer.hide();
        if (offsetX <= 0)
            rowResizer.hide();
    });
    selector.inputChange = (v) => {
        dataSetCellText.call(this, v, 'input');
        editorSet.call(this);
    };
    // slide on mobile
    (0,_event__WEBPACK_IMPORTED_MODULE_1__.bindTouch)(overlayerEl.el, {
        move: (direction, d) => {
            overlayerTouch.call(this, direction, d);
        },
    });
    // toolbar change
    toolbar.change = (type, value) => toolbarChange.call(this, type, value);
    // sort filter ok
    sortFilter.ok = (ci, order, o, v) => sortFilterChange.call(this, ci, order, o, v);
    // resizer finished callback
    rowResizer.finishedFn = (cRect, distance) => {
        rowResizerFinished.call(this, cRect, distance);
    };
    colResizer.finishedFn = (cRect, distance) => {
        colResizerFinished.call(this, cRect, distance);
    };
    // resizer unhide callback
    rowResizer.unhideFn = (index) => {
        unhideRowsOrCols.call(this, 'row', index);
    };
    colResizer.unhideFn = (index) => {
        unhideRowsOrCols.call(this, 'col', index);
    };
    // scrollbar move callback
    verticalScrollbar.moveFn = (distance, evt) => {
        verticalScrollbarMove.call(this, distance, evt);
    };
    horizontalScrollbar.moveFn = (distance, evt) => {
        horizontalScrollbarMove.call(this, distance, evt);
    };
    // editor
    editor.change = (state, itext) => {
        dataSetCellText.call(this, itext, state);
    };
    // modal validation
    modalValidation.change = (action, ...args) => {
        if (action === 'save') {
            this.data.addValidation(...args);
        }
        else {
            this.data.removeValidation();
        }
    };
    // contextmenu
    contextMenu.itemClick = (type) => {
        // console.log('type:', type);
        if (type === 'validation') {
            modalValidation.setValue(this.data.getSelectedValidation());
        }
        else if (type === 'copy') {
            copy.call(this);
        }
        else if (type === 'cut') {
            cut.call(this);
        }
        else if (type === 'paste') {
            paste.call(this, 'all');
        }
        else if (type === 'paste-value') {
            paste.call(this, 'text');
        }
        else if (type === 'paste-format') {
            paste.call(this, 'format');
        }
        else if (type === 'hide') {
            hideRowsOrCols.call(this);
        }
        else {
            insertDeleteRowColumn.call(this, type);
        }
    };
    (0,_event__WEBPACK_IMPORTED_MODULE_1__.bind)(window, 'resize', () => {
        this.reload();
    });
    (0,_event__WEBPACK_IMPORTED_MODULE_1__.bind)(window, 'click', (evt) => {
        this.focusing = overlayerEl.contains(evt.target);
    });
    (0,_event__WEBPACK_IMPORTED_MODULE_1__.bind)(window, 'paste', (evt) => {
        if (!this.focusing)
            return;
        paste.call(this, 'all', evt);
        evt.preventDefault();
    });
    (0,_event__WEBPACK_IMPORTED_MODULE_1__.bind)(window, 'copy', (evt) => {
        if (!this.focusing)
            return;
        copy.call(this, evt);
        evt.preventDefault();
    });
    // for selector
    (0,_event__WEBPACK_IMPORTED_MODULE_1__.bind)(window, 'keydown', (evt) => {
        if (!this.focusing)
            return;
        const keyCode = evt.keyCode || evt.which;
        const { key, ctrlKey, shiftKey, metaKey, } = evt;
        // console.log('keydown.evt: ', keyCode);
        if (ctrlKey || metaKey) {
            // const { sIndexes, eIndexes } = selector;
            // let what = 'all';
            // if (shiftKey) what = 'text';
            // if (altKey) what = 'format';
            switch (keyCode) {
                case 90:
                    // undo: ctrl + z
                    this.undo();
                    evt.preventDefault();
                    break;
                case 89:
                    // redo: ctrl + y
                    this.redo();
                    evt.preventDefault();
                    break;
                case 67:
                    // ctrl + c
                    // => copy
                    // copy.call(this);
                    // evt.preventDefault();
                    break;
                case 88:
                    // ctrl + x
                    cut.call(this);
                    evt.preventDefault();
                    break;
                case 85:
                    // ctrl + u
                    toolbar.trigger('underline');
                    evt.preventDefault();
                    break;
                case 86:
                    // ctrl + v
                    // => paste
                    // evt.preventDefault();
                    break;
                case 37:
                    // ctrl + left
                    selectorMove.call(this, shiftKey, 'row-first');
                    evt.preventDefault();
                    break;
                case 38:
                    // ctrl + up
                    selectorMove.call(this, shiftKey, 'col-first');
                    evt.preventDefault();
                    break;
                case 39:
                    // ctrl + right
                    selectorMove.call(this, shiftKey, 'row-last');
                    evt.preventDefault();
                    break;
                case 40:
                    // ctrl + down
                    selectorMove.call(this, shiftKey, 'col-last');
                    evt.preventDefault();
                    break;
                case 32:
                    // ctrl + space, all cells in col
                    selectorSet.call(this, false, -1, this.data.selector.ci, false);
                    evt.preventDefault();
                    break;
                case 66:
                    // ctrl + B
                    toolbar.trigger('bold');
                    break;
                case 73:
                    // ctrl + I
                    toolbar.trigger('italic');
                    break;
                default:
                    break;
            }
        }
        else {
            // console.log('evt.keyCode:', evt.keyCode);
            switch (keyCode) {
                case 32:
                    if (shiftKey) {
                        // shift + space, all cells in row
                        selectorSet.call(this, false, this.data.selector.ri, -1, false);
                    }
                    break;
                case 27: // esc
                    contextMenu.hide();
                    clearClipboard.call(this);
                    break;
                case 37: // left
                    selectorMove.call(this, shiftKey, 'left');
                    evt.preventDefault();
                    break;
                case 38: // up
                    selectorMove.call(this, shiftKey, 'up');
                    evt.preventDefault();
                    break;
                case 39: // right
                    selectorMove.call(this, shiftKey, 'right');
                    evt.preventDefault();
                    break;
                case 40: // down
                    selectorMove.call(this, shiftKey, 'down');
                    evt.preventDefault();
                    break;
                case 9: // tab
                    editor.clear();
                    // shift + tab => move left
                    // tab => move right
                    selectorMove.call(this, false, shiftKey ? 'left' : 'right');
                    evt.preventDefault();
                    break;
                case 13: // enter
                    editor.clear();
                    // shift + enter => move up
                    // enter => move down
                    selectorMove.call(this, false, shiftKey ? 'up' : 'down');
                    evt.preventDefault();
                    break;
                case 8: // backspace
                    insertDeleteRowColumn.call(this, 'delete-cell-text');
                    evt.preventDefault();
                    break;
                default:
                    break;
            }
            if (key === 'Delete') {
                insertDeleteRowColumn.call(this, 'delete-cell-text');
                evt.preventDefault();
            }
            else if ((keyCode >= 65 && keyCode <= 90)
                || (keyCode >= 48 && keyCode <= 57)
                || (keyCode >= 96 && keyCode <= 105)
                || evt.key === '=') {
                dataSetCellText.call(this, evt.key, 'input');
                editorSet.call(this);
            }
            else if (keyCode === 113) {
                // F2
                editorSet.call(this);
            }
        }
    });
}
class Sheet {
    eventMap;
    el;
    toolbar;
    print;
    data;
    tableEl;
    rowResizer;
    colResizer;
    verticalScrollbar;
    horizontalScrollbar;
    editor;
    modalValidation;
    contextMenu;
    selector;
    overlayerCEl;
    overlayerEl;
    sortFilter;
    table;
    constructor(targetEl, data) {
        this.eventMap = (0,_event__WEBPACK_IMPORTED_MODULE_1__.createEventEmitter)();
        const { view, showToolbar, showContextmenu } = data.settings;
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_13__.cssPrefix}-sheet`);
        this.toolbar = new _toolbar_index__WEBPACK_IMPORTED_MODULE_9__["default"](data, view.width, !showToolbar);
        this.print = new _print__WEBPACK_IMPORTED_MODULE_6__["default"](data);
        targetEl.children(this.toolbar.el, this.el, this.print.el);
        this.data = data;
        // table
        this.tableEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('canvas', `${_config__WEBPACK_IMPORTED_MODULE_13__.cssPrefix}-table`);
        // resizer
        this.rowResizer = new _resizer__WEBPACK_IMPORTED_MODULE_2__["default"](false, data.rows.height);
        this.colResizer = new _resizer__WEBPACK_IMPORTED_MODULE_2__["default"](true, data.cols.minWidth);
        // scrollbar
        this.verticalScrollbar = new _scrollbar__WEBPACK_IMPORTED_MODULE_3__["default"](true);
        this.horizontalScrollbar = new _scrollbar__WEBPACK_IMPORTED_MODULE_3__["default"](false);
        // editor
        this.editor = new _editor__WEBPACK_IMPORTED_MODULE_5__["default"](_core_formula__WEBPACK_IMPORTED_MODULE_14__.formulas, () => this.getTableOffset(), data.rows.height);
        // data validation
        this.modalValidation = new _modal_validation__WEBPACK_IMPORTED_MODULE_10__["default"]();
        // contextMenu
        this.contextMenu = new _contextmenu__WEBPACK_IMPORTED_MODULE_7__["default"](() => this.getRect(), !showContextmenu);
        // selector
        this.selector = new _selector__WEBPACK_IMPORTED_MODULE_4__["default"](data);
        this.overlayerCEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_13__.cssPrefix}-overlayer-content`)
            .children(this.editor.el, this.selector.el);
        this.overlayerEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_13__.cssPrefix}-overlayer`)
            .child(this.overlayerCEl);
        // sortFilter
        this.sortFilter = new _sort_filter__WEBPACK_IMPORTED_MODULE_11__["default"]();
        // root element
        this.el.children(this.tableEl, this.overlayerEl.el, this.rowResizer.el, this.colResizer.el, this.verticalScrollbar.el, this.horizontalScrollbar.el, this.contextMenu.el, this.modalValidation.el, this.sortFilter.el);
        // table
        this.table = new _table__WEBPACK_IMPORTED_MODULE_8__["default"](this.tableEl.el, data);
        sheetInitEvents.call(this);
        sheetReset.call(this);
        // init selector [0, 0]
        selectorSet.call(this, false, 0, 0);
    }
    on(eventName, func) {
        this.eventMap.on(eventName, func);
        return this;
    }
    trigger(eventName, ...args) {
        const { eventMap } = this;
        eventMap.fire(eventName, args);
    }
    resetData(data) {
        // before
        this.editor.clear();
        // after
        this.data = data;
        verticalScrollbarSet.call(this);
        horizontalScrollbarSet.call(this);
        this.toolbar.resetData(data);
        this.print.resetData(data);
        this.selector.resetData(data);
        this.table.resetData(data);
    }
    loadData(data) {
        this.data.setData(data);
        sheetReset.call(this);
        return this;
    }
    // freeze rows or cols
    freeze(ri, ci) {
        const { data } = this;
        data.setFreeze(ri, ci);
        sheetReset.call(this);
        return this;
    }
    undo() {
        this.data.undo();
        sheetReset.call(this);
    }
    redo() {
        this.data.redo();
        sheetReset.call(this);
    }
    reload() {
        sheetReset.call(this);
        return this;
    }
    getRect() {
        const { data } = this;
        return { width: data.viewWidth(), height: data.viewHeight() };
    }
    getTableOffset() {
        const { rows, cols } = this.data;
        const { width, height } = this.getRect();
        return {
            width: width - cols.indexWidth,
            height: height - rows.height,
            left: cols.indexWidth,
            top: rows.height,
        };
    }
}


/***/ }),

/***/ "./src/component/sort_filter.ts":
/*!**************************************!*\
  !*** ./src/component/sort_filter.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SortFilter)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./button */ "./src/component/button.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./event */ "./src/component/event.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");





function buildMenu(clsName) {
    return (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-item ${clsName}`);
}
function buildSortItem(it) {
    return buildMenu('state').child((0,_locale_locale__WEBPACK_IMPORTED_MODULE_4__.t)(`sort.${it}`))
        .on('click.stop', () => this.itemClick(it));
}
function buildFilterBody(items) {
    const { filterbEl, filterValues } = this;
    filterbEl.html('');
    const itemKeys = Object.keys(items);
    itemKeys.forEach((it, index) => {
        const cnt = items[it];
        const active = filterValues.includes(it) ? 'checked' : '';
        filterbEl.child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-item state ${active}`)
            .on('click.stop', () => this.filterClick(index, it))
            .children(it === '' ? (0,_locale_locale__WEBPACK_IMPORTED_MODULE_4__.t)('filter.empty') : it, (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'label').html(`(${cnt})`)));
    });
}
function resetFilterHeader() {
    const { filterhEl, filterValues, values } = this;
    filterhEl.html(`${filterValues.length} / ${values.length}`);
    filterhEl.checked(filterValues.length === values.length);
}
class SortFilter {
    filterbEl;
    filterhEl;
    el;
    sortAscEl;
    sortDescEl;
    ci;
    sortDesc;
    values;
    filterValues;
    ok;
    sort;
    constructor() {
        this.filterbEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-body`);
        this.filterhEl = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-header state`).on('click.stop', () => this.filterClick(0, 'all'));
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-sort-filter`).children(this.sortAscEl = buildSortItem.call(this, 'asc'), this.sortDescEl = buildSortItem.call(this, 'desc'), buildMenu('divider'), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-filter`).children(this.filterhEl, this.filterbEl), (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}-buttons`).children(new _button__WEBPACK_IMPORTED_MODULE_1__["default"]('cancel').on('click', () => this.btnClick('cancel')), new _button__WEBPACK_IMPORTED_MODULE_1__["default"]('ok', 'primary').on('click', () => this.btnClick('ok')))).hide();
        // this.setFilters(['test1', 'test2', 'text3']);
        this.ci = null;
        this.sortDesc = null;
        this.values = null;
        this.filterValues = [];
    }
    btnClick(it) {
        if (it === 'ok') {
            const { ci, sort, filterValues } = this;
            if (this.ok) {
                this.ok(ci, sort, 'in', filterValues);
            }
        }
        this.hide();
    }
    itemClick(it) {
        // console.log('it:', it);
        this.sort = it;
        const { sortAscEl, sortDescEl } = this;
        sortAscEl.checked(it === 'asc');
        sortDescEl.checked(it === 'desc');
    }
    filterClick(index, it) {
        // console.log('index:', index, it);
        const { filterbEl, filterValues, values } = this;
        const children = filterbEl.children();
        if (it === 'all') {
            if (children.length === filterValues.length) {
                this.filterValues = [];
                children.forEach(i => (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)(i).checked(false));
            }
            else {
                this.filterValues = Array.from(values);
                children.forEach(i => (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)(i).checked(true));
            }
        }
        else {
            const checked = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)(children[index]).toggle('checked');
            if (checked) {
                filterValues.push(it);
            }
            else {
                filterValues.splice(filterValues.findIndex(i => i === it), 1);
            }
        }
        resetFilterHeader.call(this);
    }
    // v: autoFilter
    // items: {value: cnt}
    // sort { ci, order }
    set(ci, items, filter, sort) {
        this.ci = ci;
        const { sortAscEl, sortDescEl } = this;
        if (sort !== null) {
            this.sort = sort.order;
            sortAscEl.checked(sort.asc());
            sortDescEl.checked(sort.desc());
        }
        else {
            this.sortDesc = null;
            sortAscEl.checked(false);
            sortDescEl.checked(false);
        }
        // this.setFilters(items, filter);
        this.values = Object.keys(items);
        this.filterValues = filter ? Array.from(filter.value) : Object.keys(items);
        buildFilterBody.call(this, items, filter);
        resetFilterHeader.call(this);
    }
    setOffset(v) {
        this.el.offset(v).show();
        let tindex = 1;
        (0,_event__WEBPACK_IMPORTED_MODULE_2__.bindClickoutside)(this.el, () => {
            if (tindex <= 0) {
                this.hide();
            }
            tindex -= 1;
        });
    }
    show() {
        this.el.show();
    }
    hide() {
        this.el.hide();
        (0,_event__WEBPACK_IMPORTED_MODULE_2__.unbindClickoutside)(this.el);
    }
}


/***/ }),

/***/ "./src/component/suggest.ts":
/*!**********************************!*\
  !*** ./src/component/suggest.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Suggest)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event */ "./src/component/event.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");



function inputMovePrev(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    const { filterItems } = this;
    if (filterItems.length <= 0)
        return;
    if (this.itemIndex >= 0)
        filterItems[this.itemIndex].toggle();
    this.itemIndex -= 1;
    if (this.itemIndex < 0) {
        this.itemIndex = filterItems.length - 1;
    }
    filterItems[this.itemIndex].toggle();
}
function inputMoveNext(evt) {
    evt.stopPropagation();
    const { filterItems } = this;
    if (filterItems.length <= 0)
        return;
    if (this.itemIndex >= 0)
        filterItems[this.itemIndex].toggle();
    this.itemIndex += 1;
    if (this.itemIndex > filterItems.length - 1) {
        this.itemIndex = 0;
    }
    filterItems[this.itemIndex].toggle();
}
function inputEnter(evt) {
    evt.preventDefault();
    const { filterItems } = this;
    if (filterItems.length <= 0)
        return;
    evt.stopPropagation();
    if (this.itemIndex < 0)
        this.itemIndex = 0;
    filterItems[this.itemIndex].el.click();
    this.hide();
}
function inputKeydownHandler(evt) {
    const { keyCode } = evt;
    if (evt.ctrlKey) {
        evt.stopPropagation();
    }
    switch (keyCode) {
        case 37: // left
            evt.stopPropagation();
            break;
        case 38: // up
            inputMovePrev.call(this, evt);
            break;
        case 39: // right
            evt.stopPropagation();
            break;
        case 40: // down
            inputMoveNext.call(this, evt);
            break;
        case 13: // enter
            inputEnter.call(this, evt);
            break;
        case 9:
            inputEnter.call(this, evt);
            break;
        default:
            evt.stopPropagation();
            break;
    }
}
class Suggest {
    filterItems;
    items;
    el;
    itemClick;
    itemIndex;
    constructor(items, itemClick, width = '200px') {
        this.filterItems = [];
        this.items = items;
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-suggest`).css('width', width).hide();
        this.itemClick = itemClick;
        this.itemIndex = -1;
    }
    setOffset(v) {
        this.el.cssRemoveKeys('top', 'bottom')
            .offset(v);
    }
    hide() {
        const { el } = this;
        this.filterItems = [];
        this.itemIndex = -1;
        el.hide();
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.unbindClickoutside)(this.el.parent());
    }
    setItems(items) {
        this.items = items;
        // this.search('');
    }
    search(word) {
        let { items } = this;
        if (!/^\s*$/.test(word)) {
            items = items.filter(it => (it.key || it).startsWith(word.toUpperCase()));
        }
        items = items.map((it) => {
            let { title } = it;
            if (title) {
                if (typeof title === 'function') {
                    title = title();
                }
            }
            else {
                title = it;
            }
            const item = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-item`)
                .child(title)
                .on('click.stop', () => {
                this.itemClick(it);
                this.hide();
            });
            if (it.label) {
                item.child((0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', 'label').html(it.label));
            }
            return item;
        });
        this.filterItems = items;
        if (items.length <= 0) {
            return;
        }
        const { el } = this;
        // items[0].toggle();
        el.html('').children(...items).show();
        (0,_event__WEBPACK_IMPORTED_MODULE_1__.bindClickoutside)(el.parent(), () => { this.hide(); });
    }
    bindInputEvents(input) {
        input.on('keydown', evt => inputKeydownHandler.call(this, evt));
    }
}


/***/ }),

/***/ "./src/component/table.ts":
/*!********************************!*\
  !*** ./src/component/table.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "renderCell": () => (/* binding */ renderCell)
/* harmony export */ });
/* harmony import */ var _core_alphabet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/alphabet */ "./src/core/alphabet.ts");
/* harmony import */ var _core_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/font */ "./src/core/font.ts");
/* harmony import */ var _core_cell__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/cell */ "./src/core/cell.ts");
/* harmony import */ var _core_formula__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/formula */ "./src/core/formula.ts");
/* harmony import */ var _core_format__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/format */ "./src/core/format.ts");
/* harmony import */ var _canvas_draw__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../canvas/draw */ "./src/canvas/draw.ts");






// gobal var
const cellPaddingWidth = 5;
const tableFixedHeaderCleanStyle = { fillStyle: '#f4f5f8' };
const tableGridStyle = {
    fillStyle: '#fff',
    lineWidth: _canvas_draw__WEBPACK_IMPORTED_MODULE_5__.thinLineWidth,
    strokeStyle: '#e6e6e6',
};
function tableFixedHeaderStyle() {
    return {
        textAlign: 'center',
        textBaseline: 'middle',
        font: `500 ${(0,_canvas_draw__WEBPACK_IMPORTED_MODULE_5__.npx)(12)}px Source Sans Pro`,
        fillStyle: '#585757',
        lineWidth: (0,_canvas_draw__WEBPACK_IMPORTED_MODULE_5__.thinLineWidth)(),
        strokeStyle: '#e6e6e6',
    };
}
function getDrawBox(data, rindex, cindex, yoffset = 0) {
    const { left, top, width, height, } = data.cellRect(rindex, cindex);
    return new _canvas_draw__WEBPACK_IMPORTED_MODULE_5__.DrawBox(left, top + yoffset, width, height, cellPaddingWidth);
}
/*
function renderCellBorders(bboxes, translateFunc) {
  const { draw } = this;
  if (bboxes) {
    const rset = new Set();
    // console.log('bboxes:', bboxes);
    bboxes.forEach(({ ri, ci, box }) => {
      if (!rset.has(ri)) {
        rset.add(ri);
        translateFunc(ri);
      }
      draw.strokeBorders(box);
    });
  }
}
*/
function renderCell(draw, data, rindex, cindex, yoffset = 0) {
    const { sortedRowMap, rows, cols } = data;
    if (rows.isHide(rindex) || cols.isHide(cindex))
        return;
    let nrindex = rindex;
    if (sortedRowMap.has(rindex)) {
        nrindex = sortedRowMap.get(rindex);
    }
    const cell = data.getCell(nrindex, cindex);
    if (cell === null)
        return;
    let frozen = false;
    if ('editable' in cell && cell.editable === false) {
        frozen = true;
    }
    const style = data.getCellStyleOrDefault(nrindex, cindex);
    const dbox = getDrawBox(data, rindex, cindex, yoffset);
    dbox.bgcolor = style.bgcolor;
    if (style.border !== undefined) {
        dbox.setBorders(style.border);
        // bboxes.push({ ri: rindex, ci: cindex, box: dbox });
        draw.strokeBorders(dbox);
    }
    draw.rect(dbox, () => {
        // render text
        let cellText = '';
        if (!data.settings.evalPaused) {
            cellText = _core_cell__WEBPACK_IMPORTED_MODULE_2__["default"].render(cell.text || '', _core_formula__WEBPACK_IMPORTED_MODULE_3__.formulam, (y, x) => (data.getCellTextOrDefault(x, y)));
        }
        else {
            cellText = cell.text || '';
        }
        if (style.format) {
            // console.log(data.formatm, '>>', cell.format);
            cellText = _core_format__WEBPACK_IMPORTED_MODULE_4__.formatm[style.format].render(cellText);
        }
        const font = Object.assign({}, style.font);
        font.size = (0,_core_font__WEBPACK_IMPORTED_MODULE_1__.getFontSizePxByPt)(font.size);
        // console.log('style:', style);
        draw.text(cellText, dbox, {
            align: style.align,
            valign: style.valign,
            font,
            color: style.color,
            strike: style.strike,
            underline: style.underline,
        }, style.textwrap);
        // error
        const error = data.validations.getError(rindex, cindex);
        if (error) {
            // console.log('error:', rindex, cindex, error);
            draw.error(dbox);
        }
        if (frozen) {
            draw.frozen(dbox);
        }
    });
}
function renderAutofilter(viewRange) {
    const { data, draw } = this;
    if (viewRange) {
        const { autoFilter } = data;
        if (!autoFilter.active())
            return;
        const afRange = autoFilter.hrange();
        if (viewRange.intersects(afRange)) {
            afRange.each((ri, ci) => {
                const dbox = getDrawBox(data, ri, ci);
                draw.dropdown(dbox);
            });
        }
    }
}
function renderContent(viewRange, fw, fh, tx, ty) {
    const { draw, data } = this;
    draw.save();
    draw.translate(fw, fh)
        .translate(tx, ty);
    const { exceptRowSet } = data;
    // const exceptRows = Array.from(exceptRowSet);
    const filteredTranslateFunc = (ri) => {
        const ret = exceptRowSet.has(ri);
        if (ret) {
            const height = data.rows.getHeight(ri);
            draw.translate(0, -height);
        }
        return !ret;
    };
    const exceptRowTotalHeight = data.exceptRowTotalHeight(viewRange.sri, viewRange.eri);
    // 1 render cell
    draw.save();
    draw.translate(0, -exceptRowTotalHeight);
    viewRange.each((ri, ci) => {
        renderCell(draw, data, ri, ci);
    }, ri => filteredTranslateFunc(ri));
    draw.restore();
    // 2 render mergeCell
    const rset = new Set();
    draw.save();
    draw.translate(0, -exceptRowTotalHeight);
    data.eachMergesInView(viewRange, ({ sri, sci, eri }) => {
        if (!exceptRowSet.has(sri)) {
            renderCell(draw, data, sri, sci);
        }
        else if (!rset.has(sri)) {
            rset.add(sri);
            const height = data.rows.sumHeight(sri, eri + 1);
            draw.translate(0, -height);
        }
    });
    draw.restore();
    // 3 render autofilter
    renderAutofilter.call(this, viewRange);
    draw.restore();
}
function renderSelectedHeaderCell(x, y, w, h) {
    const { draw } = this;
    draw.save();
    draw.attr({ fillStyle: 'rgba(75, 137, 255, 0.08)' })
        .fillRect(x, y, w, h);
    draw.restore();
}
// viewRange
// type: all | left | top
// w: the fixed width of header
// h: the fixed height of header
// tx: moving distance on x-axis
// ty: moving distance on y-axis
function renderFixedHeaders(type, viewRange, w, h, tx, ty) {
    const { draw, data } = this;
    const sumHeight = viewRange.h; // rows.sumHeight(viewRange.sri, viewRange.eri + 1);
    const sumWidth = viewRange.w; // cols.sumWidth(viewRange.sci, viewRange.eci + 1);
    const nty = ty + h;
    const ntx = tx + w;
    draw.save();
    // draw rect background
    draw.attr(tableFixedHeaderCleanStyle);
    if (type === 'all' || type === 'left')
        draw.fillRect(0, nty, w, sumHeight);
    if (type === 'all' || type === 'top')
        draw.fillRect(ntx, 0, sumWidth, h);
    const { sri, sci, eri, eci, } = data.selector.range;
    // console.log(data.selectIndexes);
    // draw text
    // text font, align...
    draw.attr(tableFixedHeaderStyle());
    // y-header-text
    if (type === 'all' || type === 'left') {
        data.rowEach(viewRange.sri, viewRange.eri, (i, y1, rowHeight) => {
            const y = nty + y1;
            const ii = i;
            draw.line([0, y], [w, y]);
            if (sri <= ii && ii < eri + 1) {
                renderSelectedHeaderCell.call(this, 0, y, w, rowHeight);
            }
            draw.fillText(ii + 1, w / 2, y + (rowHeight / 2));
            if (i > 0 && data.rows.isHide(i - 1)) {
                draw.save();
                draw.attr({ strokeStyle: '#c6c6c6' });
                draw.line([5, y + 5], [w - 5, y + 5]);
                draw.restore();
            }
        });
        draw.line([0, sumHeight + nty], [w, sumHeight + nty]);
        draw.line([w, nty], [w, sumHeight + nty]);
    }
    // x-header-text
    if (type === 'all' || type === 'top') {
        data.colEach(viewRange.sci, viewRange.eci, (i, x1, colWidth) => {
            const x = ntx + x1;
            const ii = i;
            draw.line([x, 0], [x, h]);
            if (sci <= ii && ii < eci + 1) {
                renderSelectedHeaderCell.call(this, x, 0, colWidth, h);
            }
            draw.fillText((0,_core_alphabet__WEBPACK_IMPORTED_MODULE_0__.stringAt)(ii), x + (colWidth / 2), h / 2);
            if (i > 0 && data.cols.isHide(i - 1)) {
                draw.save();
                draw.attr({ strokeStyle: '#c6c6c6' });
                draw.line([x + 5, 5], [x + 5, h - 5]);
                draw.restore();
            }
        });
        draw.line([sumWidth + ntx, 0], [sumWidth + ntx, h]);
        draw.line([0, h], [sumWidth + ntx, h]);
    }
    draw.restore();
}
function renderFixedLeftTopCell(fw, fh) {
    const { draw } = this;
    draw.save();
    // left-top-cell
    draw.attr({ fillStyle: '#f4f5f8' })
        .fillRect(0, 0, fw, fh);
    draw.restore();
}
function renderContentGrid({ sri, sci, eri, eci, w, h, }, fw, fh, tx, ty) {
    const { draw, data } = this;
    const { settings } = data;
    draw.save();
    draw.attr(tableGridStyle)
        .translate(fw + tx, fh + ty);
    // const sumWidth = cols.sumWidth(sci, eci + 1);
    // const sumHeight = rows.sumHeight(sri, eri + 1);
    // console.log('sumWidth:', sumWidth);
    // draw.clearRect(0, 0, w, h);
    if (!settings.showGrid) {
        draw.restore();
        return;
    }
    // console.log('rowStart:', rowStart, ', rowLen:', rowLen);
    data.rowEach(sri, eri, (i, y, ch) => {
        // console.log('y:', y);
        if (i !== sri)
            draw.line([0, y], [w, y]);
        if (i === eri)
            draw.line([0, y + ch], [w, y + ch]);
    });
    data.colEach(sci, eci, (i, x, cw) => {
        if (i !== sci)
            draw.line([x, 0], [x, h]);
        if (i === eci)
            draw.line([x + cw, 0], [x + cw, h]);
    });
    draw.restore();
}
function renderFreezeHighlightLine(fw, fh, ftw, fth) {
    const { draw, data } = this;
    const twidth = data.viewWidth() - fw;
    const theight = data.viewHeight() - fh;
    draw.save()
        .translate(fw, fh)
        .attr({ strokeStyle: 'rgba(75, 137, 255, .6)' });
    draw.line([0, fth], [twidth, fth]);
    draw.line([ftw, 0], [ftw, theight]);
    draw.restore();
}
/** end */
class Table {
    el;
    draw;
    data;
    constructor(el, data) {
        this.el = el;
        this.draw = new _canvas_draw__WEBPACK_IMPORTED_MODULE_5__.Draw(el, data.viewWidth(), data.viewHeight());
        this.data = data;
    }
    resetData(data) {
        this.data = data;
        this.render();
    }
    render() {
        // resize canvas
        const { data } = this;
        const { rows, cols } = data;
        // fixed width of header
        const fw = cols.indexWidth;
        // fixed height of header
        const fh = rows.height;
        this.draw.resize(data.viewWidth(), data.viewHeight());
        this.clear();
        const viewRange = data.viewRange();
        // renderAll.call(this, viewRange, data.scroll);
        const tx = data.freezeTotalWidth();
        const ty = data.freezeTotalHeight();
        const { x, y } = data.scroll;
        // 1
        renderContentGrid.call(this, viewRange, fw, fh, tx, ty);
        renderContent.call(this, viewRange, fw, fh, -x, -y);
        renderFixedHeaders.call(this, 'all', viewRange, fw, fh, tx, ty);
        renderFixedLeftTopCell.call(this, fw, fh);
        const [fri, fci] = data.freeze;
        if (fri > 0 || fci > 0) {
            // 2
            if (fri > 0) {
                const vr = viewRange.clone();
                vr.sri = 0;
                vr.eri = fri - 1;
                vr.h = ty;
                renderContentGrid.call(this, vr, fw, fh, tx, 0);
                renderContent.call(this, vr, fw, fh, -x, 0);
                renderFixedHeaders.call(this, 'top', vr, fw, fh, tx, 0);
            }
            // 3
            if (fci > 0) {
                const vr = viewRange.clone();
                vr.sci = 0;
                vr.eci = fci - 1;
                vr.w = tx;
                renderContentGrid.call(this, vr, fw, fh, 0, ty);
                renderFixedHeaders.call(this, 'left', vr, fw, fh, 0, ty);
                renderContent.call(this, vr, fw, fh, 0, -y);
            }
            // 4
            const freezeViewRange = data.freezeViewRange();
            renderContentGrid.call(this, freezeViewRange, fw, fh, 0, 0);
            renderFixedHeaders.call(this, 'all', freezeViewRange, fw, fh, 0, 0);
            renderContent.call(this, freezeViewRange, fw, fh, 0, 0);
            // 5
            renderFreezeHighlightLine.call(this, fw, fh, tx, ty);
        }
    }
    clear() {
        this.draw.clear();
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Table);


/***/ }),

/***/ "./src/component/toolbar/align.ts":
/*!****************************************!*\
  !*** ./src/component/toolbar/align.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Align)
/* harmony export */ });
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _dropdown_align__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dropdown_align */ "./src/component/dropdown_align.ts");


class Align extends _dropdown_item__WEBPACK_IMPORTED_MODULE_0__.DropdownItem {
    constructor(value) {
        super('align', '', value);
        this.dd = new _dropdown_align__WEBPACK_IMPORTED_MODULE_1__["default"](['left', 'center', 'right'], value);
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
    }
}


/***/ }),

/***/ "./src/component/toolbar/autofilter.ts":
/*!*********************************************!*\
  !*** ./src/component/toolbar/autofilter.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Autofilter)
/* harmony export */ });
/* harmony import */ var _toggle_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle_item */ "./src/component/toolbar/toggle_item.ts");

class Autofilter extends _toggle_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('autofilter');
    }
    setState() { }
}


/***/ }),

/***/ "./src/component/toolbar/bold.ts":
/*!***************************************!*\
  !*** ./src/component/toolbar/bold.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Bold)
/* harmony export */ });
/* harmony import */ var _toggle_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle_item */ "./src/component/toolbar/toggle_item.ts");

class Bold extends _toggle_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('font-bold', 'Ctrl+B');
    }
}


/***/ }),

/***/ "./src/component/toolbar/border.ts":
/*!*****************************************!*\
  !*** ./src/component/toolbar/border.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Border)
/* harmony export */ });
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _dropdown_border__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dropdown_border */ "./src/component/dropdown_border.ts");


class Border extends _dropdown_item__WEBPACK_IMPORTED_MODULE_0__.DropdownItem {
    constructor() {
        super('border');
        this.dd = new _dropdown_border__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
    }
}


/***/ }),

/***/ "./src/component/toolbar/clearformat.ts":
/*!**********************************************!*\
  !*** ./src/component/toolbar/clearformat.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Clearformat)
/* harmony export */ });
/* harmony import */ var _icon_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icon_item */ "./src/component/toolbar/icon_item.ts");

class Clearformat extends _icon_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('clearformat');
    }
}


/***/ }),

/***/ "./src/component/toolbar/dropdown_item.ts":
/*!************************************************!*\
  !*** ./src/component/toolbar/dropdown_item.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DropdownItem": () => (/* binding */ DropdownItem)
/* harmony export */ });
/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item */ "./src/component/toolbar/item.ts");

class DropdownItem extends _item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    dd;
    getValue(v) {
        return v;
    }
    setState(v) {
        if (v) {
            // this.value = v;
            this.dd.setTitle(v);
        }
    }
}


/***/ }),

/***/ "./src/component/toolbar/fill_color.ts":
/*!*********************************************!*\
  !*** ./src/component/toolbar/fill_color.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FillColor)
/* harmony export */ });
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _dropdown_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dropdown_color */ "./src/component/dropdown_color.ts");


class FillColor extends _dropdown_item__WEBPACK_IMPORTED_MODULE_0__.DropdownItem {
    constructor(color) {
        super('bgcolor', undefined, color);
        this.dd = new _dropdown_color__WEBPACK_IMPORTED_MODULE_1__["default"](this.tag, color);
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
    }
}


/***/ }),

/***/ "./src/component/toolbar/font.ts":
/*!***************************************!*\
  !*** ./src/component/toolbar/font.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Font)
/* harmony export */ });
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _dropdown_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dropdown_font */ "./src/component/dropdown_font.ts");


class Font extends _dropdown_item__WEBPACK_IMPORTED_MODULE_0__.DropdownItem {
    constructor() {
        super('font-name');
        this.dd = new _dropdown_font__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
    }
    getValue(it) {
        return it.key;
    }
}


/***/ }),

/***/ "./src/component/toolbar/font_size.ts":
/*!********************************************!*\
  !*** ./src/component/toolbar/font_size.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Format)
/* harmony export */ });
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _dropdown_fontsize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dropdown_fontsize */ "./src/component/dropdown_fontsize.ts");


class Format extends _dropdown_item__WEBPACK_IMPORTED_MODULE_0__.DropdownItem {
    constructor() {
        super('font-size');
        this.dd = new _dropdown_fontsize__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
    }
    getValue(it) {
        return it.pt;
    }
}


/***/ }),

/***/ "./src/component/toolbar/format.ts":
/*!*****************************************!*\
  !*** ./src/component/toolbar/format.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Format)
/* harmony export */ });
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _dropdown_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dropdown_format */ "./src/component/dropdown_format.ts");


class Format extends _dropdown_item__WEBPACK_IMPORTED_MODULE_0__.DropdownItem {
    constructor() {
        super('format');
        this.dd = new _dropdown_format__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
    }
    getValue(it) {
        return it.key;
    }
}


/***/ }),

/***/ "./src/component/toolbar/formula.ts":
/*!******************************************!*\
  !*** ./src/component/toolbar/formula.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Format)
/* harmony export */ });
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _dropdown_formula__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dropdown_formula */ "./src/component/dropdown_formula.ts");


class Format extends _dropdown_item__WEBPACK_IMPORTED_MODULE_0__.DropdownItem {
    constructor() {
        super('formula');
        this.dd = new _dropdown_formula__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
    }
    getValue(it) {
        return it.key;
    }
}


/***/ }),

/***/ "./src/component/toolbar/freeze.ts":
/*!*****************************************!*\
  !*** ./src/component/toolbar/freeze.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Freeze)
/* harmony export */ });
/* harmony import */ var _toggle_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle_item */ "./src/component/toolbar/toggle_item.ts");

class Freeze extends _toggle_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('freeze');
    }
}


/***/ }),

/***/ "./src/component/toolbar/icon_item.ts":
/*!********************************************!*\
  !*** ./src/component/toolbar/icon_item.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ IconItem)
/* harmony export */ });
/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item */ "./src/component/toolbar/item.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../icon */ "./src/component/icon.ts");


class IconItem extends _item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    element() {
        return super.element()
            .child(new _icon__WEBPACK_IMPORTED_MODULE_1__["default"](this.tag))
            .on('click', () => this.change(this.tag));
    }
    setState(disabled) {
        this.el.disabled(disabled);
    }
}


/***/ }),

/***/ "./src/component/toolbar/index.ts":
/*!****************************************!*\
  !*** ./src/component/toolbar/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Toolbar)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../element */ "./src/component/element.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../event */ "./src/component/event.ts");
/* harmony import */ var _align__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./align */ "./src/component/toolbar/align.ts");
/* harmony import */ var _autofilter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./autofilter */ "./src/component/toolbar/autofilter.ts");
/* harmony import */ var _bold__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bold */ "./src/component/toolbar/bold.ts");
/* harmony import */ var _border__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./border */ "./src/component/toolbar/border.ts");
/* harmony import */ var _clearformat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./clearformat */ "./src/component/toolbar/clearformat.ts");
/* harmony import */ var _fill_color__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fill_color */ "./src/component/toolbar/fill_color.ts");
/* harmony import */ var _font__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./font */ "./src/component/toolbar/font.ts");
/* harmony import */ var _font_size__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./font_size */ "./src/component/toolbar/font_size.ts");
/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./format */ "./src/component/toolbar/format.ts");
/* harmony import */ var _formula__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./formula */ "./src/component/toolbar/formula.ts");
/* harmony import */ var _freeze__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./freeze */ "./src/component/toolbar/freeze.ts");
/* harmony import */ var _italic__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./italic */ "./src/component/toolbar/italic.ts");
/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./item */ "./src/component/toolbar/item.ts");
/* harmony import */ var _merge__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./merge */ "./src/component/toolbar/merge.ts");
/* harmony import */ var _more__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./more */ "./src/component/toolbar/more.ts");
/* harmony import */ var _paintformat__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./paintformat */ "./src/component/toolbar/paintformat.ts");
/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./print */ "./src/component/toolbar/print.ts");
/* harmony import */ var _redo__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./redo */ "./src/component/toolbar/redo.ts");
/* harmony import */ var _strike__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./strike */ "./src/component/toolbar/strike.ts");
/* harmony import */ var _text_color__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./text_color */ "./src/component/toolbar/text_color.ts");
/* harmony import */ var _textwrap__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./textwrap */ "./src/component/toolbar/textwrap.ts");
/* harmony import */ var _underline__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./underline */ "./src/component/toolbar/underline.ts");
/* harmony import */ var _undo__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./undo */ "./src/component/toolbar/undo.ts");
/* harmony import */ var _valign__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./valign */ "./src/component/toolbar/valign.ts");
/* global window */



























function buildDivider() {
    return (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_0__.cssPrefix}-toolbar-divider`);
}
function genBtn(it) {
    const btn = new _item__WEBPACK_IMPORTED_MODULE_15__["default"]();
    btn.el.on('click', () => {
        if (it.onClick)
            it.onClick(this.data.getData(), this.data);
    });
    btn.tip = it.tip || '';
    let { el } = it;
    if (it.icon) {
        el = (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('img').attr('src', it.icon);
    }
    if (el) {
        const icon = (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_0__.cssPrefix}-icon`);
        icon.child(el);
        btn.el.child(icon);
    }
    return btn;
}
class Toolbar {
    data;
    change;
    widthFn;
    isHide;
    items;
    undoEl;
    redoEl;
    paintformatEl;
    clearformatEl;
    formatEl;
    fontEl;
    fontSizeEl;
    boldEl;
    italicEl;
    underlineEl;
    strikeEl;
    textColorEl;
    fillColorEl;
    borderEl;
    mergeEl;
    alignEl;
    valignEl;
    textwrapEl;
    freezeEl;
    autofilterEl;
    formulaEl;
    moreEl;
    el;
    btns;
    btns2;
    constructor(data, widthFn, isHide = false) {
        this.data = data;
        this.change = () => { };
        this.widthFn = widthFn;
        this.isHide = isHide;
        const style = data.defaultStyle();
        this.items = [
            [
                (this.undoEl = new _undo__WEBPACK_IMPORTED_MODULE_25__["default"]()),
                (this.redoEl = new _redo__WEBPACK_IMPORTED_MODULE_20__["default"]()),
                new _print__WEBPACK_IMPORTED_MODULE_19__["default"](),
                (this.paintformatEl = new _paintformat__WEBPACK_IMPORTED_MODULE_18__["default"]()),
                (this.clearformatEl = new _clearformat__WEBPACK_IMPORTED_MODULE_7__["default"]()),
            ],
            buildDivider(),
            [(this.formatEl = new _format__WEBPACK_IMPORTED_MODULE_11__["default"]())],
            buildDivider(),
            [(this.fontEl = new _font__WEBPACK_IMPORTED_MODULE_9__["default"]()), (this.fontSizeEl = new _font_size__WEBPACK_IMPORTED_MODULE_10__["default"]())],
            buildDivider(),
            [
                (this.boldEl = new _bold__WEBPACK_IMPORTED_MODULE_5__["default"]()),
                (this.italicEl = new _italic__WEBPACK_IMPORTED_MODULE_14__["default"]()),
                (this.underlineEl = new _underline__WEBPACK_IMPORTED_MODULE_24__["default"]()),
                (this.strikeEl = new _strike__WEBPACK_IMPORTED_MODULE_21__["default"]()),
                (this.textColorEl = new _text_color__WEBPACK_IMPORTED_MODULE_22__["default"](style.color)),
            ],
            buildDivider(),
            [
                (this.fillColorEl = new _fill_color__WEBPACK_IMPORTED_MODULE_8__["default"](style.bgcolor)),
                (this.borderEl = new _border__WEBPACK_IMPORTED_MODULE_6__["default"]()),
                (this.mergeEl = new _merge__WEBPACK_IMPORTED_MODULE_16__["default"]()),
            ],
            buildDivider(),
            [
                (this.alignEl = new _align__WEBPACK_IMPORTED_MODULE_3__["default"](style.align)),
                (this.valignEl = new _valign__WEBPACK_IMPORTED_MODULE_26__["default"](style.valign)),
                (this.textwrapEl = new _textwrap__WEBPACK_IMPORTED_MODULE_23__["default"]()),
            ],
            buildDivider(),
            [
                (this.freezeEl = new _freeze__WEBPACK_IMPORTED_MODULE_13__["default"]()),
                (this.autofilterEl = new _autofilter__WEBPACK_IMPORTED_MODULE_4__["default"]()),
                (this.formulaEl = new _formula__WEBPACK_IMPORTED_MODULE_12__["default"]()),
            ],
        ];
        const { extendToolbar = {} } = data.settings;
        if (extendToolbar.left && extendToolbar.left.length > 0) {
            this.items.unshift(buildDivider());
            const btns = extendToolbar.left.map(genBtn.bind(this));
            this.items.unshift(btns);
        }
        if (extendToolbar.right && extendToolbar.right.length > 0) {
            this.items.push(buildDivider());
            const btns = extendToolbar.right.map(genBtn.bind(this));
            this.items.push(btns);
        }
        this.items.push([(this.moreEl = new _more__WEBPACK_IMPORTED_MODULE_17__["default"]())]);
        this.el = (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_0__.cssPrefix}-toolbar`);
        this.btns = (0,_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_0__.cssPrefix}-toolbar-btns`);
        this.items.forEach((it) => {
            if (Array.isArray(it)) {
                it.forEach((i) => {
                    this.btns.child(i.el);
                    i.change = (...args) => {
                        this.change(...args);
                    };
                });
            }
            else {
                this.btns.child(it.el);
            }
        });
        this.el.child(this.btns);
        if (isHide) {
            this.el.hide();
        }
        else {
            this.reset();
            setTimeout(() => {
                this.initBtns2();
                this.moreResize();
            }, 0);
            (0,_event__WEBPACK_IMPORTED_MODULE_2__.bind)(window, 'resize', () => {
                this.moreResize();
            });
        }
    }
    moreResize() {
        const { el, btns, moreEl, btns2 } = this;
        const { moreBtns, contentEl } = moreEl.dd;
        el.css('width', `${this.widthFn()}px`);
        const elBox = el.box();
        let sumWidth = 160;
        let sumWidth2 = 12;
        const list1 = [];
        const list2 = [];
        btns2.forEach(([it, w], index) => {
            sumWidth += w;
            if (index === btns2.length - 1 || sumWidth < elBox.width) {
                list1.push(it);
            }
            else {
                sumWidth2 += w;
                list2.push(it);
            }
        });
        btns.html('').children(...list1);
        moreBtns.html('').children(...list2);
        contentEl.css('width', `${sumWidth2}px`);
        if (list2.length > 0) {
            moreEl.show();
        }
        else {
            moreEl.hide();
        }
    }
    initBtns2() {
        this.btns2 = [];
        this.items.forEach((it) => {
            if (Array.isArray(it)) {
                it.forEach(({ el }) => {
                    const rect = el.box();
                    const { marginLeft, marginRight } = el.computedStyle();
                    this.btns2.push([
                        el,
                        rect.width + parseInt(marginLeft, 10) + parseInt(marginRight, 10),
                    ]);
                });
            }
            else {
                const rect = it.box();
                const { marginLeft, marginRight } = it.computedStyle();
                this.btns2.push([
                    it,
                    rect.width + parseInt(marginLeft, 10) + parseInt(marginRight, 10),
                ]);
            }
        });
    }
    paintformatActive() {
        return this.paintformatEl.active();
    }
    paintformatToggle() {
        this.paintformatEl.toggle();
    }
    trigger(type) {
        this[`${type}El`].click();
    }
    resetData(data) {
        this.data = data;
        this.reset();
    }
    reset() {
        if (this.isHide)
            return;
        const { data } = this;
        const style = data.getSelectedCellStyle();
        // console.log('canUndo:', data.canUndo());
        this.undoEl.setState(!data.canUndo());
        this.redoEl.setState(!data.canRedo());
        this.mergeEl.setState(data.canUnmerge(), !data.selector.multiple());
        // this.autofilterEl.setState(!data.canAutofilter());
        // this.mergeEl.disabled();
        // console.log('selectedCell:', style, cell);
        const { font, format } = style;
        this.formatEl.setState(format);
        this.fontEl.setState(font.name);
        this.fontSizeEl.setState(font.size);
        this.boldEl.setState(font.bold);
        this.italicEl.setState(font.italic);
        this.underlineEl.setState(style.underline);
        this.strikeEl.setState(style.strike);
        this.textColorEl.setState(style.color);
        this.fillColorEl.setState(style.bgcolor);
        this.alignEl.setState(style.align);
        this.valignEl.setState(style.valign);
        this.textwrapEl.setState(style.textwrap);
        // console.log('freeze is Active:', data.freezeIsActive());
        this.freezeEl.setState(data.freezeIsActive());
    }
}


/***/ }),

/***/ "./src/component/toolbar/italic.ts":
/*!*****************************************!*\
  !*** ./src/component/toolbar/italic.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Italic)
/* harmony export */ });
/* harmony import */ var _toggle_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle_item */ "./src/component/toolbar/toggle_item.ts");

class Italic extends _toggle_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('font-italic', 'Ctrl+I');
    }
}


/***/ }),

/***/ "./src/component/toolbar/item.ts":
/*!***************************************!*\
  !*** ./src/component/toolbar/item.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Item)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _tooltip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tooltip */ "./src/component/tooltip.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../element */ "./src/component/element.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../locale/locale */ "./src/locale/locale.ts");




class Item {
    tip;
    tag;
    shortcut;
    // value: any;
    el;
    change;
    // tooltip
    // tag: the subclass type
    // shortcut: shortcut key
    constructor(tag, shortcut, value) {
        this.tip = '';
        if (tag) {
            this.tip = (0,_locale_locale__WEBPACK_IMPORTED_MODULE_3__.t)(`toolbar.${tag.replace(/-[a-z]/g, (c) => c[1].toUpperCase())}`);
        }
        if (shortcut) {
            this.tip += ` (${shortcut})`;
        }
        this.tag = tag;
        this.shortcut = shortcut;
        // this.value = value;
        this.el = this.element();
        this.change = () => { };
    }
    element() {
        const { tip } = this;
        return (0,_element__WEBPACK_IMPORTED_MODULE_2__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_0__.cssPrefix}-toolbar-btn`)
            .on('mouseenter', (evt) => {
            if (this.tip)
                (0,_tooltip__WEBPACK_IMPORTED_MODULE_1__.tooltip)(this.tip, evt.target);
        })
            .attr('data-tooltip', tip);
    }
    setState(...args) { }
}


/***/ }),

/***/ "./src/component/toolbar/merge.ts":
/*!****************************************!*\
  !*** ./src/component/toolbar/merge.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Merge)
/* harmony export */ });
/* harmony import */ var _toggle_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle_item */ "./src/component/toolbar/toggle_item.ts");

class Merge extends _toggle_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('merge');
    }
    setState(active, disabled) {
        this.el.active(active).disabled(disabled);
    }
}


/***/ }),

/***/ "./src/component/toolbar/more.ts":
/*!***************************************!*\
  !*** ./src/component/toolbar/more.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ More)
/* harmony export */ });
/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dropdown */ "./src/component/dropdown.ts");
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config */ "./src/config.ts");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../element */ "./src/component/element.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../icon */ "./src/component/icon.ts");





class DropdownMore extends _dropdown__WEBPACK_IMPORTED_MODULE_0__["default"] {
    moreBtns;
    constructor() {
        const icon = new _icon__WEBPACK_IMPORTED_MODULE_4__["default"]('ellipsis');
        const moreBtns = (0,_element__WEBPACK_IMPORTED_MODULE_3__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-toolbar-more`);
        super(icon, 'auto', false, 'bottom-right', moreBtns);
        this.moreBtns = moreBtns;
        this.contentEl.css('max-width', '420px');
    }
}
class More extends _dropdown_item__WEBPACK_IMPORTED_MODULE_1__.DropdownItem {
    constructor() {
        super('more');
        this.dd = new DropdownMore();
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
        this.el.hide();
    }
    show() {
        this.el.show();
    }
    hide() {
        this.el.hide();
    }
}


/***/ }),

/***/ "./src/component/toolbar/paintformat.ts":
/*!**********************************************!*\
  !*** ./src/component/toolbar/paintformat.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Paintformat)
/* harmony export */ });
/* harmony import */ var _toggle_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle_item */ "./src/component/toolbar/toggle_item.ts");

class Paintformat extends _toggle_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('paintformat');
    }
    setState() { }
}


/***/ }),

/***/ "./src/component/toolbar/print.ts":
/*!****************************************!*\
  !*** ./src/component/toolbar/print.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Print)
/* harmony export */ });
/* harmony import */ var _icon_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icon_item */ "./src/component/toolbar/icon_item.ts");

class Print extends _icon_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('print', 'Ctrl+P');
    }
}


/***/ }),

/***/ "./src/component/toolbar/redo.ts":
/*!***************************************!*\
  !*** ./src/component/toolbar/redo.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Redo)
/* harmony export */ });
/* harmony import */ var _icon_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icon_item */ "./src/component/toolbar/icon_item.ts");

class Redo extends _icon_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('redo', 'Ctrl+Y');
    }
}


/***/ }),

/***/ "./src/component/toolbar/strike.ts":
/*!*****************************************!*\
  !*** ./src/component/toolbar/strike.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Strike)
/* harmony export */ });
/* harmony import */ var _toggle_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle_item */ "./src/component/toolbar/toggle_item.ts");

class Strike extends _toggle_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('strike', 'Ctrl+U');
    }
}


/***/ }),

/***/ "./src/component/toolbar/text_color.ts":
/*!*********************************************!*\
  !*** ./src/component/toolbar/text_color.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextColor)
/* harmony export */ });
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _dropdown_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dropdown_color */ "./src/component/dropdown_color.ts");


class TextColor extends _dropdown_item__WEBPACK_IMPORTED_MODULE_0__.DropdownItem {
    constructor(color) {
        super('color', undefined, color);
        this.dd = new _dropdown_color__WEBPACK_IMPORTED_MODULE_1__["default"](this.tag, color);
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
    }
}


/***/ }),

/***/ "./src/component/toolbar/textwrap.ts":
/*!*******************************************!*\
  !*** ./src/component/toolbar/textwrap.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Textwrap)
/* harmony export */ });
/* harmony import */ var _toggle_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle_item */ "./src/component/toolbar/toggle_item.ts");

class Textwrap extends _toggle_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('textwrap');
    }
}


/***/ }),

/***/ "./src/component/toolbar/toggle_item.ts":
/*!**********************************************!*\
  !*** ./src/component/toolbar/toggle_item.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ToggleItem)
/* harmony export */ });
/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item */ "./src/component/toolbar/item.ts");
/* harmony import */ var _icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../icon */ "./src/component/icon.ts");


class ToggleItem extends _item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    element() {
        const { tag } = this;
        return super
            .element()
            .child(new _icon__WEBPACK_IMPORTED_MODULE_1__["default"](tag))
            .on('click', () => this.click());
    }
    click() {
        this.change(this.tag, this.toggle());
    }
    setState(active, disabled) {
        this.el.active(active);
    }
    toggle() {
        return this.el.toggle();
    }
    active() {
        return this.el.hasClass('active');
    }
}


/***/ }),

/***/ "./src/component/toolbar/underline.ts":
/*!********************************************!*\
  !*** ./src/component/toolbar/underline.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Underline)
/* harmony export */ });
/* harmony import */ var _toggle_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle_item */ "./src/component/toolbar/toggle_item.ts");

class Underline extends _toggle_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('underline', 'Ctrl+U');
    }
}


/***/ }),

/***/ "./src/component/toolbar/undo.ts":
/*!***************************************!*\
  !*** ./src/component/toolbar/undo.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Undo)
/* harmony export */ });
/* harmony import */ var _icon_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icon_item */ "./src/component/toolbar/icon_item.ts");

class Undo extends _icon_item__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super('undo', 'Ctrl+Z');
    }
}


/***/ }),

/***/ "./src/component/toolbar/valign.ts":
/*!*****************************************!*\
  !*** ./src/component/toolbar/valign.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Valign)
/* harmony export */ });
/* harmony import */ var _dropdown_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown_item */ "./src/component/toolbar/dropdown_item.ts");
/* harmony import */ var _dropdown_align__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dropdown_align */ "./src/component/dropdown_align.ts");


class Valign extends _dropdown_item__WEBPACK_IMPORTED_MODULE_0__.DropdownItem {
    constructor(value) {
        super('valign', '', value);
        this.dd = new _dropdown_align__WEBPACK_IMPORTED_MODULE_1__["default"](['top', 'middle', 'bottom'], value);
        this.dd.change = (it) => this.change(this.tag, this.getValue(it));
        this.el.child(this.dd);
    }
}


/***/ }),

/***/ "./src/component/tooltip.ts":
/*!**********************************!*\
  !*** ./src/component/tooltip.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tooltip": () => (/* binding */ tooltip)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./src/component/element.ts");
/* harmony import */ var _event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event */ "./src/component/event.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./src/config.ts");
/* global document */



function tooltip(html, target) {
    if (target.classList.contains('active')) {
        return;
    }
    const { left, top, width, height } = target.getBoundingClientRect();
    const el = (0,_element__WEBPACK_IMPORTED_MODULE_0__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_2__.cssPrefix}-tooltip`).html(html).show();
    document.body.appendChild(el.el);
    const elBox = el.box();
    // console.log('elBox:', elBox);
    el.css('left', `${left + width / 2 - elBox.width / 2}px`).css('top', `${top + height + 2}px`);
    (0,_event__WEBPACK_IMPORTED_MODULE_1__.bind)(target, 'mouseleave', () => {
        if (document.body.contains(el.el)) {
            document.body.removeChild(el.el);
        }
    });
    (0,_event__WEBPACK_IMPORTED_MODULE_1__.bind)(target, 'click', () => {
        if (document.body.contains(el.el)) {
            document.body.removeChild(el.el);
        }
    });
}


/***/ }),

/***/ "./src/config.ts":
/*!***********************!*\
  !*** ./src/config.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cssPrefix": () => (/* binding */ cssPrefix),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "dpr": () => (/* binding */ dpr)
/* harmony export */ });
/* global window */
const cssPrefix = 'x-spreadsheet';
const dpr = window.devicePixelRatio || 1;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    cssPrefix,
    dpr,
});


/***/ }),

/***/ "./src/core/alphabet.ts":
/*!******************************!*\
  !*** ./src/core/alphabet.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "expr2expr": () => (/* binding */ expr2expr),
/* harmony export */   "expr2xy": () => (/* binding */ expr2xy),
/* harmony export */   "indexAt": () => (/* binding */ indexAt),
/* harmony export */   "stringAt": () => (/* binding */ stringAt),
/* harmony export */   "xy2expr": () => (/* binding */ xy2expr)
/* harmony export */ });
const alphabets = [
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
];
/** index number 2 letters
 * @example stringAt(26) ==> 'AA'
 * @date 2019-10-10
 * @export
 * @param {number} index
 * @returns {string}
 */
function stringAt(index) {
    let str = '';
    let cindex = index;
    while (cindex >= alphabets.length) {
        cindex /= alphabets.length;
        cindex -= 1;
        str += alphabets[parseInt(cindex, 10) % alphabets.length];
    }
    const last = index % alphabets.length;
    str += alphabets[last];
    return str;
}
/** translate letter in A1-tag to number
 * @date 2019-10-10
 * @export
 * @param {string} str "AA" in A1-tag "AA1"
 * @returns {number}
 */
function indexAt(str) {
    let ret = 0;
    for (let i = 0; i !== str.length; ++i)
        ret = 26 * ret + str.charCodeAt(i) - 64;
    return ret - 1;
}
// B10 => x,y
/** translate A1-tag to XY-tag
 * @date 2019-10-10
 * @export
 * @param {tagA1} src
 * @returns {tagXY}
 */
function expr2xy(src) {
    let x = '';
    let y = '';
    for (let i = 0; i < src.length; i += 1) {
        if (src.charAt(i) >= '0' && src.charAt(i) <= '9') {
            y += src.charAt(i);
        }
        else {
            x += src.charAt(i);
        }
    }
    return [indexAt(x), parseInt(y, 10) - 1];
}
/** translate XY-tag to A1-tag
 * @example x,y => B10
 * @date 2019-10-10
 * @export
 * @param {number} x
 * @param {number} y
 * @returns {tagA1}
 */
function xy2expr(x, y) {
    return `${stringAt(x)}${y + 1}`;
}
/** translate A1-tag src by (xn, yn)
 * @date 2019-10-10
 * @export
 * @param {tagA1} src
 * @param {number} xn
 * @param {number} yn
 * @returns {tagA1}
 */
function expr2expr(src, xn, yn, condition = (x, y) => true) {
    if (xn === 0 && yn === 0)
        return src;
    const [x, y] = expr2xy(src);
    if (!condition(x, y))
        return src;
    return xy2expr(x + xn, y + yn);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    stringAt,
    indexAt,
    expr2xy,
    xy2expr,
    expr2expr,
});


/***/ }),

/***/ "./src/core/auto_filter.ts":
/*!*********************************!*\
  !*** ./src/core/auto_filter.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AutoFilter)
/* harmony export */ });
/* harmony import */ var _cell_range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell_range */ "./src/core/cell_range.ts");

// operator: all|eq|neq|gt|gte|lt|lte|in|be
// value:
//   in => []
//   be => [min, max]
class Filter {
    ci;
    operator;
    value;
    constructor(ci, operator, value) {
        this.ci = ci;
        this.operator = operator;
        this.value = value;
    }
    set(operator, value) {
        this.operator = operator;
        this.value = value;
    }
    includes(v) {
        const { operator, value } = this;
        if (operator === 'all') {
            return true;
        }
        if (operator === 'in') {
            return value.includes(v);
        }
        return false;
    }
    vlength() {
        const { operator, value } = this;
        if (operator === 'in') {
            return value.length;
        }
        return 0;
    }
    getData() {
        const { ci, operator, value } = this;
        return { ci, operator, value };
    }
}
class Sort {
    ci;
    order;
    constructor(ci, order) {
        this.ci = ci;
        this.order = order;
    }
    asc() {
        return this.order === 'asc';
    }
    desc() {
        return this.order === 'desc';
    }
}
class AutoFilter {
    ref;
    filters;
    sort;
    constructor() {
        this.ref = null;
        this.filters = [];
        this.sort = null;
    }
    setData({ ref, filters, sort }) {
        if (ref != null) {
            this.ref = ref;
            this.filters = filters.map(it => new Filter(it.ci, it.operator, it.value));
            if (sort) {
                this.sort = new Sort(sort.ci, sort.order);
            }
        }
    }
    getData() {
        if (this.active()) {
            const { ref, filters, sort } = this;
            return { ref, filters: filters.map(it => it.getData()), sort };
        }
        return {};
    }
    addFilter(ci, operator, value) {
        const filter = this.getFilter(ci);
        if (filter == null) {
            this.filters.push(new Filter(ci, operator, value));
        }
        else {
            filter.set(operator, value);
        }
    }
    setSort(ci, order) {
        this.sort = order ? new Sort(ci, order) : null;
    }
    includes(ri, ci) {
        if (this.active()) {
            return this.hrange().includes(ri, ci);
        }
        return false;
    }
    getSort(ci) {
        const { sort } = this;
        if (sort && sort.ci === ci) {
            return sort;
        }
        return null;
    }
    getFilter(ci) {
        const { filters } = this;
        for (let i = 0; i < filters.length; i += 1) {
            if (filters[i].ci === ci) {
                return filters[i];
            }
        }
        return null;
    }
    filteredRows(getCell) {
        // const ary = [];
        // let lastri = 0;
        const rset = new Set();
        const fset = new Set();
        if (this.active()) {
            const { sri, eri } = this.range();
            const { filters } = this;
            for (let ri = sri + 1; ri <= eri; ri += 1) {
                for (let i = 0; i < filters.length; i += 1) {
                    const filter = filters[i];
                    const cell = getCell(ri, filter.ci);
                    const ctext = cell ? cell.text : '';
                    if (!filter.includes(ctext)) {
                        rset.add(ri);
                        break;
                    }
                    else {
                        fset.add(ri);
                    }
                }
            }
        }
        return { rset, fset };
    }
    items(ci, getCell) {
        const m = {};
        if (this.active()) {
            const { sri, eri } = this.range();
            for (let ri = sri + 1; ri <= eri; ri += 1) {
                const cell = getCell(ri, ci);
                if (cell !== null && !/^\s*$/.test(cell.text)) {
                    const key = cell.text;
                    const cnt = (m[key] || 0) + 1;
                    m[key] = cnt;
                }
                else {
                    m[''] = (m[''] || 0) + 1;
                }
            }
        }
        return m;
    }
    range() {
        return _cell_range__WEBPACK_IMPORTED_MODULE_0__.CellRange.valueOf(this.ref);
    }
    hrange() {
        const r = this.range();
        r.eri = r.sri;
        return r;
    }
    clear() {
        this.ref = null;
        this.filters = [];
        this.sort = null;
    }
    active() {
        return this.ref !== null;
    }
}


/***/ }),

/***/ "./src/core/cell.ts":
/*!**************************!*\
  !*** ./src/core/cell.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "infixExprToSuffixExpr": () => (/* binding */ infixExprToSuffixExpr)
/* harmony export */ });
/* harmony import */ var _alphabet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alphabet */ "./src/core/alphabet.ts");
/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper */ "./src/core/helper.ts");


// Converting infix expression to a suffix expression
// src: AVERAGE(SUM(A1,A2), B1) + 50 + B20
// return: [A1, A2], SUM[, B1],AVERAGE,50,+,B20,+
const infixExprToSuffixExpr = (src) => {
    const operatorStack = [];
    const stack = [];
    let subStrs = []; // SUM, A1, B2, 50 ...
    let fnArgType = 0; // 1 => , 2 => :
    let fnArgOperator = '';
    let fnArgsLen = 1; // A1,A2,A3...
    let oldc = '';
    for (let i = 0; i < src.length; i += 1) {
        const c = src.charAt(i);
        if (c !== ' ') {
            if (c >= 'a' && c <= 'z') {
                subStrs.push(c.toUpperCase());
            }
            else if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || c === '.') {
                subStrs.push(c);
            }
            else if (c === '"') {
                i += 1;
                while (src.charAt(i) !== '"') {
                    subStrs.push(src.charAt(i));
                    i += 1;
                }
                stack.push(`"${subStrs.join('')}`);
                subStrs = [];
            }
            else if (c === '-' && /[+\-*/,(]/.test(oldc)) {
                subStrs.push(c);
            }
            else {
                // console.log('subStrs:', subStrs.join(''), stack);
                if (c !== '(' && subStrs.length > 0) {
                    stack.push(subStrs.join(''));
                }
                if (c === ')') {
                    let c1 = operatorStack.pop();
                    if (fnArgType === 2) {
                        // fn argument range => A1:B5
                        try {
                            const [ex, ey] = (0,_alphabet__WEBPACK_IMPORTED_MODULE_0__.expr2xy)(stack.pop());
                            const [sx, sy] = (0,_alphabet__WEBPACK_IMPORTED_MODULE_0__.expr2xy)(stack.pop());
                            // console.log('::', sx, sy, ex, ey);
                            let rangelen = 0;
                            for (let x = sx; x <= ex; x += 1) {
                                for (let y = sy; y <= ey; y += 1) {
                                    stack.push((0,_alphabet__WEBPACK_IMPORTED_MODULE_0__.xy2expr)(x, y));
                                    rangelen += 1;
                                }
                            }
                            stack.push([c1, rangelen]);
                        }
                        catch (e) {
                            // console.log(e);
                        }
                    }
                    else if (fnArgType === 1 || fnArgType === 3) {
                        if (fnArgType === 3)
                            stack.push(fnArgOperator);
                        // fn argument => A1,A2,B5
                        stack.push([c1, fnArgsLen]);
                        fnArgsLen = 1;
                    }
                    else {
                        // console.log('c1:', c1, fnArgType, stack, operatorStack);
                        while (c1 !== '(') {
                            stack.push(c1);
                            if (operatorStack.length <= 0)
                                break;
                            c1 = operatorStack.pop();
                        }
                    }
                    fnArgType = 0;
                }
                else if (c === '=' || c === '>' || c === '<') {
                    const nc = src.charAt(i + 1);
                    fnArgOperator = c;
                    if (nc === '=' || nc === '-') {
                        fnArgOperator += nc;
                        i += 1;
                    }
                    fnArgType = 3;
                }
                else if (c === ':') {
                    fnArgType = 2;
                }
                else if (c === ',') {
                    if (fnArgType === 3) {
                        stack.push(fnArgOperator);
                    }
                    fnArgType = 1;
                    fnArgsLen += 1;
                }
                else if (c === '(' && subStrs.length > 0) {
                    // function
                    operatorStack.push(subStrs.join(''));
                }
                else {
                    // priority: */ > +-
                    // console.log('xxxx:', operatorStack, c, stack);
                    if (operatorStack.length > 0 && (c === '+' || c === '-')) {
                        let top = operatorStack[operatorStack.length - 1];
                        if (top !== '(')
                            stack.push(operatorStack.pop());
                        if (top === '*' || top === '/') {
                            while (operatorStack.length > 0) {
                                top = operatorStack[operatorStack.length - 1];
                                if (top !== '(')
                                    stack.push(operatorStack.pop());
                                else
                                    break;
                            }
                        }
                    }
                    else if (operatorStack.length > 0) {
                        const top = operatorStack[operatorStack.length - 1];
                        if (top === '*' || top === '/')
                            stack.push(operatorStack.pop());
                    }
                    operatorStack.push(c);
                }
                subStrs = [];
            }
            oldc = c;
        }
    }
    if (subStrs.length > 0) {
        stack.push(subStrs.join(''));
    }
    while (operatorStack.length > 0) {
        stack.push(operatorStack.pop());
    }
    return stack;
};
const evalSubExpr = (subExpr, cellRender) => {
    const [fl] = subExpr;
    let expr = subExpr;
    if (fl === '"') {
        return subExpr.substring(1);
    }
    let ret = 1;
    if (fl === '-') {
        expr = subExpr.substring(1);
        ret = -1;
    }
    if (expr[0] >= '0' && expr[0] <= '9') {
        return ret * Number(expr);
    }
    const [x, y] = (0,_alphabet__WEBPACK_IMPORTED_MODULE_0__.expr2xy)(expr);
    return ret * cellRender(x, y);
};
// evaluate the suffix expression
// srcStack: <= infixExprToSufixExpr
// formulaMap: {'SUM': {}, ...}
// cellRender: (x, y) => {}
const evalSuffixExpr = (srcStack, formulaMap, cellRender, cellList) => {
    const stack = [];
    // console.log(':::::formulaMap:', formulaMap);
    for (let i = 0; i < srcStack.length; i += 1) {
        // console.log(':::>>>', srcStack[i]);
        const expr = srcStack[i];
        const fc = expr[0];
        if (expr === '+') {
            const top = stack.pop();
            stack.push((0,_helper__WEBPACK_IMPORTED_MODULE_1__.numberCalc)('+', stack.pop(), top));
        }
        else if (expr === '-') {
            if (stack.length === 1) {
                const top = stack.pop();
                stack.push((0,_helper__WEBPACK_IMPORTED_MODULE_1__.numberCalc)('*', top, -1));
            }
            else {
                const top = stack.pop();
                stack.push((0,_helper__WEBPACK_IMPORTED_MODULE_1__.numberCalc)('-', stack.pop(), top));
            }
        }
        else if (expr === '*') {
            stack.push((0,_helper__WEBPACK_IMPORTED_MODULE_1__.numberCalc)('*', stack.pop(), stack.pop()));
        }
        else if (expr === '/') {
            const top = stack.pop();
            stack.push((0,_helper__WEBPACK_IMPORTED_MODULE_1__.numberCalc)('/', stack.pop(), top));
        }
        else if (fc === '=' || fc === '>' || fc === '<') {
            let top = stack.pop();
            if (!Number.isNaN(top))
                top = Number(top);
            let left = stack.pop();
            if (!Number.isNaN(left))
                left = Number(left);
            let ret = false;
            if (fc === '=') {
                ret = (left === top);
            }
            else if (expr === '>') {
                ret = (left > top);
            }
            else if (expr === '>=') {
                ret = (left >= top);
            }
            else if (expr === '<') {
                ret = (left < top);
            }
            else if (expr === '<=') {
                ret = (left <= top);
            }
            stack.push(ret);
        }
        else if (Array.isArray(expr)) {
            const [formula, len] = expr;
            const params = [];
            for (let j = 0; j < len; j += 1) {
                params.push(stack.pop());
            }
            stack.push(formulaMap[formula].render(params.reverse()));
        }
        else {
            if (cellList.includes(expr)) {
                return 0;
            }
            if ((fc >= 'a' && fc <= 'z') || (fc >= 'A' && fc <= 'Z')) {
                cellList.push(expr);
            }
            stack.push(evalSubExpr(expr, cellRender));
            cellList.pop();
        }
        // console.log('stack:', stack);
    }
    return stack[0];
};
const cellRender = (src, formulaMap, getCellText, cellList = []) => {
    if (src[0] === '=') {
        const stack = infixExprToSuffixExpr(src.substring(1));
        if (stack.length <= 0)
            return src;
        return evalSuffixExpr(stack, formulaMap, (x, y) => cellRender(getCellText(x, y), formulaMap, getCellText, cellList), cellList);
    }
    return src;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    render: cellRender,
});



/***/ }),

/***/ "./src/core/cell_range.ts":
/*!********************************!*\
  !*** ./src/core/cell_range.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CellRange": () => (/* binding */ CellRange),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _alphabet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alphabet */ "./src/core/alphabet.ts");

class CellRange {
    sri;
    sci;
    eri;
    eci;
    w;
    h;
    constructor(sri, sci, eri, eci, w = 0, h = 0) {
        this.sri = sri;
        this.sci = sci;
        this.eri = eri;
        this.eci = eci;
        this.w = w;
        this.h = h;
    }
    set(sri, sci, eri, eci) {
        this.sri = sri;
        this.sci = sci;
        this.eri = eri;
        this.eci = eci;
    }
    multiple() {
        return this.eri - this.sri > 0 || this.eci - this.sci > 0;
    }
    // cell-index: ri, ci
    // cell-ref: A10
    includes(...args) {
        let [ri, ci] = [0, 0];
        if (args.length === 1) {
            [ci, ri] = (0,_alphabet__WEBPACK_IMPORTED_MODULE_0__.expr2xy)(args[0]);
        }
        else if (args.length === 2) {
            [ri, ci] = args;
        }
        const { sri, sci, eri, eci } = this;
        return sri <= ri && ri <= eri && sci <= ci && ci <= eci;
    }
    each(cb, rowFilter = (i) => true) {
        const { sri, sci, eri, eci } = this;
        for (let i = sri; i <= eri; i += 1) {
            if (rowFilter(i)) {
                for (let j = sci; j <= eci; j += 1) {
                    cb(i, j);
                }
            }
        }
    }
    contains(other) {
        return (this.sri <= other.sri &&
            this.sci <= other.sci &&
            this.eri >= other.eri &&
            this.eci >= other.eci);
    }
    // within
    within(other) {
        return (this.sri >= other.sri &&
            this.sci >= other.sci &&
            this.eri <= other.eri &&
            this.eci <= other.eci);
    }
    // disjoint
    disjoint(other) {
        return (this.sri > other.eri ||
            this.sci > other.eci ||
            other.sri > this.eri ||
            other.sci > this.eci);
    }
    // intersects
    intersects(other) {
        return (this.sri <= other.eri &&
            this.sci <= other.eci &&
            other.sri <= this.eri &&
            other.sci <= this.eci);
    }
    // union
    union(other) {
        const { sri, sci, eri, eci } = this;
        return new CellRange(other.sri < sri ? other.sri : sri, other.sci < sci ? other.sci : sci, other.eri > eri ? other.eri : eri, other.eci > eci ? other.eci : eci);
    }
    // intersection
    // intersection(other) {}
    // Returns Array<CellRange> that represents that part of this that does not intersect with other
    // difference
    difference(other) {
        const ret = [];
        const addRet = (sri, sci, eri, eci) => {
            ret.push(new CellRange(sri, sci, eri, eci));
        };
        const { sri, sci, eri, eci } = this;
        const dsr = other.sri - sri;
        const dsc = other.sci - sci;
        const der = eri - other.eri;
        const dec = eci - other.eci;
        if (dsr > 0) {
            addRet(sri, sci, other.sri - 1, eci);
            if (der > 0) {
                addRet(other.eri + 1, sci, eri, eci);
                if (dsc > 0) {
                    addRet(other.sri, sci, other.eri, other.sci - 1);
                }
                if (dec > 0) {
                    addRet(other.sri, other.eci + 1, other.eri, eci);
                }
            }
            else {
                if (dsc > 0) {
                    addRet(other.sri, sci, eri, other.sci - 1);
                }
                if (dec > 0) {
                    addRet(other.sri, other.eci + 1, eri, eci);
                }
            }
        }
        else if (der > 0) {
            addRet(other.eri + 1, sci, eri, eci);
            if (dsc > 0) {
                addRet(sri, sci, other.eri, other.sci - 1);
            }
            if (dec > 0) {
                addRet(sri, other.eci + 1, other.eri, eci);
            }
        }
        if (dsc > 0) {
            addRet(sri, sci, eri, other.sci - 1);
            if (dec > 0) {
                addRet(sri, other.eri + 1, eri, eci);
                if (dsr > 0) {
                    addRet(sri, other.sci, other.sri - 1, other.eci);
                }
                if (der > 0) {
                    addRet(other.sri + 1, other.sci, eri, other.eci);
                }
            }
            else {
                if (dsr > 0) {
                    addRet(sri, other.sci, other.sri - 1, eci);
                }
                if (der > 0) {
                    addRet(other.sri + 1, other.sci, eri, eci);
                }
            }
        }
        else if (dec > 0) {
            addRet(eri, other.eci + 1, eri, eci);
            if (dsr > 0) {
                addRet(sri, sci, other.sri - 1, other.eci);
            }
            if (der > 0) {
                addRet(other.eri + 1, sci, eri, other.eci);
            }
        }
        return ret;
    }
    size() {
        return [this.eri - this.sri + 1, this.eci - this.sci + 1];
    }
    toString() {
        const { sri, sci, eri, eci } = this;
        let ref = (0,_alphabet__WEBPACK_IMPORTED_MODULE_0__.xy2expr)(sci, sri);
        if (this.multiple()) {
            ref = `${ref}:${(0,_alphabet__WEBPACK_IMPORTED_MODULE_0__.xy2expr)(eci, eri)}`;
        }
        return ref;
    }
    clone() {
        const { sri, sci, eri, eci, w, h } = this;
        return new CellRange(sri, sci, eri, eci, w, h);
    }
    /*
    toJSON() {
      return this.toString();
    }
    */
    equals(other) {
        return (this.eri === other.eri &&
            this.eci === other.eci &&
            this.sri === other.sri &&
            this.sci === other.sci);
    }
    static valueOf(ref) {
        // B1:B8, B1 => 1 x 1 cell range
        const refs = ref.split(':');
        const [sci, sri] = (0,_alphabet__WEBPACK_IMPORTED_MODULE_0__.expr2xy)(refs[0]);
        let [eri, eci] = [sri, sci];
        if (refs.length > 1) {
            [eci, eri] = (0,_alphabet__WEBPACK_IMPORTED_MODULE_0__.expr2xy)(refs[1]);
        }
        return new CellRange(sri, sci, eri, eci);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CellRange);



/***/ }),

/***/ "./src/core/clipboard.ts":
/*!*******************************!*\
  !*** ./src/core/clipboard.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Clipboard)
/* harmony export */ });
class Clipboard {
    range;
    state;
    constructor() {
        this.range = null; // CellRange
        this.state = 'clear';
    }
    copy(cellRange) {
        this.range = cellRange;
        this.state = 'copy';
        return this;
    }
    cut(cellRange) {
        this.range = cellRange;
        this.state = 'cut';
        return this;
    }
    isCopy() {
        return this.state === 'copy';
    }
    isCut() {
        return this.state === 'cut';
    }
    isClear() {
        return this.state === 'clear';
    }
    clear() {
        this.range = null;
        this.state = 'clear';
    }
}


/***/ }),

/***/ "./src/core/col.ts":
/*!*************************!*\
  !*** ./src/core/col.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Cols": () => (/* binding */ Cols),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper */ "./src/core/helper.ts");

class Cols {
    _;
    len;
    width;
    indexWidth;
    minWidth;
    constructor({ len, width, indexWidth, minWidth, }) {
        this._ = {};
        this.len = len;
        this.width = width;
        this.indexWidth = indexWidth;
        this.minWidth = minWidth;
    }
    setData(d) {
        if (d.len) {
            this.len = d.len;
            delete d.len;
        }
        this._ = d;
    }
    getData() {
        const { len } = this;
        return Object.assign({ len }, this._);
    }
    getWidth(i) {
        if (this.isHide(i))
            return 0;
        const col = this._[i];
        if (col && col.width) {
            return col.width;
        }
        return this.width;
    }
    getOrNew(ci) {
        this._[ci] = this._[ci] || {};
        return this._[ci];
    }
    setWidth(ci, width) {
        const col = this.getOrNew(ci);
        col.width = width;
    }
    unhide(idx) {
        let index = idx;
        while (index > 0) {
            index -= 1;
            if (this.isHide(index)) {
                this.setHide(index, false);
            }
            else
                break;
        }
    }
    isHide(ci) {
        const col = this._[ci];
        return col && col.hide;
    }
    setHide(ci, v) {
        const col = this.getOrNew(ci);
        if (v === true)
            col.hide = true;
        else
            delete col.hide;
    }
    setStyle(ci, style) {
        const col = this.getOrNew(ci);
        col.style = style;
    }
    sumWidth(min, max) {
        return _helper__WEBPACK_IMPORTED_MODULE_0__["default"].rangeSum(min, max, i => this.getWidth(i));
    }
    totalWidth() {
        return this.sumWidth(0, this.len);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});



/***/ }),

/***/ "./src/core/data_proxy.ts":
/*!********************************!*\
  !*** ./src/core/data_proxy.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataProxy),
/* harmony export */   "defaultSettings": () => (/* binding */ defaultSettings)
/* harmony export */ });
/* harmony import */ var _selector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selector */ "./src/core/selector.ts");
/* harmony import */ var _scroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scroll */ "./src/core/scroll.ts");
/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./history */ "./src/core/history.ts");
/* harmony import */ var _clipboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clipboard */ "./src/core/clipboard.ts");
/* harmony import */ var _auto_filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./auto_filter */ "./src/core/auto_filter.ts");
/* harmony import */ var _merge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./merge */ "./src/core/merge.ts");
/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helper */ "./src/core/helper.ts");
/* harmony import */ var _row__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./row */ "./src/core/row.ts");
/* harmony import */ var _col__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./col */ "./src/core/col.ts");
/* harmony import */ var _validation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./validation */ "./src/core/validation.ts");
/* harmony import */ var _cell_range__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cell_range */ "./src/core/cell_range.ts");
/* harmony import */ var _alphabet__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./alphabet */ "./src/core/alphabet.ts");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");
/* global document */













// private methods
/*
 * {
 *  name: ''
 *  freeze: [0, 0],
 *  formats: [],
 *  styles: [
 *    {
 *      bgcolor: '',
 *      align: '',
 *      valign: '',
 *      textwrap: false,
 *      strike: false,
 *      underline: false,
 *      color: '',
 *      format: 1,
 *      border: {
 *        left: [style, color],
 *        right: [style, color],
 *        top: [style, color],
 *        bottom: [style, color],
 *      },
 *      font: {
 *        name: 'Helvetica',
 *        size: 10,
 *        bold: false,
 *        italic: false,
 *      }
 *    }
 *  ],
 *  merges: [
 *    'A1:F11',
 *    ...
 *  ],
 *  rows: {
 *    1: {
 *      height: 50,
 *      style: 1,
 *      cells: {
 *        1: {
 *          style: 2,
 *          type: 'string',
 *          text: '',
 *          value: '', // cal result
 *        }
 *      }
 *    },
 *    ...
 *  },
 *  cols: {
 *    2: { width: 100, style: 1 }
 *  }
 * }
 */
const defaultSettings = {
    mode: 'edit',
    view: {
        height: () => document.documentElement.clientHeight,
        width: () => document.documentElement.clientWidth,
    },
    showGrid: true,
    showToolbar: true,
    showContextmenu: true,
    showBottomBar: true,
    row: {
        len: 100,
        height: 25,
    },
    col: {
        len: 26,
        width: 100,
        indexWidth: 60,
        minWidth: 60,
    },
    style: {
        bgcolor: '#ffffff',
        align: 'left',
        valign: 'middle',
        textwrap: false,
        strike: false,
        underline: false,
        color: '#0a0a0a',
        font: {
            name: 'Arial',
            size: 10,
            bold: false,
            italic: false,
        },
        format: 'normal',
    },
};
const toolbarHeight = 41;
const bottombarHeight = 41;
// src: cellRange
// dst: cellRange
function canPaste(src, dst, error = (arg) => { }) {
    const { merges } = this;
    const cellRange = dst.clone();
    const [srn, scn] = src.size();
    const [drn, dcn] = dst.size();
    if (srn > drn) {
        cellRange.eri = dst.sri + srn - 1;
    }
    if (scn > dcn) {
        cellRange.eci = dst.sci + scn - 1;
    }
    if (merges.intersects(cellRange)) {
        error((0,_locale_locale__WEBPACK_IMPORTED_MODULE_12__.t)('error.pasteForMergedCell'));
        return false;
    }
    return true;
}
function copyPaste(srcCellRange, dstCellRange, what, autofill = false) {
    const { rows, merges } = this;
    // delete dest merge
    if (what === 'all' || what === 'format') {
        rows.deleteCells(dstCellRange, what);
        merges.deleteWithin(dstCellRange);
    }
    rows.copyPaste(srcCellRange, dstCellRange, what, autofill, (ri, ci, cell) => {
        if (cell && cell.merge) {
            // console.log('cell:', ri, ci, cell);
            const [rn, cn] = cell.merge;
            if (rn <= 0 && cn <= 0)
                return;
            merges.add(new _cell_range__WEBPACK_IMPORTED_MODULE_10__.CellRange(ri, ci, ri + rn, ci + cn));
        }
    });
}
function cutPaste(srcCellRange, dstCellRange) {
    const { clipboard, rows, merges } = this;
    rows.cutPaste(srcCellRange, dstCellRange);
    merges.move(srcCellRange, dstCellRange.sri - srcCellRange.sri, dstCellRange.sci - srcCellRange.sci);
    clipboard.clear();
}
// bss: { top, bottom, left, right }
function setStyleBorder(ri, ci, bss) {
    const { styles, rows } = this;
    const cell = rows.getCellOrNew(ri, ci);
    let cstyle = {};
    if (cell.style !== undefined) {
        cstyle = _helper__WEBPACK_IMPORTED_MODULE_6__["default"].cloneDeep(styles[cell.style]);
    }
    cstyle = _helper__WEBPACK_IMPORTED_MODULE_6__["default"].merge(cstyle, { border: bss });
    cell.style = this.addStyle(cstyle);
}
function setStyleBorders({ mode, style, color }) {
    const { styles, selector, rows } = this;
    const { sri, sci, eri, eci } = selector.range;
    const multiple = !this.isSingleSelected();
    if (!multiple) {
        if (mode === 'inside' || mode === 'horizontal' || mode === 'vertical') {
            return;
        }
    }
    if (mode === 'outside' && !multiple) {
        setStyleBorder.call(this, sri, sci, {
            top: [style, color],
            bottom: [style, color],
            left: [style, color],
            right: [style, color],
        });
    }
    else if (mode === 'none') {
        selector.range.each((ri, ci) => {
            const cell = rows.getCell(ri, ci);
            if (cell && cell.style !== undefined) {
                const ns = _helper__WEBPACK_IMPORTED_MODULE_6__["default"].cloneDeep(styles[cell.style]);
                delete ns.border;
                // ['bottom', 'top', 'left', 'right'].forEach((prop) => {
                //   if (ns[prop]) delete ns[prop];
                // });
                cell.style = this.addStyle(ns);
            }
        });
    }
    else if (mode === 'all' ||
        mode === 'inside' ||
        mode === 'outside' ||
        mode === 'horizontal' ||
        mode === 'vertical') {
        const merges = [];
        for (let ri = sri; ri <= eri; ri += 1) {
            for (let ci = sci; ci <= eci; ci += 1) {
                // jump merges -- start
                const mergeIndexes = [];
                for (let ii = 0; ii < merges.length; ii += 1) {
                    const [mri, mci, rn, cn] = merges[ii];
                    if (ri === mri + rn + 1)
                        mergeIndexes.push(ii);
                    if (mri <= ri && ri <= mri + rn) {
                        if (ci === mci) {
                            ci += cn + 1;
                            break;
                        }
                    }
                }
                mergeIndexes.forEach((it) => merges.splice(it, 1));
                if (ci > eci)
                    break;
                // jump merges -- end
                const cell = rows.getCell(ri, ci);
                let [rn, cn] = [0, 0];
                if (cell && cell.merge) {
                    [rn, cn] = cell.merge;
                    merges.push([ri, ci, rn, cn]);
                }
                const mrl = rn > 0 && ri + rn === eri;
                const mcl = cn > 0 && ci + cn === eci;
                let bss = {};
                if (mode === 'all') {
                    bss = {
                        bottom: [style, color],
                        top: [style, color],
                        left: [style, color],
                        right: [style, color],
                    };
                }
                else if (mode === 'inside') {
                    if (!mcl && ci < eci)
                        bss.right = [style, color];
                    if (!mrl && ri < eri)
                        bss.bottom = [style, color];
                }
                else if (mode === 'horizontal') {
                    if (!mrl && ri < eri)
                        bss.bottom = [style, color];
                }
                else if (mode === 'vertical') {
                    if (!mcl && ci < eci)
                        bss.right = [style, color];
                }
                else if (mode === 'outside' && multiple) {
                    if (sri === ri)
                        bss.top = [style, color];
                    if (mrl || eri === ri)
                        bss.bottom = [style, color];
                    if (sci === ci)
                        bss.left = [style, color];
                    if (mcl || eci === ci)
                        bss.right = [style, color];
                }
                if (Object.keys(bss).length > 0) {
                    setStyleBorder.call(this, ri, ci, bss);
                }
                ci += cn;
            }
        }
    }
    else if (mode === 'top' || mode === 'bottom') {
        for (let ci = sci; ci <= eci; ci += 1) {
            if (mode === 'top') {
                setStyleBorder.call(this, sri, ci, { top: [style, color] });
                ci += rows.getCellMerge(sri, ci)[1];
            }
            if (mode === 'bottom') {
                setStyleBorder.call(this, eri, ci, { bottom: [style, color] });
                ci += rows.getCellMerge(eri, ci)[1];
            }
        }
    }
    else if (mode === 'left' || mode === 'right') {
        for (let ri = sri; ri <= eri; ri += 1) {
            if (mode === 'left') {
                setStyleBorder.call(this, ri, sci, { left: [style, color] });
                ri += rows.getCellMerge(ri, sci)[0];
            }
            if (mode === 'right') {
                setStyleBorder.call(this, ri, eci, { right: [style, color] });
                ri += rows.getCellMerge(ri, eci)[0];
            }
        }
    }
}
function getCellRowByY(y, scrollOffsety) {
    const { rows } = this;
    const fsh = this.freezeTotalHeight();
    // console.log('y:', y, ', fsh:', fsh);
    let inits = rows.height;
    if (fsh + rows.height < y)
        inits -= scrollOffsety;
    // handle ri in autofilter
    const frset = this.exceptRowSet;
    let ri = 0;
    let top = inits;
    let { height } = rows;
    for (; ri < rows.len; ri += 1) {
        if (top > y)
            break;
        if (!frset.has(ri)) {
            height = rows.getHeight(ri);
            top += height;
        }
    }
    top -= height;
    // console.log('ri:', ri, ', top:', top, ', height:', height);
    if (top <= 0) {
        return { ri: -1, top: 0, height };
    }
    return { ri: ri - 1, top, height };
}
function getCellColByX(x, scrollOffsetx) {
    const { cols } = this;
    const fsw = this.freezeTotalWidth();
    let inits = cols.indexWidth;
    if (fsw + cols.indexWidth < x)
        inits -= scrollOffsetx;
    const [ci, left, width] = _helper__WEBPACK_IMPORTED_MODULE_6__["default"].rangeReduceIf(0, cols.len, inits, cols.indexWidth, x, (i) => cols.getWidth(i));
    if (left <= 0) {
        return { ci: -1, left: 0, width: cols.indexWidth };
    }
    return { ci: ci - 1, left, width };
}
class DataProxy {
    settings;
    name;
    freeze;
    styles;
    merges;
    rows;
    cols;
    validations;
    hyperlinks;
    comments;
    selector;
    scroll;
    history;
    clipboard;
    autoFilter;
    change;
    exceptRowSet;
    sortedRowMap;
    unsortedRowMap;
    constructor(name, settings) {
        this.settings = _helper__WEBPACK_IMPORTED_MODULE_6__["default"].merge(defaultSettings, settings || {});
        // save data begin
        this.name = name || 'sheet';
        this.freeze = [0, 0];
        this.styles = []; // Array<Style>
        this.merges = new _merge__WEBPACK_IMPORTED_MODULE_5__.Merges(); // [CellRange, ...]
        this.rows = new _row__WEBPACK_IMPORTED_MODULE_7__.Rows(this.settings.row);
        this.cols = new _col__WEBPACK_IMPORTED_MODULE_8__.Cols(this.settings.col);
        this.validations = new _validation__WEBPACK_IMPORTED_MODULE_9__.Validations();
        this.hyperlinks = {};
        this.comments = {};
        // save data end
        // don't save object
        this.selector = new _selector__WEBPACK_IMPORTED_MODULE_0__["default"]();
        this.scroll = new _scroll__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this.history = new _history__WEBPACK_IMPORTED_MODULE_2__["default"]();
        this.clipboard = new _clipboard__WEBPACK_IMPORTED_MODULE_3__["default"]();
        this.autoFilter = new _auto_filter__WEBPACK_IMPORTED_MODULE_4__["default"]();
        this.change = () => { };
        this.exceptRowSet = new Set();
        this.sortedRowMap = new Map();
        this.unsortedRowMap = new Map();
    }
    addValidation(mode, ref, validator) {
        // console.log('mode:', mode, ', ref:', ref, ', validator:', validator);
        this.changeData(() => {
            this.validations.add(mode, ref, validator);
        });
    }
    removeValidation() {
        const { range } = this.selector;
        this.changeData(() => {
            this.validations.remove(range);
        });
    }
    getSelectedValidator() {
        const { ri, ci } = this.selector;
        const v = this.validations.get(ri, ci);
        return v ? v.validator : null;
    }
    getSelectedValidation() {
        const { ri, ci, range } = this.selector;
        const v = this.validations.get(ri, ci);
        const ret = { ref: range.toString() };
        if (v !== null) {
            ret.mode = v.mode;
            ret.validator = v.validator;
        }
        return ret;
    }
    canUndo() {
        return this.history.canUndo();
    }
    canRedo() {
        return this.history.canRedo();
    }
    undo() {
        this.history.undo(this.getData(), (d) => {
            this.setData(d);
        });
    }
    redo() {
        this.history.redo(this.getData(), (d) => {
            this.setData(d);
        });
    }
    copy() {
        this.clipboard.copy(this.selector.range);
    }
    copyToSystemClipboard(evt) {
        let copyText = [];
        const { sri, eri, sci, eci } = this.selector.range;
        for (let ri = sri; ri <= eri; ri += 1) {
            const row = [];
            for (let ci = sci; ci <= eci; ci += 1) {
                const cell = this.getCell(ri, ci);
                row.push((cell && cell.text) || '');
            }
            copyText.push(row);
        }
        // Adding \n and why not adding \r\n is to support online office and client MS office and WPS
        copyText = copyText.map((row) => row.join('\t')).join('\n');
        // why used this
        // cuz http protocol will be blocked request clipboard by browser
        if (evt) {
            evt.clipboardData.clearData();
            evt.clipboardData.setData('text/plain', copyText);
            evt.preventDefault();
        }
        // this need https protocol
        /* global navigator */
        if (navigator.clipboard) {
            navigator.clipboard.writeText(copyText).then(() => { }, (err) => {
                console.log('text copy to the system clipboard error  ', copyText, err);
            });
        }
    }
    cut() {
        this.clipboard.cut(this.selector.range);
    }
    // what: all | text | format
    paste(what = 'all', error = () => { }) {
        // console.log('sIndexes:', sIndexes);
        const { clipboard, selector } = this;
        if (clipboard.isClear())
            return false;
        if (!canPaste.call(this, clipboard.range, selector.range, error))
            return false;
        this.changeData(() => {
            if (clipboard.isCopy()) {
                copyPaste.call(this, clipboard.range, selector.range, what);
            }
            else if (clipboard.isCut()) {
                cutPaste.call(this, clipboard.range, selector.range);
            }
        });
        return true;
    }
    pasteFromSystemClipboard(resetSheet, eventTrigger) {
        const { selector } = this;
        navigator.clipboard.readText().then((content) => {
            const contentToPaste = this.parseClipboardContent(content);
            let startRow = selector.ri;
            contentToPaste.forEach((row) => {
                let startColumn = selector.ci;
                row.forEach((cellContent) => {
                    this.setCellText(startRow, startColumn, cellContent, 'input');
                    startColumn += 1;
                });
                startRow += 1;
            });
            resetSheet();
            eventTrigger(this.rows.getData());
        });
    }
    parseClipboardContent(clipboardContent) {
        const parsedData = [];
        // first we need to figure out how many rows we need to paste
        const rows = clipboardContent.split('\n');
        // for each row parse cell data
        let i = 0;
        rows.forEach((row) => {
            parsedData[i] = row.split('\t');
            i += 1;
        });
        return parsedData;
    }
    pasteFromText(txt) {
        let lines = [];
        if (/\r\n/.test(txt))
            lines = txt.split('\r\n').map((it) => it.replace(/"/g, '').split('\t'));
        else
            lines = txt.split('\n').map((it) => it.replace(/"/g, '').split('\t'));
        if (lines.length) {
            const { rows, selector } = this;
            this.changeData(() => {
                rows.paste(lines, selector.range);
            });
        }
    }
    autofill(cellRange, what, error = () => { }) {
        const srcRange = this.selector.range;
        if (!canPaste.call(this, srcRange, cellRange, error))
            return false;
        this.changeData(() => {
            copyPaste.call(this, srcRange, cellRange, what, true);
        });
        return true;
    }
    clearClipboard() {
        this.clipboard.clear();
    }
    calSelectedRangeByEnd(ri, ci) {
        const { selector, rows, cols, merges } = this;
        let { sri, sci, eri, eci } = selector.range;
        const cri = selector.ri;
        const cci = selector.ci;
        let [nri, nci] = [ri, ci];
        if (ri < 0)
            nri = rows.len - 1;
        if (ci < 0)
            nci = cols.len - 1;
        if (nri > cri)
            [sri, eri] = [cri, nri];
        else
            [sri, eri] = [nri, cri];
        if (nci > cci)
            [sci, eci] = [cci, nci];
        else
            [sci, eci] = [nci, cci];
        selector.range = merges.union(new _cell_range__WEBPACK_IMPORTED_MODULE_10__.CellRange(sri, sci, eri, eci));
        selector.range = merges.union(selector.range);
        // console.log('selector.range:', selector.range);
        return selector.range;
    }
    calSelectedRangeByStart(ri, ci) {
        const { selector, rows, cols, merges } = this;
        let cellRange = merges.getFirstIncludes(ri, ci);
        // console.log('cellRange:', cellRange, ri, ci, merges);
        if (cellRange === null) {
            cellRange = new _cell_range__WEBPACK_IMPORTED_MODULE_10__.CellRange(ri, ci, ri, ci);
            if (ri === -1) {
                cellRange.sri = 0;
                cellRange.eri = rows.len - 1;
            }
            if (ci === -1) {
                cellRange.sci = 0;
                cellRange.eci = cols.len - 1;
            }
        }
        selector.range = cellRange;
        return cellRange;
    }
    setSelectedCellAttr(property, value) {
        this.changeData(() => {
            const { selector, styles, rows } = this;
            if (property === 'merge') {
                if (value)
                    this.merge();
                else
                    this.unmerge();
            }
            else if (property === 'border') {
                setStyleBorders.call(this, value);
            }
            else if (property === 'formula') {
                // console.log('>>>', selector.multiple());
                const { ri, ci, range } = selector;
                if (selector.multiple()) {
                    const [rn, cn] = selector.size();
                    const { sri, sci, eri, eci } = range;
                    if (rn > 1) {
                        for (let i = sci; i <= eci; i += 1) {
                            const cell = rows.getCellOrNew(eri + 1, i);
                            cell.text = `=${value}(${(0,_alphabet__WEBPACK_IMPORTED_MODULE_11__.xy2expr)(i, sri)}:${(0,_alphabet__WEBPACK_IMPORTED_MODULE_11__.xy2expr)(i, eri)})`;
                        }
                    }
                    else if (cn > 1) {
                        const cell = rows.getCellOrNew(ri, eci + 1);
                        cell.text = `=${value}(${(0,_alphabet__WEBPACK_IMPORTED_MODULE_11__.xy2expr)(sci, ri)}:${(0,_alphabet__WEBPACK_IMPORTED_MODULE_11__.xy2expr)(eci, ri)})`;
                    }
                }
                else {
                    const cell = rows.getCellOrNew(ri, ci);
                    cell.text = `=${value}()`;
                }
            }
            else {
                selector.range.each((ri, ci) => {
                    const cell = rows.getCellOrNew(ri, ci);
                    let cstyle = {};
                    if (cell.style !== undefined) {
                        cstyle = _helper__WEBPACK_IMPORTED_MODULE_6__["default"].cloneDeep(styles[cell.style]);
                    }
                    if (property === 'format') {
                        cstyle.format = value;
                        cell.style = this.addStyle(cstyle);
                    }
                    else if (property === 'font-bold' ||
                        property === 'font-italic' ||
                        property === 'font-name' ||
                        property === 'font-size') {
                        const nfont = {};
                        nfont[property.split('-')[1]] = value;
                        cstyle.font = Object.assign(cstyle.font || {}, nfont);
                        cell.style = this.addStyle(cstyle);
                    }
                    else if (property === 'strike' ||
                        property === 'textwrap' ||
                        property === 'underline' ||
                        property === 'align' ||
                        property === 'valign' ||
                        property === 'color' ||
                        property === 'bgcolor') {
                        cstyle[property] = value;
                        cell.style = this.addStyle(cstyle);
                    }
                    else {
                        cell[property] = value;
                    }
                });
            }
        });
    }
    // state: input | finished
    setSelectedCellText(text, state = 'input') {
        const { autoFilter, selector, rows } = this;
        const { ri, ci } = selector;
        let nri = ri;
        if (this.unsortedRowMap.has(ri)) {
            nri = this.unsortedRowMap.get(ri);
        }
        const oldCell = rows.getCell(nri, ci);
        const oldText = oldCell ? oldCell.text : '';
        this.setCellText(nri, ci, text, state);
        // replace filter.value
        if (autoFilter.active()) {
            const filter = autoFilter.getFilter(ci);
            if (filter) {
                const vIndex = filter.value.findIndex((v) => v === oldText);
                if (vIndex >= 0) {
                    filter.value.splice(vIndex, 1, text);
                }
                // console.log('filter:', filter, oldCell);
            }
        }
        // this.resetAutoFilter();
    }
    getSelectedCell() {
        const { ri, ci } = this.selector;
        let nri = ri;
        if (this.unsortedRowMap.has(ri)) {
            nri = this.unsortedRowMap.get(ri);
        }
        return this.rows.getCell(nri, ci);
    }
    xyInSelectedRect(x, y) {
        const { left, top, width, height } = this.getSelectedRect();
        const x1 = x - this.cols.indexWidth;
        const y1 = y - this.rows.height;
        // console.log('x:', x, ',y:', y, 'left:', left, 'top:', top);
        return x1 > left && x1 < left + width && y1 > top && y1 < top + height;
    }
    getSelectedRect() {
        return this.getRect(this.selector.range);
    }
    getClipboardRect() {
        const { clipboard } = this;
        if (!clipboard.isClear()) {
            return this.getRect(clipboard.range);
        }
        return { left: -100, top: -100 };
    }
    getRect(cellRange) {
        const { scroll, rows, cols, exceptRowSet } = this;
        const { sri, sci, eri, eci } = cellRange;
        // console.log('sri:', sri, ',sci:', sci, ', eri:', eri, ', eci:', eci);
        // no selector
        if (sri < 0 && sci < 0) {
            return {
                left: 0,
                l: 0,
                top: 0,
                t: 0,
                scroll,
            };
        }
        const left = cols.sumWidth(0, sci);
        const top = rows.sumHeight(0, sri, exceptRowSet);
        const height = rows.sumHeight(sri, eri + 1, exceptRowSet);
        const width = cols.sumWidth(sci, eci + 1);
        // console.log('sri:', sri, ', sci:', sci, ', eri:', eri, ', eci:', eci);
        let left0 = left - scroll.x;
        let top0 = top - scroll.y;
        const fsh = this.freezeTotalHeight();
        const fsw = this.freezeTotalWidth();
        if (fsw > 0 && fsw > left) {
            left0 = left;
        }
        if (fsh > 0 && fsh > top) {
            top0 = top;
        }
        return {
            l: left,
            t: top,
            left: left0,
            top: top0,
            height,
            width,
            scroll,
        };
    }
    getCellRectByXY(x, y) {
        const { scroll, merges, rows, cols } = this;
        let { ri, top, height } = getCellRowByY.call(this, y, scroll.y);
        let { ci, left, width } = getCellColByX.call(this, x, scroll.x);
        if (ci === -1) {
            width = cols.totalWidth();
        }
        if (ri === -1) {
            height = rows.totalHeight();
        }
        if (ri >= 0 || ci >= 0) {
            const merge = merges.getFirstIncludes(ri, ci);
            if (merge) {
                ri = merge.sri;
                ci = merge.sci;
                ({ left, top, width, height } = this.cellRect(ri, ci));
            }
        }
        return {
            ri,
            ci,
            left,
            top,
            width,
            height,
        };
    }
    isSingleSelected() {
        const { sri, sci, eri, eci } = this.selector.range;
        const cell = this.getCell(sri, sci);
        if (cell && cell.merge) {
            const [rn, cn] = cell.merge;
            if (sri + rn === eri && sci + cn === eci)
                return true;
        }
        return !this.selector.multiple();
    }
    canUnmerge() {
        const { sri, sci, eri, eci } = this.selector.range;
        const cell = this.getCell(sri, sci);
        if (cell && cell.merge) {
            const [rn, cn] = cell.merge;
            if (sri + rn === eri && sci + cn === eci)
                return true;
        }
        return false;
    }
    merge() {
        const { selector, rows } = this;
        if (this.isSingleSelected())
            return;
        const [rn, cn] = selector.size();
        // console.log('merge:', rn, cn);
        if (rn > 1 || cn > 1) {
            const { sri, sci } = selector.range;
            this.changeData(() => {
                const cell = rows.getCellOrNew(sri, sci);
                cell.merge = [rn - 1, cn - 1];
                this.merges.add(selector.range);
                // delete merge cells
                this.rows.deleteCells(selector.range);
                // console.log('cell:', cell, this.d);
                this.rows.setCell(sri, sci, cell);
            });
        }
    }
    unmerge() {
        const { selector } = this;
        if (!this.isSingleSelected())
            return;
        const { sri, sci } = selector.range;
        this.changeData(() => {
            this.rows.deleteCell(sri, sci, 'merge');
            this.merges.deleteWithin(selector.range);
        });
    }
    canAutofilter() {
        return !this.autoFilter.active();
    }
    autofilter() {
        const { autoFilter, selector } = this;
        this.changeData(() => {
            if (autoFilter.active()) {
                autoFilter.clear();
                this.exceptRowSet = new Set();
                this.sortedRowMap = new Map();
                this.unsortedRowMap = new Map();
            }
            else {
                autoFilter.ref = selector.range.toString();
            }
        });
    }
    setAutoFilter(ci, order, operator, value) {
        const { autoFilter } = this;
        autoFilter.addFilter(ci, operator, value);
        autoFilter.setSort(ci, order);
        this.resetAutoFilter();
    }
    resetAutoFilter() {
        const { autoFilter, rows } = this;
        if (!autoFilter.active())
            return;
        const { sort } = autoFilter;
        const { rset, fset } = autoFilter.filteredRows((r, c) => rows.getCell(r, c));
        const fary = Array.from(fset);
        const oldAry = Array.from(fset);
        if (sort) {
            fary.sort((a, b) => {
                if (sort.order === 'asc') {
                    return a - b;
                }
                ;
                if (sort.order === 'desc') {
                    return b - a;
                }
                ;
                return 0;
            });
        }
        this.exceptRowSet = rset;
        this.sortedRowMap = new Map();
        this.unsortedRowMap = new Map();
        fary.forEach((it, index) => {
            this.sortedRowMap.set(oldAry[index], it);
            this.unsortedRowMap.set(it, oldAry[index]);
        });
    }
    deleteCell(what = 'all') {
        const { selector } = this;
        this.changeData(() => {
            this.rows.deleteCells(selector.range, what);
            if (what === 'all' || what === 'format') {
                this.merges.deleteWithin(selector.range);
            }
        });
    }
    // type: row | column
    insert(type, n = 1) {
        this.changeData(() => {
            const { sri, sci } = this.selector.range;
            const { rows, merges, cols } = this;
            let si = sri;
            if (type === 'row') {
                rows.insert(sri, n);
            }
            else if (type === 'column') {
                rows.insertColumn(sci, n);
                si = sci;
                cols.len += 1;
            }
            merges.shift(type, si, n, (ri, ci, rn, cn) => {
                const cell = rows.getCell(ri, ci);
                cell.merge[0] += rn;
                cell.merge[1] += cn;
            });
        });
    }
    // type: row | column
    delete(type) {
        this.changeData(() => {
            const { rows, merges, selector, cols } = this;
            const { range } = selector;
            const { sri, sci, eri, eci } = selector.range;
            const [rsize, csize] = selector.range.size();
            let si = sri;
            let size = rsize;
            if (type === 'row') {
                rows.delete(sri, eri);
            }
            else if (type === 'column') {
                rows.deleteColumn(sci, eci);
                si = range.sci;
                size = csize;
                cols.len -= eci - sci + 1;
            }
            // console.log('type:', type, ', si:', si, ', size:', size);
            merges.shift(type, si, -size, (ri, ci, rn, cn) => {
                // console.log('ri:', ri, ', ci:', ci, ', rn:', rn, ', cn:', cn);
                const cell = rows.getCell(ri, ci);
                cell.merge[0] += rn;
                cell.merge[1] += cn;
                if (cell.merge[0] === 0 && cell.merge[1] === 0) {
                    delete cell.merge;
                }
            });
        });
    }
    scrollx(x, cb) {
        const { scroll, freeze, cols } = this;
        const [, fci] = freeze;
        const [ci, left, width] = _helper__WEBPACK_IMPORTED_MODULE_6__["default"].rangeReduceIf(fci, cols.len, 0, 0, x, (i) => cols.getWidth(i));
        // console.log('fci:', fci, ', ci:', ci);
        let x1 = left;
        if (x > 0)
            x1 += width;
        if (scroll.x !== x1) {
            scroll.ci = x > 0 ? ci : 0;
            scroll.x = x1;
            cb();
        }
    }
    scrolly(y, cb) {
        const { scroll, freeze, rows } = this;
        const [fri] = freeze;
        const [ri, top, height] = _helper__WEBPACK_IMPORTED_MODULE_6__["default"].rangeReduceIf(fri, rows.len, 0, 0, y, (i) => rows.getHeight(i));
        let y1 = top;
        if (y > 0)
            y1 += height;
        // console.log('ri:', ri, ' ,y:', y1);
        if (scroll.y !== y1) {
            scroll.ri = y > 0 ? ri : 0;
            scroll.y = y1;
            cb();
        }
    }
    cellRect(ri, ci) {
        const { rows, cols } = this;
        const left = cols.sumWidth(0, ci);
        const top = rows.sumHeight(0, ri);
        const cell = rows.getCell(ri, ci);
        let width = cols.getWidth(ci);
        let height = rows.getHeight(ri);
        if (cell !== null) {
            if (cell.merge) {
                const [rn, cn] = cell.merge;
                // console.log('cell.merge:', cell.merge);
                if (rn > 0) {
                    for (let i = 1; i <= rn; i += 1) {
                        height += rows.getHeight(ri + i);
                    }
                }
                if (cn > 0) {
                    for (let i = 1; i <= cn; i += 1) {
                        width += cols.getWidth(ci + i);
                    }
                }
            }
        }
        // console.log('data:', this.d);
        return {
            left,
            top,
            width,
            height,
            cell,
        };
    }
    getCell(ri, ci) {
        return this.rows.getCell(ri, ci);
    }
    getCellTextOrDefault(ri, ci) {
        const cell = this.getCell(ri, ci);
        return cell && cell.text ? cell.text : '';
    }
    getCellStyle(ri, ci) {
        const cell = this.getCell(ri, ci);
        if (cell && cell.style !== undefined) {
            return this.styles[cell.style];
        }
        return null;
    }
    getCellStyleOrDefault(ri, ci) {
        const { styles, rows } = this;
        const cell = rows.getCell(ri, ci);
        const cellStyle = cell && cell.style !== undefined ? styles[cell.style] : {};
        return _helper__WEBPACK_IMPORTED_MODULE_6__["default"].merge(this.defaultStyle(), cellStyle);
    }
    getSelectedCellStyle() {
        const { ri, ci } = this.selector;
        return this.getCellStyleOrDefault(ri, ci);
    }
    // state: input | finished
    setCellText(ri, ci, text, state) {
        const { rows, history, validations } = this;
        if (state === 'finished') {
            rows.setCellText(ri, ci, '');
            history.add(this.getData());
            rows.setCellText(ri, ci, text);
        }
        else {
            rows.setCellText(ri, ci, text);
            this.change(this.getData());
        }
        // validator
        validations.validate(ri, ci, text);
    }
    freezeIsActive() {
        const [ri, ci] = this.freeze;
        return ri > 0 || ci > 0;
    }
    setFreeze(ri, ci) {
        this.changeData(() => {
            this.freeze = [ri, ci];
        });
    }
    freezeTotalWidth() {
        return this.cols.sumWidth(0, this.freeze[1]);
    }
    freezeTotalHeight() {
        return this.rows.sumHeight(0, this.freeze[0]);
    }
    setRowHeight(ri, height) {
        this.changeData(() => {
            this.rows.setHeight(ri, height);
        });
    }
    setColWidth(ci, width) {
        this.changeData(() => {
            this.cols.setWidth(ci, width);
        });
    }
    viewHeight() {
        const { view, showToolbar, showBottomBar } = this.settings;
        let h = view.height();
        if (showBottomBar) {
            h -= bottombarHeight;
        }
        if (showToolbar) {
            h -= toolbarHeight;
        }
        return h;
    }
    viewWidth() {
        return this.settings.view.width();
    }
    freezeViewRange() {
        const [ri, ci] = this.freeze;
        return new _cell_range__WEBPACK_IMPORTED_MODULE_10__.CellRange(0, 0, ri - 1, ci - 1, this.freezeTotalWidth(), this.freezeTotalHeight());
    }
    contentRange() {
        const { rows, cols } = this;
        const [ri, ci] = rows.maxCell();
        const h = rows.sumHeight(0, ri + 1);
        const w = cols.sumWidth(0, ci + 1);
        return new _cell_range__WEBPACK_IMPORTED_MODULE_10__.CellRange(0, 0, ri, ci, w, h);
    }
    exceptRowTotalHeight(sri, eri) {
        const { exceptRowSet, rows } = this;
        const exceptRows = Array.from(exceptRowSet);
        let exceptRowTH = 0;
        exceptRows.forEach((ri) => {
            if (ri < sri || ri > eri) {
                const height = rows.getHeight(ri);
                exceptRowTH += height;
            }
        });
        return exceptRowTH;
    }
    viewRange() {
        const { scroll, rows, cols, freeze, exceptRowSet } = this;
        // console.log('scroll:', scroll, ', freeze:', freeze)
        let { ri, ci } = scroll;
        if (ri <= 0)
            [ri] = freeze;
        if (ci <= 0)
            [, ci] = freeze;
        let [x, y] = [0, 0];
        let [eri, eci] = [rows.len, cols.len];
        for (let i = ri; i < rows.len; i += 1) {
            if (!exceptRowSet.has(i)) {
                y += rows.getHeight(i);
                eri = i;
            }
            if (y > this.viewHeight())
                break;
        }
        for (let j = ci; j < cols.len; j += 1) {
            x += cols.getWidth(j);
            eci = j;
            if (x > this.viewWidth())
                break;
        }
        // console.log(ri, ci, eri, eci, x, y);
        return new _cell_range__WEBPACK_IMPORTED_MODULE_10__.CellRange(ri, ci, eri, eci, x, y);
    }
    eachMergesInView(viewRange, cb) {
        this.merges.filterIntersects(viewRange).forEach((it) => cb(it));
    }
    hideRowsOrCols() {
        const { rows, cols, selector } = this;
        const [rlen, clen] = selector.size();
        const { sri, sci, eri, eci } = selector.range;
        if (rlen === rows.len) {
            for (let ci = sci; ci <= eci; ci += 1) {
                cols.setHide(ci, true);
            }
        }
        else if (clen === cols.len) {
            for (let ri = sri; ri <= eri; ri += 1) {
                rows.setHide(ri, true);
            }
        }
    }
    // type: row | col
    // index row-index | col-index
    unhideRowsOrCols(type, index) {
        this[`${type}s`].unhide(index);
    }
    rowEach(min, max, cb) {
        let y = 0;
        const { rows } = this;
        const frset = this.exceptRowSet;
        const frary = [...frset];
        let offset = 0;
        for (let i = 0; i < frary.length; i += 1) {
            if (frary[i] < min) {
                offset += 1;
            }
        }
        // console.log('min:', min, ', max:', max, ', scroll:', scroll);
        for (let i = min + offset; i <= max + offset; i += 1) {
            if (frset.has(i)) {
                offset += 1;
            }
            else {
                const rowHeight = rows.getHeight(i);
                if (rowHeight > 0) {
                    cb(i, y, rowHeight);
                    y += rowHeight;
                    if (y > this.viewHeight())
                        break;
                }
            }
        }
    }
    colEach(min, max, cb) {
        let x = 0;
        const { cols } = this;
        for (let i = min; i <= max; i += 1) {
            const colWidth = cols.getWidth(i);
            if (colWidth > 0) {
                cb(i, x, colWidth);
                x += colWidth;
                if (x > this.viewWidth())
                    break;
            }
        }
    }
    defaultStyle() {
        return this.settings.style;
    }
    addStyle(nstyle) {
        const { styles } = this;
        // console.log('old.styles:', styles, nstyle);
        for (let i = 0; i < styles.length; i += 1) {
            const style = styles[i];
            if (_helper__WEBPACK_IMPORTED_MODULE_6__["default"].equals(style, nstyle))
                return i;
        }
        styles.push(nstyle);
        return styles.length - 1;
    }
    changeData(cb) {
        this.history.add(this.getData());
        cb();
        this.change(this.getData());
    }
    setData(d) {
        Object.keys(d).forEach((property) => {
            if (property === 'merges' ||
                property === 'rows' ||
                property === 'cols' ||
                property === 'validations') {
                this[property].setData(d[property]);
            }
            else if (property === 'freeze') {
                const [x, y] = (0,_alphabet__WEBPACK_IMPORTED_MODULE_11__.expr2xy)(d[property]);
                this.freeze = [y, x];
            }
            else if (property === 'autofilter') {
                this.autoFilter.setData(d[property]);
            }
            else if (d[property] !== undefined) {
                this[property] = d[property];
            }
        });
        return this;
    }
    getData() {
        const { name, freeze, styles, merges, rows, cols, validations, autoFilter, } = this;
        return {
            name,
            freeze: (0,_alphabet__WEBPACK_IMPORTED_MODULE_11__.xy2expr)(freeze[1], freeze[0]),
            styles,
            merges: merges.getData(),
            rows: rows.getData(),
            cols: cols.getData(),
            validations: validations.getData(),
            autofilter: autoFilter.getData(),
        };
    }
}


/***/ }),

/***/ "./src/core/font.ts":
/*!**************************!*\
  !*** ./src/core/font.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "baseFonts": () => (/* binding */ baseFonts),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "fontSizes": () => (/* binding */ fontSizes),
/* harmony export */   "fonts": () => (/* binding */ fonts),
/* harmony export */   "getFontSizePxByPt": () => (/* binding */ getFontSizePxByPt)
/* harmony export */ });
// docs
/** default font list
 * @type {BaseFont[]}
 */
const baseFonts = [
    { key: 'Arial', title: 'Arial' },
    { key: 'Helvetica', title: 'Helvetica' },
    { key: 'Source Sans Pro', title: 'Source Sans Pro' },
    { key: 'Comic Sans MS', title: 'Comic Sans MS' },
    { key: 'Courier New', title: 'Courier New' },
    { key: 'Verdana', title: 'Verdana' },
    { key: 'Lato', title: 'Lato' },
];
/** default fontSize list
 * @type {FontSize[]}
 */
const fontSizes = [
    { pt: 7.5, px: 10 },
    { pt: 8, px: 11 },
    { pt: 9, px: 12 },
    { pt: 10, px: 13 },
    { pt: 10.5, px: 14 },
    { pt: 11, px: 15 },
    { pt: 12, px: 16 },
    { pt: 14, px: 18.7 },
    { pt: 15, px: 20 },
    { pt: 16, px: 21.3 },
    { pt: 18, px: 24 },
    { pt: 22, px: 29.3 },
    { pt: 24, px: 32 },
    { pt: 26, px: 34.7 },
    { pt: 36, px: 48 },
    { pt: 42, px: 56 },
    // { pt: 54, px: 71.7 },
    // { pt: 63, px: 83.7 },
    // { pt: 72, px: 95.6 },
];
/** map pt to px
 * @date 2019-10-10
 * @param {fontsizePT} pt
 * @returns {fontsizePX}
 */
function getFontSizePxByPt(pt) {
    for (let i = 0; i < fontSizes.length; i += 1) {
        const fontSize = fontSizes[i];
        if (fontSize.pt === pt) {
            return fontSize.px;
        }
    }
    return pt;
}
/** transform baseFonts to map
 * @date 2019-10-10
 * @param {BaseFont[]} [ary=[]]
 * @returns {object}
 */
function fonts(ary = []) {
    const map = {};
    baseFonts.concat(ary).forEach((f) => {
        map[f.key] = f;
    });
    return map;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});



/***/ }),

/***/ "./src/core/format.ts":
/*!****************************!*\
  !*** ./src/core/format.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "baseFormats": () => (/* binding */ baseFormats),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "formatm": () => (/* binding */ formatm)
/* harmony export */ });
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");

const formatStringRender = v => v;
const formatNumberRender = (v) => {
    // match "-12.1" or "12" or "12.1"
    if (/^(-?\d*.?\d*)$/.test(v)) {
        const v1 = Number(v).toFixed(2).toString();
        const [first, ...parts] = v1.split('\\.');
        return [first.replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,'), ...parts];
    }
    return v;
};
const baseFormats = [
    {
        key: 'normal',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.normal'),
        type: 'string',
        render: formatStringRender,
    },
    {
        key: 'text',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.text'),
        type: 'string',
        render: formatStringRender,
    },
    {
        key: 'number',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.number'),
        type: 'number',
        label: '1,000.12',
        render: formatNumberRender,
    },
    {
        key: 'percent',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.percent'),
        type: 'number',
        label: '10.12%',
        render: v => `${v}%`,
    },
    {
        key: 'rmb',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.rmb'),
        type: 'number',
        label: '￥10.00',
        render: v => `￥${formatNumberRender(v)}`,
    },
    {
        key: 'usd',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.usd'),
        type: 'number',
        label: '$10.00',
        render: v => `$${formatNumberRender(v)}`,
    },
    {
        key: 'eur',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.eur'),
        type: 'number',
        label: '€10.00',
        render: v => `€${formatNumberRender(v)}`,
    },
    {
        key: 'date',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.date'),
        type: 'date',
        label: '26/09/2008',
        render: formatStringRender,
    },
    {
        key: 'time',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.time'),
        type: 'date',
        label: '15:59:00',
        render: formatStringRender,
    },
    {
        key: 'datetime',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.datetime'),
        type: 'date',
        label: '26/09/2008 15:59:00',
        render: formatStringRender,
    },
    {
        key: 'duration',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('format.duration'),
        type: 'date',
        label: '24:01:00',
        render: formatStringRender,
    },
];
// const formats = (ary = []) => {
//   const map = {};
//   baseFormats.concat(ary).forEach((f) => {
//     map[f.key] = f;
//   });
//   return map;
// };
const formatm = {};
baseFormats.forEach((f) => {
    formatm[f.key] = f;
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});



/***/ }),

/***/ "./src/core/formula.ts":
/*!*****************************!*\
  !*** ./src/core/formula.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "baseFormulas": () => (/* binding */ baseFormulas),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "formulam": () => (/* binding */ formulam),
/* harmony export */   "formulas": () => (/* binding */ formulas)
/* harmony export */ });
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");
/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper */ "./src/core/helper.ts");
/**
  formula:
    key
    title
    render
*/
/**
 * @typedef {object} Formula
 * @property {string} key
 * @property {function} title
 * @property {function} render
 */


/** @type {Formula[]} */
const baseFormulas = [
    {
        key: 'SUM',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('formula.sum'),
        render: ary => ary.reduce((a, b) => (0,_helper__WEBPACK_IMPORTED_MODULE_1__.numberCalc)('+', a, b), 0),
    },
    {
        key: 'AVERAGE',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('formula.average'),
        render: ary => ary.reduce((a, b) => Number(a) + Number(b), 0) / ary.length,
    },
    {
        key: 'MAX',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('formula.max'),
        render: ary => Math.max(...ary.map(v => Number(v))),
    },
    {
        key: 'MIN',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('formula.min'),
        render: ary => Math.min(...ary.map(v => Number(v))),
    },
    {
        key: 'IF',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('formula._if'),
        render: ([b, t, f]) => (b ? t : f),
    },
    {
        key: 'AND',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('formula.and'),
        render: ary => ary.every(it => it),
    },
    {
        key: 'OR',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('formula.or'),
        render: ary => ary.some(it => it),
    },
    {
        key: 'CONCAT',
        title: (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.tf)('formula.concat'),
        render: ary => ary.join(''),
    },
    /* support:  1 + A1 + B2 * 3
    {
      key: 'DIVIDE',
      title: tf('formula.divide'),
      render: ary => ary.reduce((a, b) => Number(a) / Number(b)),
    },
    {
      key: 'PRODUCT',
      title: tf('formula.product'),
      render: ary => ary.reduce((a, b) => Number(a) * Number(b),1),
    },
    {
      key: 'SUBTRACT',
      title: tf('formula.subtract'),
      render: ary => ary.reduce((a, b) => Number(a) - Number(b)),
    },
    */
];
const formulas = baseFormulas;
// const formulas = (formulaAry = []) => {
//   const formulaMap = {};
//   baseFormulas.concat(formulaAry).forEach((f) => {
//     formulaMap[f.key] = f;
//   });
//   return formulaMap;
// };
const formulam = {};
baseFormulas.forEach((f) => {
    formulam[f.key] = f;
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});



/***/ }),

/***/ "./src/core/helper.ts":
/*!****************************!*\
  !*** ./src/core/helper.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "numberCalc": () => (/* binding */ numberCalc)
/* harmony export */ });
/* eslint-disable no-param-reassign */
function cloneDeep(obj) {
    return JSON.parse(JSON.stringify(obj));
}
const mergeDeep = (object = {}, ...sources) => {
    sources.forEach((source) => {
        Object.keys(source).forEach((key) => {
            const v = source[key];
            // console.log('k:', key, ', v:', source[key], typeof v, v instanceof Object);
            if (typeof v === 'string' ||
                typeof v === 'number' ||
                typeof v === 'boolean') {
                object[key] = v;
            }
            else if (typeof v !== 'function' &&
                !Array.isArray(v) &&
                v instanceof Object) {
                object[key] = object[key] || {};
                mergeDeep(object[key], v);
            }
            else {
                object[key] = v;
            }
        });
    });
    // console.log('::', object);
    return object;
};
function equals(obj1, obj2) {
    const keys = Object.keys(obj1);
    if (keys.length !== Object.keys(obj2).length)
        return false;
    for (let i = 0; i < keys.length; i += 1) {
        const k = keys[i];
        const v1 = obj1[k];
        const v2 = obj2[k];
        if (v2 === undefined)
            return false;
        if (typeof v1 === 'string' ||
            typeof v1 === 'number' ||
            typeof v1 === 'boolean') {
            if (v1 !== v2)
                return false;
        }
        else if (Array.isArray(v1)) {
            if (v1.length !== v2.length)
                return false;
            for (let ai = 0; ai < v1.length; ai += 1) {
                if (!equals(v1[ai], v2[ai]))
                    return false;
            }
        }
        else if (typeof v1 !== 'function' &&
            !Array.isArray(v1) &&
            v1 instanceof Object) {
            if (!equals(v1, v2))
                return false;
        }
    }
    return true;
}
/*
  objOrAry: obejct or Array
  cb: (value, index | key) => { return value }
*/
const sum = (objOrAry, cb = (value, k) => value) => {
    let total = 0;
    let size = 0;
    Object.keys(objOrAry).forEach((key) => {
        total += cb(objOrAry[key], key);
        size += 1;
    });
    return [total, size];
};
function deleteProperty(obj, property) {
    const oldv = obj[`${property}`];
    delete obj[`${property}`];
    return oldv;
}
function rangeReduceIf(min, max, inits, initv, ifv, getv) {
    let s = inits;
    let v = initv;
    let i = min;
    for (; i < max; i += 1) {
        if (s > ifv)
            break;
        v = getv(i);
        s += v;
    }
    return [i, s - v, v];
}
function rangeSum(min, max, getv) {
    let s = 0;
    for (let i = min; i < max; i += 1) {
        s += getv(i);
    }
    return s;
}
function rangeEach(min, max, cb) {
    for (let i = min; i < max; i += 1) {
        cb(i);
    }
}
function arrayEquals(a1, a2) {
    if (a1.length === a2.length) {
        for (let i = 0; i < a1.length; i += 1) {
            if (a1[i] !== a2[i])
                return false;
        }
    }
    else
        return false;
    return true;
}
function digits(a) {
    const v = `${a}`;
    let ret = 0;
    let flag = false;
    for (let i = 0; i < v.length; i += 1) {
        if (flag === true)
            ret += 1;
        if (v.charAt(i) === '.')
            flag = true;
    }
    return ret;
}
function numberCalc(type, a1, a2) {
    if (Number.isNaN(a1) || Number.isNaN(a2)) {
        return a1 + type + a2;
    }
    const al1 = digits(a1);
    const al2 = digits(a2);
    const num1 = Number(a1);
    const num2 = Number(a2);
    let ret = 0;
    if (type === '-') {
        ret = num1 - num2;
    }
    else if (type === '+') {
        ret = num1 + num2;
    }
    else if (type === '*') {
        ret = num1 * num2;
    }
    else if (type === '/') {
        ret = num1 / num2;
        if (digits(ret) > 5)
            return ret.toFixed(2);
        return ret;
    }
    return ret.toFixed(Math.max(al1, al2));
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    cloneDeep,
    merge: (...sources) => mergeDeep({}, ...sources),
    equals,
    arrayEquals,
    sum,
    rangeEach,
    rangeSum,
    rangeReduceIf,
    deleteProperty,
    numberCalc,
});


/***/ }),

/***/ "./src/core/history.ts":
/*!*****************************!*\
  !*** ./src/core/history.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ History)
/* harmony export */ });
// import helper from '../helper';
class History {
    undoItems;
    redoItems;
    constructor() {
        this.undoItems = [];
        this.redoItems = [];
    }
    add(data) {
        this.undoItems.push(JSON.stringify(data));
        this.redoItems = [];
    }
    canUndo() {
        return this.undoItems.length > 0;
    }
    canRedo() {
        return this.redoItems.length > 0;
    }
    undo(currentd, cb) {
        const { undoItems, redoItems } = this;
        if (this.canUndo()) {
            redoItems.push(JSON.stringify(currentd));
            cb(JSON.parse(undoItems.pop()));
        }
    }
    redo(currentd, cb) {
        const { undoItems, redoItems } = this;
        if (this.canRedo()) {
            undoItems.push(JSON.stringify(currentd));
            cb(JSON.parse(redoItems.pop()));
        }
    }
}


/***/ }),

/***/ "./src/core/merge.ts":
/*!***************************!*\
  !*** ./src/core/merge.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Merges": () => (/* binding */ Merges),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cell_range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell_range */ "./src/core/cell_range.ts");

class Merges {
    _;
    constructor(d = []) {
        this._ = d;
    }
    forEach(cb) {
        this._.forEach(cb);
    }
    deleteWithin(cr) {
        this._ = this._.filter(it => !it.within(cr));
    }
    getFirstIncludes(ri, ci) {
        for (let i = 0; i < this._.length; i += 1) {
            const it = this._[i];
            if (it.includes(ri, ci)) {
                return it;
            }
        }
        return null;
    }
    filterIntersects(cellRange) {
        return new Merges(this._.filter(it => it.intersects(cellRange)));
    }
    intersects(cellRange) {
        for (let i = 0; i < this._.length; i += 1) {
            const it = this._[i];
            if (it.intersects(cellRange)) {
                // console.log('intersects');
                return true;
            }
        }
        return false;
    }
    union(cellRange) {
        let cr = cellRange;
        this._.forEach((it) => {
            if (it.intersects(cr)) {
                cr = it.union(cr);
            }
        });
        return cr;
    }
    add(cr) {
        this.deleteWithin(cr);
        this._.push(cr);
    }
    // type: row | column
    shift(type, index, n, cbWithin) {
        this._.forEach((cellRange) => {
            const { sri, sci, eri, eci, } = cellRange;
            const range = cellRange;
            if (type === 'row') {
                if (sri >= index) {
                    range.sri += n;
                    range.eri += n;
                }
                else if (sri < index && index <= eri) {
                    range.eri += n;
                    cbWithin(sri, sci, n, 0);
                }
            }
            else if (type === 'column') {
                if (sci >= index) {
                    range.sci += n;
                    range.eci += n;
                }
                else if (sci < index && index <= eci) {
                    range.eci += n;
                    cbWithin(sri, sci, 0, n);
                }
            }
        });
    }
    move(cellRange, rn, cn) {
        this._.forEach((it1) => {
            const it = it1;
            if (it.within(cellRange)) {
                it.eri += rn;
                it.sri += rn;
                it.sci += cn;
                it.eci += cn;
            }
        });
    }
    setData(merges) {
        this._ = merges.map(merge => _cell_range__WEBPACK_IMPORTED_MODULE_0__.CellRange.valueOf(merge));
        return this;
    }
    getData() {
        return this._.map(merge => merge.toString());
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});



/***/ }),

/***/ "./src/core/row.ts":
/*!*************************!*\
  !*** ./src/core/row.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Rows": () => (/* binding */ Rows),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper */ "./src/core/helper.ts");
/* harmony import */ var _alphabet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alphabet */ "./src/core/alphabet.ts");


class Rows {
    _;
    len;
    height;
    constructor({ len, height }) {
        this._ = {};
        this.len = len;
        // default row height
        this.height = height;
    }
    getHeight(ri) {
        if (this.isHide(ri))
            return 0;
        const row = this.get(ri);
        if (row && row.height) {
            return row.height;
        }
        return this.height;
    }
    setHeight(ri, v) {
        const row = this.getOrNew(ri);
        row.height = v;
    }
    unhide(idx) {
        let index = idx;
        while (index > 0) {
            index -= 1;
            if (this.isHide(index)) {
                this.setHide(index, false);
            }
            else
                break;
        }
    }
    isHide(ri) {
        const row = this.get(ri);
        return row && row.hide;
    }
    setHide(ri, v) {
        const row = this.getOrNew(ri);
        if (v === true)
            row.hide = true;
        else
            delete row.hide;
    }
    setStyle(ri, style) {
        const row = this.getOrNew(ri);
        row.style = style;
    }
    sumHeight(min, max, exceptSet) {
        return _helper__WEBPACK_IMPORTED_MODULE_0__["default"].rangeSum(min, max, (i) => {
            if (exceptSet && exceptSet.has(i))
                return 0;
            return this.getHeight(i);
        });
    }
    totalHeight() {
        return this.sumHeight(0, this.len);
    }
    get(ri) {
        return this._[ri];
    }
    getOrNew(ri) {
        this._[ri] = this._[ri] || { cells: {} };
        return this._[ri];
    }
    getCell(ri, ci) {
        const row = this.get(ri);
        if (row !== undefined && row.cells !== undefined && row.cells[ci] !== undefined) {
            return row.cells[ci];
        }
        return null;
    }
    getCellMerge(ri, ci) {
        const cell = this.getCell(ri, ci);
        if (cell && cell.merge)
            return cell.merge;
        return [0, 0];
    }
    getCellOrNew(ri, ci) {
        const row = this.getOrNew(ri);
        row.cells[ci] = row.cells[ci] || {};
        return row.cells[ci];
    }
    // what: all | text | format
    setCell(ri, ci, cell, what = 'all') {
        const row = this.getOrNew(ri);
        if (what === 'all') {
            row.cells[ci] = cell;
        }
        else if (what === 'text') {
            row.cells[ci] = row.cells[ci] || {};
            row.cells[ci].text = cell.text;
        }
        else if (what === 'format') {
            row.cells[ci] = row.cells[ci] || {};
            row.cells[ci].style = cell.style;
            if (cell.merge)
                row.cells[ci].merge = cell.merge;
        }
    }
    setCellText(ri, ci, text) {
        const cell = this.getCellOrNew(ri, ci);
        if (cell.editable !== false)
            cell.text = text;
    }
    // what: all | format | text
    copyPaste(srcCellRange, dstCellRange, what, autofill = false, cb = (...args) => { }) {
        const { sri, sci, eri, eci, } = srcCellRange;
        const dsri = dstCellRange.sri;
        const dsci = dstCellRange.sci;
        const deri = dstCellRange.eri;
        const deci = dstCellRange.eci;
        const [rn, cn] = srcCellRange.size();
        const [drn, dcn] = dstCellRange.size();
        // console.log(srcIndexes, dstIndexes);
        let isAdd = true;
        let dn = 0;
        if (deri < sri || deci < sci) {
            isAdd = false;
            if (deri < sri)
                dn = drn;
            else
                dn = dcn;
        }
        for (let i = sri; i <= eri; i += 1) {
            if (this._[i]) {
                for (let j = sci; j <= eci; j += 1) {
                    if (this._[i].cells && this._[i].cells[j]) {
                        for (let ii = dsri; ii <= deri; ii += rn) {
                            for (let jj = dsci; jj <= deci; jj += cn) {
                                const nri = ii + (i - sri);
                                const nci = jj + (j - sci);
                                const ncell = _helper__WEBPACK_IMPORTED_MODULE_0__["default"].cloneDeep(this._[i].cells[j]);
                                // ncell.text
                                if (autofill && ncell && ncell.text && ncell.text.length > 0) {
                                    const { text } = ncell;
                                    let n = (jj - dsci) + (ii - dsri) + 2;
                                    if (!isAdd) {
                                        n -= dn + 1;
                                    }
                                    if (text[0] === '=') {
                                        ncell.text = text.replace(/[a-zA-Z]{1,3}\d+/g, (word) => {
                                            let [xn, yn] = [0, 0];
                                            if (sri === dsri) {
                                                xn = n - 1;
                                                // if (isAdd) xn -= 1;
                                            }
                                            else {
                                                yn = n - 1;
                                            }
                                            if (/^\d+$/.test(word))
                                                return word;
                                            return (0,_alphabet__WEBPACK_IMPORTED_MODULE_1__.expr2expr)(word, xn, yn);
                                        });
                                    }
                                    else if ((rn <= 1 && cn > 1 && (dsri > eri || deri < sri))
                                        || (cn <= 1 && rn > 1 && (dsci > eci || deci < sci))
                                        || (rn <= 1 && cn <= 1)) {
                                        const result = /[\\.\d]+$/.exec(text);
                                        // console.log('result:', result);
                                        if (result !== null) {
                                            const index = Number(result[0]) + n - 1;
                                            ncell.text = text.substring(0, result.index) + index;
                                        }
                                    }
                                }
                                this.setCell(nri, nci, ncell, what);
                                cb(nri, nci, ncell);
                            }
                        }
                    }
                }
            }
        }
    }
    cutPaste(srcCellRange, dstCellRange) {
        const ncellmm = {};
        this.each((ri) => {
            this.eachCells(ri, (ci) => {
                let nri = parseInt(ri, 10);
                let nci = parseInt(ci, 10);
                if (srcCellRange.includes(ri, ci)) {
                    nri = dstCellRange.sri + (nri - srcCellRange.sri);
                    nci = dstCellRange.sci + (nci - srcCellRange.sci);
                }
                ncellmm[nri] = ncellmm[nri] || { cells: {} };
                ncellmm[nri].cells[nci] = this._[ri].cells[ci];
            });
        });
        this._ = ncellmm;
    }
    // src: Array<Array<String>>
    paste(src, dstCellRange) {
        if (src.length <= 0)
            return;
        const { sri, sci } = dstCellRange;
        src.forEach((row, i) => {
            const ri = sri + i;
            row.forEach((cell, j) => {
                const ci = sci + j;
                this.setCellText(ri, ci, cell);
            });
        });
    }
    insert(sri, n = 1) {
        const ndata = {};
        this.each((ri, row) => {
            let nri = parseInt(ri, 10);
            if (nri >= sri) {
                nri += n;
                this.eachCells(ri, (ci, cell) => {
                    if (cell.text && cell.text[0] === '=') {
                        cell.text = cell.text.replace(/[a-zA-Z]{1,3}\d+/g, word => (0,_alphabet__WEBPACK_IMPORTED_MODULE_1__.expr2expr)(word, 0, n, (x, y) => y >= sri));
                    }
                });
            }
            ndata[nri] = row;
        });
        this._ = ndata;
        this.len += n;
    }
    delete(sri, eri) {
        const n = eri - sri + 1;
        const ndata = {};
        this.each((ri, row) => {
            const nri = parseInt(ri, 10);
            if (nri < sri) {
                ndata[nri] = row;
            }
            else if (ri > eri) {
                ndata[nri - n] = row;
                this.eachCells(ri, (ci, cell) => {
                    if (cell.text && cell.text[0] === '=') {
                        cell.text = cell.text.replace(/[a-zA-Z]{1,3}\d+/g, word => (0,_alphabet__WEBPACK_IMPORTED_MODULE_1__.expr2expr)(word, 0, -n, (x, y) => y > eri));
                    }
                });
            }
        });
        this._ = ndata;
        this.len -= n;
    }
    insertColumn(sci, n = 1) {
        this.each((ri, row) => {
            const rndata = {};
            this.eachCells(ri, (ci, cell) => {
                let nci = parseInt(ci, 10);
                if (nci >= sci) {
                    nci += n;
                    if (cell.text && cell.text[0] === '=') {
                        cell.text = cell.text.replace(/[a-zA-Z]{1,3}\d+/g, word => (0,_alphabet__WEBPACK_IMPORTED_MODULE_1__.expr2expr)(word, n, 0, x => x >= sci));
                    }
                }
                rndata[nci] = cell;
            });
            row.cells = rndata;
        });
    }
    deleteColumn(sci, eci) {
        const n = eci - sci + 1;
        this.each((ri, row) => {
            const rndata = {};
            this.eachCells(ri, (ci, cell) => {
                const nci = parseInt(ci, 10);
                if (nci < sci) {
                    rndata[nci] = cell;
                }
                else if (nci > eci) {
                    rndata[nci - n] = cell;
                    if (cell.text && cell.text[0] === '=') {
                        cell.text = cell.text.replace(/[a-zA-Z]{1,3}\d+/g, word => (0,_alphabet__WEBPACK_IMPORTED_MODULE_1__.expr2expr)(word, -n, 0, x => x > eci));
                    }
                }
            });
            row.cells = rndata;
        });
    }
    // what: all | text | format | merge
    deleteCells(cellRange, what = 'all') {
        cellRange.each((i, j) => {
            this.deleteCell(i, j, what);
        });
    }
    // what: all | text | format | merge
    deleteCell(ri, ci, what = 'all') {
        const row = this.get(ri);
        if (row !== null) {
            const cell = this.getCell(ri, ci);
            if (cell !== null && cell.editable !== false) {
                if (what === 'all') {
                    delete row.cells[ci];
                }
                else if (what === 'text') {
                    if (cell.text)
                        delete cell.text;
                    if (cell.value)
                        delete cell.value;
                }
                else if (what === 'format') {
                    if (cell.style !== undefined)
                        delete cell.style;
                    if (cell.merge)
                        delete cell.merge;
                }
                else if (what === 'merge') {
                    if (cell.merge)
                        delete cell.merge;
                }
            }
        }
    }
    maxCell() {
        const keys = Object.keys(this._);
        const ri = keys[keys.length - 1];
        const col = this._[ri];
        if (col) {
            const { cells } = col;
            const ks = Object.keys(cells);
            const ci = ks[ks.length - 1];
            return [parseInt(ri, 10), parseInt(ci, 10)];
        }
        return [0, 0];
    }
    each(cb) {
        Object.entries(this._).forEach(([ri, row]) => {
            cb(ri, row);
        });
    }
    eachCells(ri, cb) {
        if (this._[ri] && this._[ri].cells) {
            Object.entries(this._[ri].cells).forEach(([ci, cell]) => {
                cb(ci, cell);
            });
        }
    }
    setData(d) {
        if (d.len) {
            this.len = d.len;
            delete d.len;
        }
        this._ = d;
    }
    getData() {
        const { len } = this;
        return Object.assign({ len }, this._);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});



/***/ }),

/***/ "./src/core/scroll.ts":
/*!****************************!*\
  !*** ./src/core/scroll.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Scroll)
/* harmony export */ });
class Scroll {
    x;
    y;
    ri;
    ci;
    constructor() {
        this.x = 0; // left
        this.y = 0; // top
        this.ri = 0; // cell row-index
        this.ci = 0; // cell col-index
    }
}


/***/ }),

/***/ "./src/core/selector.ts":
/*!******************************!*\
  !*** ./src/core/selector.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Selector)
/* harmony export */ });
/* harmony import */ var _cell_range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell_range */ "./src/core/cell_range.ts");

class Selector {
    range;
    ri;
    ci;
    constructor() {
        this.range = new _cell_range__WEBPACK_IMPORTED_MODULE_0__.CellRange(0, 0, 0, 0);
        this.ri = 0;
        this.ci = 0;
    }
    multiple() {
        return this.range.multiple();
    }
    setIndexes(ri, ci) {
        this.ri = ri;
        this.ci = ci;
    }
    size() {
        return this.range.size();
    }
}


/***/ }),

/***/ "./src/core/validation.ts":
/*!********************************!*\
  !*** ./src/core/validation.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Validations": () => (/* binding */ Validations),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validator */ "./src/core/validator.ts");
/* harmony import */ var _cell_range__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cell_range */ "./src/core/cell_range.ts");


class Validation {
    refs;
    mode;
    validator;
    constructor(mode, refs, validator) {
        this.refs = refs;
        this.mode = mode; // cell
        this.validator = validator;
    }
    includes(ri, ci) {
        const { refs } = this;
        for (let i = 0; i < refs.length; i += 1) {
            const cr = _cell_range__WEBPACK_IMPORTED_MODULE_1__.CellRange.valueOf(refs[i]);
            if (cr.includes(ri, ci))
                return true;
        }
        return false;
    }
    addRef(ref) {
        this.remove(_cell_range__WEBPACK_IMPORTED_MODULE_1__.CellRange.valueOf(ref));
        this.refs.push(ref);
    }
    remove(cellRange) {
        const nrefs = [];
        this.refs.forEach((it) => {
            const cr = _cell_range__WEBPACK_IMPORTED_MODULE_1__.CellRange.valueOf(it);
            if (cr.intersects(cellRange)) {
                const crs = cr.difference(cellRange);
                crs.forEach(it1 => nrefs.push(it1.toString()));
            }
            else {
                nrefs.push(it);
            }
        });
        this.refs = nrefs;
    }
    getData() {
        const { refs, mode, validator } = this;
        const { type, required, operator, value, } = validator;
        return {
            refs, mode, type, required, operator, value,
        };
    }
    static valueOf({ refs, mode, type, required, operator, value, }) {
        return new Validation(mode, refs, new _validator__WEBPACK_IMPORTED_MODULE_0__["default"](type, required, value, operator));
    }
}
class Validations {
    _;
    errors;
    constructor() {
        this._ = [];
        // ri_ci: errMessage
        this.errors = new Map();
    }
    getError(ri, ci) {
        return this.errors.get(`${ri}_${ci}`);
    }
    validate(ri, ci, text) {
        const v = this.get(ri, ci);
        const key = `${ri}_${ci}`;
        const { errors } = this;
        if (v !== null) {
            const [flag, message] = v.validator.validate(text);
            if (!flag) {
                errors.set(key, message);
            }
            else {
                errors.delete(key);
            }
        }
        else {
            errors.delete(key);
        }
        return true;
    }
    // type: date|number|phone|email|list
    // validator: { required, value, operator }
    add(mode, ref, { type, required, value, operator, }) {
        const validator = new _validator__WEBPACK_IMPORTED_MODULE_0__["default"](type, required, value, operator);
        const v = this.getByValidator(validator);
        if (v !== null) {
            v.addRef(ref);
        }
        else {
            this._.push(new Validation(mode, [ref], validator));
        }
    }
    getByValidator(validator) {
        for (let i = 0; i < this._.length; i += 1) {
            const v = this._[i];
            if (v.validator.equals(validator)) {
                return v;
            }
        }
        return null;
    }
    get(ri, ci) {
        for (let i = 0; i < this._.length; i += 1) {
            const v = this._[i];
            if (v.includes(ri, ci))
                return v;
        }
        return null;
    }
    remove(cellRange) {
        this.each((it) => {
            it.remove(cellRange);
        });
    }
    each(cb) {
        this._.forEach(it => cb(it));
    }
    getData() {
        return this._.filter(it => it.refs.length > 0).map(it => it.getData());
    }
    setData(d) {
        this._ = d.map(it => Validation.valueOf(it));
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});



/***/ }),

/***/ "./src/core/validator.ts":
/*!*******************************!*\
  !*** ./src/core/validator.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Validator)
/* harmony export */ });
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../locale/locale */ "./src/locale/locale.ts");
/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper */ "./src/core/helper.ts");


const rules = {
    phone: /^[1-9]\d{10}$/,
    email: /w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*/,
};
function returnMessage(flag, key, ...arg) {
    let message = '';
    if (!flag) {
        message = (0,_locale_locale__WEBPACK_IMPORTED_MODULE_0__.t)(`validation.${key}`, ...arg);
    }
    return [flag, message];
}
class Validator {
    required;
    value;
    type;
    operator;
    message;
    // operator: b|nb|eq|neq|lt|lte|gt|gte
    // type: date|number|list|phone|email
    constructor(type, required, value, operator) {
        this.required = required;
        this.value = value;
        this.type = type;
        this.operator = operator;
        this.message = '';
    }
    parseValue(v) {
        const { type } = this;
        if (type === 'date') {
            return new Date(v);
        }
        if (type === 'number') {
            return Number(v);
        }
        return v;
    }
    equals(other) {
        let flag = this.type === other.type
            && this.required === other.required
            && this.operator === other.operator;
        if (flag) {
            if (Array.isArray(this.value)) {
                flag = _helper__WEBPACK_IMPORTED_MODULE_1__["default"].arrayEquals(this.value, other.value);
            }
            else {
                flag = this.value === other.value;
            }
        }
        return flag;
    }
    values() {
        return this.value.split(',');
    }
    validate(v) {
        const { required, operator, value, type, } = this;
        if (required && /^\s*$/.test(v)) {
            return returnMessage(false, 'required');
        }
        if (/^\s*$/.test(v))
            return [true];
        if (rules[type] && !rules[type].test(v)) {
            return returnMessage(false, 'notMatch');
        }
        if (type === 'list') {
            return returnMessage(this.values().includes(v), 'notIn');
        }
        if (operator) {
            const v1 = this.parseValue(v);
            if (operator === 'be') {
                const [min, max] = value;
                return returnMessage(v1 >= this.parseValue(min) && v1 <= this.parseValue(max), 'between', min, max);
            }
            if (operator === 'nbe') {
                const [min, max] = value;
                return returnMessage(v1 < this.parseValue(min) || v1 > this.parseValue(max), 'notBetween', min, max);
            }
            if (operator === 'eq') {
                return returnMessage(v1 === this.parseValue(value), 'equal', value);
            }
            if (operator === 'neq') {
                return returnMessage(v1 !== this.parseValue(value), 'notEqual', value);
            }
            if (operator === 'lt') {
                return returnMessage(v1 < this.parseValue(value), 'lessThan', value);
            }
            if (operator === 'lte') {
                return returnMessage(v1 <= this.parseValue(value), 'lessThanEqual', value);
            }
            if (operator === 'gt') {
                return returnMessage(v1 > this.parseValue(value), 'greaterThan', value);
            }
            if (operator === 'gte') {
                return returnMessage(v1 >= this.parseValue(value), 'greaterThanEqual', value);
            }
        }
        return [true];
    }
}


/***/ }),

/***/ "./src/locale/en.ts":
/*!**************************!*\
  !*** ./src/locale/en.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    toolbar: {
        undo: 'Undo',
        redo: 'Redo',
        print: 'Print',
        paintformat: 'Paint format',
        clearformat: 'Clear format',
        format: 'Format',
        fontName: 'Font',
        fontSize: 'Font size',
        fontBold: 'Font bold',
        fontItalic: 'Font italic',
        underline: 'Underline',
        strike: 'Strike',
        color: 'Text color',
        bgcolor: 'Fill color',
        border: 'Borders',
        merge: 'Merge cells',
        align: 'Horizontal align',
        valign: 'Vertical align',
        textwrap: 'Text wrapping',
        freeze: 'Freeze cell',
        autofilter: 'Filter',
        formula: 'Functions',
        more: 'More',
    },
    contextmenu: {
        copy: 'Copy',
        cut: 'Cut',
        paste: 'Paste',
        pasteValue: 'Paste values only',
        pasteFormat: 'Paste format only',
        hide: 'Hide',
        insertRow: 'Insert row',
        insertColumn: 'Insert column',
        deleteSheet: 'Delete',
        deleteRow: 'Delete row',
        deleteColumn: 'Delete column',
        deleteCell: 'Delete cell',
        deleteCellText: 'Delete cell text',
        validation: 'Data validations',
        cellprintable: 'Enable export',
        cellnonprintable: 'Disable export',
        celleditable: 'Enable editing',
        cellnoneditable: 'Disable editing',
    },
    print: {
        size: 'Paper size',
        orientation: 'Page orientation',
        orientations: ['Landscape', 'Portrait'],
    },
    format: {
        normal: 'Normal',
        text: 'Plain Text',
        number: 'Number',
        percent: 'Percent',
        rmb: 'RMB',
        usd: 'USD',
        eur: 'EUR',
        date: 'Date',
        time: 'Time',
        datetime: 'Date time',
        duration: 'Duration',
    },
    formula: {
        sum: 'Sum',
        average: 'Average',
        max: 'Max',
        min: 'Min',
        _if: 'IF',
        and: 'AND',
        or: 'OR',
        concat: 'Concat',
    },
    validation: {
        required: 'it must be required',
        notMatch: 'it not match its validation rule',
        between: 'it is between {} and {}',
        notBetween: 'it is not between {} and {}',
        notIn: 'it is not in list',
        equal: 'it equal to {}',
        notEqual: 'it not equal to {}',
        lessThan: 'it less than {}',
        lessThanEqual: 'it less than or equal to {}',
        greaterThan: 'it greater than {}',
        greaterThanEqual: 'it greater than or equal to {}',
    },
    error: {
        pasteForMergedCell: 'Unable to do this for merged cells',
    },
    calendar: {
        weeks: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    },
    button: {
        next: 'Next',
        cancel: 'Cancel',
        remove: 'Remove',
        save: 'Save',
        ok: 'OK',
    },
    sort: {
        desc: 'Sort Z -> A',
        asc: 'Sort A -> Z',
    },
    filter: {
        empty: 'empty',
    },
    dataValidation: {
        mode: 'Mode',
        range: 'Cell Range',
        criteria: 'Criteria',
        modeType: {
            cell: 'Cell',
            column: 'Colun',
            row: 'Row',
        },
        type: {
            list: 'List',
            number: 'Number',
            date: 'Date',
            phone: 'Phone',
            email: 'Email',
        },
        operator: {
            be: 'between',
            nbe: 'not betwwen',
            lt: 'less than',
            lte: 'less than or equal to',
            gt: 'greater than',
            gte: 'greater than or equal to',
            eq: 'equal to',
            neq: 'not equal to',
        },
    },
});


/***/ }),

/***/ "./src/locale/locale.ts":
/*!******************************!*\
  !*** ./src/locale/locale.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "locale": () => (/* binding */ locale),
/* harmony export */   "t": () => (/* binding */ t),
/* harmony export */   "tf": () => (/* binding */ tf)
/* harmony export */ });
/* harmony import */ var _en__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./en */ "./src/locale/en.ts");
/* global window */

// Defines the fallback language as English
let $languages = ['en'];
const $messages = {
    en: _en__WEBPACK_IMPORTED_MODULE_0__["default"],
};
function translate(key, messages) {
    if (messages) {
        // Return the translation from the first language in the languages array
        // that has a value for the provided key.
        for (const lang of $languages) {
            if (!messages[lang])
                break;
            let message = messages[lang];
            // Splits the key at '.' except where escaped as '\.'
            const keys = key.match(/(?:\\.|[^.])+/g);
            for (let i = 0; i < keys.length; i += 1) {
                const property = keys[i];
                const value = message[property];
                // If value doesn't exist, try next language
                if (!value)
                    break;
                if (i === keys.length - 1)
                    return value;
                // Move down to the next level of the messages object
                message = value;
            }
        }
    }
    return undefined;
}
function t(key, ...args) {
    let v = translate(key, $messages);
    if (!v && window && window.x_spreadsheet && window.x_spreadsheet.$messages) {
        v = translate(key, window.x_spreadsheet.$messages);
    }
    return v || '';
}
function tf(key) {
    return () => t(key);
}
// If clearLangList is set to false, lang will be added to the front of the
// languages array. The languages in the language array are searched in order
// to find a translation. This allows the use of other languages as a fallback
// if lang is missing some keys. The language array is preloaded with English.
// To set the languages array to only include lang, set clearLangList to true.
function locale(lang, message, clearLangList = false) {
    if (clearLangList) {
        $languages = [lang];
    }
    else {
        // Append to front of array.
        // Translation method will use the first language in the list that has a
        // matching key.
        $languages.unshift(lang);
    }
    if (message) {
        $messages[lang] = message;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    t,
});



/***/ }),

/***/ "./assets/sprite.svg":
/*!***************************!*\
  !*** ./assets/sprite.svg ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "7a05ab5bcad662d05f5c.svg";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"xspreadsheet": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Spreadsheet": () => (/* binding */ Spreadsheet),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "spreadsheet": () => (/* binding */ spreadsheet)
/* harmony export */ });
/* harmony import */ var _component_bottombar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component/bottombar */ "./src/component/bottombar.ts");
/* harmony import */ var _component_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component/element */ "./src/component/element.ts");
/* harmony import */ var _component_sheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component/sheet */ "./src/component/sheet.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ "./src/config.ts");
/* harmony import */ var _core_data_proxy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/data_proxy */ "./src/core/data_proxy.ts");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index.less */ "./src/index.less");
/* harmony import */ var _locale_locale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./locale/locale */ "./src/locale/locale.ts");
/* global window, document */







class Spreadsheet {
    options;
    sheetIndex;
    datas;
    bottombar;
    sheet;
    data;
    constructor(selectors, options = {}) {
        let targetEl = selectors;
        this.options = { showBottomBar: true, ...options };
        this.sheetIndex = 1;
        this.datas = [];
        if (typeof selectors === 'string') {
            targetEl = document.querySelector(selectors);
        }
        this.bottombar = this.options.showBottomBar
            ? new _component_bottombar__WEBPACK_IMPORTED_MODULE_0__["default"](() => {
                if (this.options.mode === 'read')
                    return;
                const d = this.addSheet();
                this.sheet.resetData(d);
            }, (index) => {
                const d = this.datas[index];
                this.sheet.resetData(d);
            }, () => {
                this.deleteSheet();
            }, (index, value) => {
                this.datas[index].name = value;
                this.sheet.trigger('change');
            })
            : null;
        this.data = this.addSheet();
        const rootEl = (0,_component_element__WEBPACK_IMPORTED_MODULE_1__.h)('div', `${_config__WEBPACK_IMPORTED_MODULE_3__.cssPrefix}`).on('contextmenu', (evt) => evt.preventDefault());
        // create canvas element
        targetEl.appendChild(rootEl.el);
        this.sheet = new _component_sheet__WEBPACK_IMPORTED_MODULE_2__["default"](rootEl, this.data);
        if (this.bottombar !== null) {
            rootEl.child(this.bottombar.el);
        }
    }
    addSheet(name, active = true) {
        const n = name || `sheet${this.sheetIndex}`;
        const d = new _core_data_proxy__WEBPACK_IMPORTED_MODULE_4__["default"](n, this.options);
        d.change = (...args) => {
            this.sheet.trigger('change', ...args);
        };
        this.datas.push(d);
        // console.log('d:', n, d, this.datas);
        if (this.bottombar !== null) {
            this.bottombar.addItem(n, active, this.options);
        }
        this.sheetIndex += 1;
        return d;
    }
    deleteSheet() {
        if (this.bottombar === null)
            return;
        const [oldIndex, nindex] = this.bottombar.deleteItem();
        if (oldIndex >= 0) {
            this.datas.splice(oldIndex, 1);
            if (nindex >= 0)
                this.sheet.resetData(this.datas[nindex]);
            this.sheet.trigger('change');
        }
    }
    loadData(data) {
        const ds = Array.isArray(data) ? data : [data];
        if (this.bottombar !== null) {
            this.bottombar.clear();
        }
        this.datas = [];
        if (ds.length > 0) {
            for (let i = 0; i < ds.length; i += 1) {
                const it = ds[i];
                const nd = this.addSheet(it.name, i === 0);
                nd.setData(it);
                if (i === 0) {
                    this.sheet.resetData(nd);
                }
            }
        }
        return this;
    }
    getData() {
        return this.datas.map((it) => it.getData());
    }
    cellText(ri, ci, text, sheetIndex = 0) {
        this.datas[sheetIndex].setCellText(ri, ci, text, 'finished');
        return this;
    }
    cell(ri, ci, sheetIndex = 0) {
        return this.datas[sheetIndex].getCell(ri, ci);
    }
    cellStyle(ri, ci, sheetIndex = 0) {
        return this.datas[sheetIndex].getCellStyle(ri, ci);
    }
    reRender() {
        this.sheet.table.render();
        return this;
    }
    on(eventName, func) {
        this.sheet.on(eventName, func);
        return this;
    }
    validate() {
        const { validations } = this.data;
        return validations.errors.size <= 0;
    }
    change(cb) {
        this.sheet.on('change', cb);
        return this;
    }
    static locale(lang, message) {
        (0,_locale_locale__WEBPACK_IMPORTED_MODULE_6__.locale)(lang, message);
    }
}
const spreadsheet = (el, options = {}) => new Spreadsheet(el, options);
if (window) {
    window.x_spreadsheet = spreadsheet;
    window.x_spreadsheet.locale = (lang, message) => (0,_locale_locale__WEBPACK_IMPORTED_MODULE_6__.locale)(lang, message);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Spreadsheet);


})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,